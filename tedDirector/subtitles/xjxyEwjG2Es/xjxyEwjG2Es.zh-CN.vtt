WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:07.000
翻译人员: Catherine Gu
校对人员: Qingqing Mao

00:00:12.709 --> 00:00:14.235
字体是我们

00:00:14.235 --> 00:00:16.157
大量使用的东西。

00:00:16.157 --> 00:00:17.239
从很大程度上，

00:00:17.239 --> 00:00:19.107
字体完全不可避免。

00:00:19.107 --> 00:00:22.130
但是很少有用户关心

00:00:22.130 --> 00:00:24.462
某种字体是哪儿来的

00:00:24.462 --> 00:00:27.226
或什么时候、谁设计的，

00:00:27.226 --> 00:00:30.579
是否真有人力融入了字体的创造，

00:00:30.579 --> 00:00:33.376
它是否只是

00:00:33.376 --> 00:00:37.088
由软件凭空产生的。

00:00:37.088 --> 00:00:40.613
但我却不得不关心这些问题。

00:00:40.613 --> 00:00:42.130
这是我的工作。

00:00:42.130 --> 00:00:44.340
我是这一小部分人之一，

00:00:44.340 --> 00:00:46.454
会对T和e之间错误的间距

00:00:46.454 --> 00:00:49.048
大发雷霆，

00:00:49.048 --> 00:00:50.948
就像你们这里看到的。

00:00:50.948 --> 00:00:52.390
我不得不换下那张幻灯片。

00:00:52.390 --> 00:00:54.461
我受不了，Chris也是。

00:00:54.461 --> 00:00:56.122
行了。好的。

00:00:56.122 --> 00:00:57.890
所以我的演讲是有关

00:00:57.890 --> 00:01:01.290
技术和字体设计之间的联系。

00:01:01.290 --> 00:01:03.953
自我工作以来

00:01:03.953 --> 00:01:06.825
技术已变化了多次：

00:01:06.825 --> 00:01:11.486
照排，数码，桌面，屏幕和网络。

00:01:11.486 --> 00:01:13.224
我已不得不适应这些变化，

00:01:13.224 --> 00:01:14.878
并设法理解它们对

00:01:14.878 --> 00:01:17.319
我的设计工作所产生的影响。

00:01:17.319 --> 00:01:22.489
这张幻灯片是有关工具对形式的影响。

00:01:22.489 --> 00:01:25.390
这两个字母，这两个K,

00:01:25.390 --> 00:01:28.715
在你们的左边我的右边的，是现代的，

00:01:28.715 --> 00:01:30.126
用计算机设计出来的。

00:01:30.126 --> 00:01:32.168
所有的直线都是笔直的。

00:01:32.168 --> 00:01:34.978
曲线具有用贝塞尔公式施加出来

00:01:34.978 --> 00:01:38.724
的数学平滑。

00:01:38.724 --> 00:01:41.221
右边，古老的哥特式的，

00:01:41.221 --> 00:01:45.280
是从耐磨的钢材手工切割出来的。

00:01:45.280 --> 00:01:47.405
没有一条直线实际上是直的。

00:01:47.405 --> 00:01:49.570
曲线有点微妙。

00:01:49.570 --> 00:01:54.284
它具有来自人手的生命火花，

00:01:54.284 --> 00:01:56.198
这是机器或程序

00:01:56.198 --> 00:01:58.131
永远也扑捉不到的。

00:01:58.131 --> 00:02:00.110
多么鲜明的对比。

00:02:00.110 --> 00:02:02.689
好吧，我撒了个谎。

00:02:02.689 --> 00:02:05.677
在TED撒了个谎。我真的很抱歉。

00:02:05.677 --> 00:02:07.798
这两个都是电脑做出来的，

00:02:07.798 --> 00:02:09.724
同样的软件，同样的贝塞尔曲线，

00:02:09.724 --> 00:02:11.416
同样的字体格式。

00:02:11.416 --> 00:02:13.950
你们左边的这个

00:02:13.950 --> 00:02:16.204
是由Emigre公司的Zuzana Licko制作的，

00:02:16.204 --> 00:02:17.639
另一个是我制作的。

00:02:17.639 --> 00:02:20.995
工具是一样的，但字母是不同的。

00:02:20.995 --> 00:02:22.518
字母不同

00:02:22.518 --> 00:02:23.724
是因为设计者不同。

00:02:23.724 --> 00:02:26.985
就这些。Zuzana希望她设计的东西看起来那样。

00:02:26.985 --> 00:02:30.106
我希望我的看起来这样。仅此而已。

00:02:30.106 --> 00:02:32.310
字体有很强的适应性。

00:02:32.310 --> 00:02:35.631
不像雕塑或建筑这样的艺术，

00:02:35.631 --> 00:02:39.030
字体使人看不出它的制作方法。

00:02:39.030 --> 00:02:41.827
我把自己看成是工业设计师。

00:02:41.827 --> 00:02:43.393
我设计的东西被制造，

00:02:43.393 --> 00:02:45.269
而且它有功能：

00:02:45.269 --> 00:02:47.107
可读并表达意思。

00:02:47.107 --> 00:02:48.753
除此之外还有更多的含义。

00:02:48.753 --> 00:02:50.601
有点儿美学的成份。

00:02:50.601 --> 00:02:53.317
是什么使这两个字母由于

00:02:53.317 --> 00:02:56.349
不同的设计者有不同的解释呢？

00:02:56.349 --> 00:02:58.362
是什么使某些设计者的工作

00:02:58.362 --> 00:03:01.273
有着特有的个人风格，

00:03:01.273 --> 00:03:03.810
像你在时装设计师

00:03:03.810 --> 00:03:06.885
或汽车设计师的作品中发现的一样？

00:03:06.885 --> 00:03:08.660
我承认，在有些情况下，

00:03:08.660 --> 00:03:10.430
我作为一名设计师

00:03:10.430 --> 00:03:12.899
确实感到技术的影响。

00:03:12.899 --> 00:03:15.959
这来自六十年代中期，

00:03:15.959 --> 00:03:18.194
从铅字变成照相排版，

00:03:18.194 --> 00:03:19.896
从热到凉。

00:03:19.896 --> 00:03:21.093
这既带来益处

00:03:21.093 --> 00:03:24.439
但也有一个特别的缺点：

00:03:24.439 --> 00:03:27.112
它的间距体系只提供了

00:03:27.112 --> 00:03:29.875
18个离散的单元

00:03:29.875 --> 00:03:33.558
来容纳字母。

00:03:33.558 --> 00:03:35.534
当时我被要求设计

00:03:35.534 --> 00:03:38.272
一系列紧凑的无衬线字体，

00:03:38.272 --> 00:03:41.435
在18个单元之内

00:03:41.435 --> 00:03:45.282
带有尽可能多的字体变化。

00:03:45.282 --> 00:03:46.921
快速地看了一下算术，

00:03:46.921 --> 00:03:51.770
我意识到实际只能进行三个相关设计。

00:03:51.770 --> 00:03:53.617
这里你们看到了，

00:03:53.617 --> 00:03:58.148
Helvetica压缩，额外压缩，和超压缩三种字体。

00:03:58.148 --> 00:04:00.019
这种严格的18 单元系统

00:04:00.019 --> 00:04:01.592
真把我限制住了。

00:04:01.592 --> 00:04:03.425
它某种程度上决定了

00:04:03.425 --> 00:04:05.714
设计的比例。

00:04:05.714 --> 00:04:09.744
这里是这些字体的小写部分。

00:04:09.744 --> 00:04:12.436
所以你是否会看着这些说，

00:04:12.436 --> 00:04:15.575
“可怜的马修不得不屈从于这一难题，

00:04:15.575 --> 00:04:19.382
天哪，结果显而易见。”

00:04:19.382 --> 00:04:20.689
我希望不是这样。

00:04:20.689 --> 00:04:22.930
如果我今天还做同样的工作，

00:04:22.930 --> 00:04:25.756
我会有1000个间距单元，

00:04:25.756 --> 00:04:28.840
而不是有18个单元。

00:04:28.840 --> 00:04:31.293
显然我能制出更多的字体变化，

00:04:31.293 --> 00:04:35.989
但这一系列的三种字体会更好吗？

00:04:35.989 --> 00:04:37.841
没有实际做过很难说，

00:04:37.841 --> 00:04:39.548
但我可以告诉你们

00:04:39.548 --> 00:04:42.637
不会有1000比18倍这么好。

00:04:42.637 --> 00:04:43.925
我的直觉是，

00:04:43.925 --> 00:04:46.483
任何改进都会是很轻微的，

00:04:46.483 --> 00:04:50.574
因为它们是根据系统的需要而设计的功能，

00:04:50.574 --> 00:04:52.983
像我说的那样，字体适应性很强。

00:04:52.983 --> 00:04:55.770
确实让人看不出它的设计方法。

00:04:55.770 --> 00:04:58.452
所有工业设计师的工作都有局限性。

00:04:58.452 --> 00:05:00.944
这不是艺术。

00:05:00.944 --> 00:05:02.822
问题是，是否局限性

00:05:02.822 --> 00:05:05.489
会迫使妥协？

00:05:05.489 --> 00:05:07.000
接受局限性

00:05:07.000 --> 00:05:09.449
你就降低工作标准了吗？

00:05:09.449 --> 00:05:11.411
我不相信，而且我总是被

00:05:11.411 --> 00:05:13.535
Charles Eames所说的话激励着。

00:05:13.535 --> 00:05:15.080
他说他意识到

00:05:15.080 --> 00:05:16.358
工作有局限性，

00:05:16.358 --> 00:05:19.344
但不是进行妥协。

00:05:19.344 --> 00:05:21.905
局限性和妥协之间的区别

00:05:21.905 --> 00:05:24.280
显然是很微妙的，

00:05:24.280 --> 00:05:29.951
但对我的工作态度确实是很重要的。

00:05:29.951 --> 00:05:32.842
记得这种阅读体验吧？

00:05:32.842 --> 00:05:35.047
电话簿。我留住这张幻灯片，

00:05:35.047 --> 00:05:38.802
你们可以怀旧一下。

00:05:38.802 --> 00:05:41.548
这来自70年代中期

00:05:41.548 --> 00:05:43.677
我为美国电话簿设计的

00:05:43.677 --> 00:05:45.951
Bell Centennial字体的早期尝试，

00:05:45.951 --> 00:05:49.270
这也是我第一次用数码字体，

00:05:49.270 --> 00:05:53.140
相当于一次洗礼。

00:05:53.140 --> 00:05:55.339
像我所说的那样，为电话簿而设计，

00:05:55.339 --> 00:05:58.407
以极小的尺寸打印在新闻纸上，

00:05:58.407 --> 00:06:00.725
用的是非常高速的轮转印刷机，

00:06:00.725 --> 00:06:03.477
以及煤油和灯黑制成的油墨。

00:06:03.477 --> 00:06:07.318
对字体设计师来说

00:06:07.318 --> 00:06:10.520
这不是一个好的环境。

00:06:10.520 --> 00:06:12.069
所以对我的挑战是

00:06:12.069 --> 00:06:13.920
在这些非常不利的条件下，

00:06:13.920 --> 00:06:18.665
尽可能地把字体设计好。

00:06:18.665 --> 00:06:21.520
如我所说，我们处在数码字体的婴儿期。

00:06:21.520 --> 00:06:24.339
我不得不在方格坐标图纸上

00:06:24.339 --> 00:06:26.054
手工绘制每一个字符。

00:06:26.054 --> 00:06:28.006
Bell Centennial字体有四种粗细。

00:06:28.006 --> 00:06:29.819
先一个像素一个像素地绘制，

00:06:29.819 --> 00:06:32.340
再用键盘对其逐行编码。

00:06:32.340 --> 00:06:36.764
我花了两年时间，但学了很多。

00:06:36.764 --> 00:06:38.394
这些字母看上去像

00:06:38.394 --> 00:06:39.838
被狗或别的什么东西嚼过，

00:06:39.838 --> 00:06:41.780
但在笔画的交点处或岔口处

00:06:41.780 --> 00:06:43.385
缺失的像素，

00:06:43.385 --> 00:06:45.119
是我研究了

00:06:45.119 --> 00:06:49.505
油墨在廉价纸上扩散和反应的效果，

00:06:49.505 --> 00:06:53.242
从而相应修改字体的结果。

00:06:53.242 --> 00:06:56.492
这些奇怪的人为的缺陷被设计于用来弥补

00:06:56.492 --> 00:06:59.244
大规模生产过程中所带来的

00:06:59.244 --> 00:07:01.530
不良影响。

00:07:01.530 --> 00:07:04.376
起初，AT&amp;T公司想

00:07:04.376 --> 00:07:07.617
在电话簿中用Helvetica字体，

00:07:07.617 --> 00:07:09.282
但正如我朋友Erik Spiekermann

00:07:09.282 --> 00:07:11.785
在电影《传奇字体》中所说，如果你看过的话，

00:07:11.785 --> 00:07:13.820
Helvetica字体的字母被设计得

00:07:13.820 --> 00:07:16.561
彼此尽可能相似。

00:07:16.561 --> 00:07:19.835
这不是看清小尺寸字体的良方。

00:07:19.835 --> 00:07:22.425
它在幻灯片上看起来非常优雅。

00:07:22.425 --> 00:07:24.615
我必须尽可能拆开

00:07:24.615 --> 00:07:27.615
Bell Centennial字体的形状

00:07:27.615 --> 00:07:29.910
来给这些数字形式消除歧义，

00:07:29.910 --> 00:07:32.823
就像你在这张幻灯片底部看到的那样。

00:07:32.823 --> 00:07:35.480
现在我们看到的是80年代中期，

00:07:35.480 --> 00:07:38.036
数码轮廓字体的初期，

00:07:38.036 --> 00:07:40.393
矢量技术。

00:07:40.393 --> 00:07:42.431
当时的一个问题在于

00:07:42.431 --> 00:07:44.287
字体的大小，

00:07:44.287 --> 00:07:47.171
在计算机内存中搜寻和存储一种字体

00:07:47.171 --> 00:07:52.141
所需的数据量。

00:07:52.141 --> 00:07:53.799
这个问题限制了

00:07:53.799 --> 00:07:56.789
排版系统同时可用的字体数量。

00:07:56.789 --> 00:08:00.938
我进行了数据分析，

00:08:00.938 --> 00:08:03.462
发现一种典型的衬线字体，

00:08:03.462 --> 00:08:04.921
如你们左边看到的，

00:08:04.921 --> 00:08:06.937
比中间的无衬线字体

00:08:06.937 --> 00:08:09.473
要多近两倍的数据，

00:08:09.473 --> 00:08:11.535
因为需要很多的点才能

00:08:11.535 --> 00:08:16.043
给出衬线与主体之间优雅而弯曲的过渡。

00:08:16.043 --> 00:08:19.477
顺便提一下，幻灯片底部的数字

00:08:19.477 --> 00:08:21.179
代表存储每一种字体

00:08:21.179 --> 00:08:24.984
所需的数据量。

00:08:24.984 --> 00:08:27.150
因此中间的无衬线字体

00:08:27.150 --> 00:08:30.114
是更经济的，

00:08:30.114 --> 00:08:32.313
81相比于151。

00:08:32.313 --> 00:08:35.970
我想，“哈，工程师们有麻烦了。

00:08:35.970 --> 00:08:38.205
设计师来救援。”

00:08:38.205 --> 00:08:40.552
我设计了一种衬线字体，你们可以在右边看到，

00:08:40.552 --> 00:08:42.499
没有弯曲的衬线。

00:08:42.499 --> 00:08:44.915
我把它们用直线段制成多角形的

00:08:44.915 --> 00:08:46.898
斜切的过渡。

00:08:46.898 --> 00:08:51.266
看，数据量上和无衬线字体一样经济。

00:08:51.266 --> 00:08:53.565
我们把右边的命名为Charter字体。

00:08:53.565 --> 00:08:55.535
所以我带着我的数字找到工程部主管，

00:08:55.535 --> 00:08:57.993
自豪地说：

00:08:57.993 --> 00:09:00.121
“我解决了你们的问题。”

00:09:00.121 --> 00:09:03.834
“噢？” 他说， “什么问题？”

00:09:03.834 --> 00:09:05.480
我说：“你知道，

00:09:05.480 --> 00:09:08.897
衬线字体等要求大量数据的问题。“

00:09:08.897 --> 00:09:12.444
“噢，” 他说，”我们上周解决了那个问题。

00:09:12.444 --> 00:09:14.600
我们写了一个压缩程序

00:09:14.600 --> 00:09:17.180
把所有字体的大小都缩小了一个数量级。

00:09:17.180 --> 00:09:19.168
你想要多少字体，

00:09:19.168 --> 00:09:20.726
你的系统就可以有多少。“

00:09:20.726 --> 00:09:23.340
我说：“谢谢你告诉我。“

00:09:23.340 --> 00:09:24.970
再次受打击。

00:09:24.970 --> 00:09:26.555
留给我的是

00:09:26.555 --> 00:09:31.488
为了一个不存在的技术问题而设计的一个解决方案。

00:09:31.488 --> 00:09:33.957
但这里是这个故事让我感兴趣的地方。

00:09:33.957 --> 00:09:36.552
我并没有赌气

00:09:36.552 --> 00:09:37.953
扔掉我的设计。

00:09:37.953 --> 00:09:39.690
我继续坚持做下去。

00:09:39.690 --> 00:09:41.858
作为技术练习开始的作品，

00:09:41.858 --> 00:09:45.122
变成了美学练习，真的。

00:09:45.122 --> 00:09:48.171
换句话说，我渐渐开始喜欢这种字体。

00:09:48.171 --> 00:09:50.490
忘掉初衷。别管它。

00:09:50.490 --> 00:09:52.980
我喜欢这个设计本身。

00:09:52.980 --> 00:09:55.363
Charter字体的简化的形式

00:09:55.363 --> 00:09:57.446
使它具有某种直言不讳的质量，

00:09:57.446 --> 00:09:58.997
简洁而开阔，

00:09:58.997 --> 00:10:01.487
这有点令我高兴。

00:10:01.487 --> 00:10:04.040
要知道，在技术创新的时代，

00:10:04.040 --> 00:10:05.560
设计师们希望受到

00:10:05.560 --> 00:10:07.296
当时环境的影响。

00:10:07.296 --> 00:10:08.817
我们想要回应。

00:10:08.817 --> 00:10:12.938
我们想要被迫去探索新的东西。

00:10:12.938 --> 00:10:15.837
因此Charter字体对我来说真有点象个寓言。

00:10:15.837 --> 00:10:19.627
最后，在技术和Charter字体的设计之间

00:10:19.627 --> 00:10:22.820
没有硬性的因果联系。

00:10:22.820 --> 00:10:26.582
我确实是误解了技术。

00:10:26.582 --> 00:10:29.910
技术确实向我提出了些什么，

00:10:29.910 --> 00:10:32.027
但并没有强迫我，

00:10:32.027 --> 00:10:34.744
我想这种情况时常发生。

00:10:34.744 --> 00:10:37.370
要知道，工程师们非常聪明，

00:10:37.370 --> 00:10:38.926
尽管偶尔受挫折，

00:10:38.926 --> 00:10:40.453
因为我不够聪明，

00:10:40.453 --> 00:10:42.180
我总喜欢和他们一起工作

00:10:42.180 --> 00:10:44.258
并向他们学习。

00:10:44.258 --> 00:10:46.600
恰好在90年代中期，

00:10:46.600 --> 00:10:49.291
我开始向微软

00:10:49.291 --> 00:10:51.679
谈起屏幕字体。

00:10:51.679 --> 00:10:54.100
当时，屏幕上的所有字体

00:10:54.100 --> 00:10:56.853
都由先前已有的印刷字体

00:10:56.853 --> 00:10:59.230
改编而来。

00:10:59.230 --> 00:11:01.733
但微软正确地预见到了

00:11:01.733 --> 00:11:03.883
这个潮流，

00:11:03.883 --> 00:11:06.670
电子通信的热潮，

00:11:06.670 --> 00:11:08.700
在屏幕上进行读写的趋势，

00:11:08.700 --> 00:11:14.063
而打印输出成为了次要的。

00:11:14.063 --> 00:11:17.635
这种优先级当时才露端倪。

00:11:17.635 --> 00:11:19.829
他们想要的是一小组核心字体，

00:11:19.829 --> 00:11:22.034
不是改编而来的，

00:11:22.034 --> 00:11:25.707
而是专门针对屏幕的问题而设计的，

00:11:25.707 --> 00:11:29.549
就是那些低分辨率的显示器。

00:11:29.549 --> 00:11:32.000
我对微软说，

00:11:32.000 --> 00:11:34.649
为某种特定的技术而设计的字体

00:11:34.649 --> 00:11:38.024
是自我淘汰的字体。

00:11:38.024 --> 00:11:40.118
过去我设计过太多字体

00:11:40.118 --> 00:11:43.697
意在减轻技术问题。

00:11:43.697 --> 00:11:46.532
多亏了工程师们，技术问题不存在了。

00:11:46.532 --> 00:11:49.021
我的字体也不存在了。

00:11:49.021 --> 00:11:52.152
这只是个临时措施。

00:11:52.152 --> 00:11:53.693
微软回过来说

00:11:53.693 --> 00:11:55.323
价格实惠的有着更好的分辨率的

00:11:55.323 --> 00:11:56.520
电脑显示器

00:11:56.520 --> 00:11:59.116
至少还要等十年。

00:11:59.116 --> 00:12:01.770
所以，我想， 好吧，十年，不太坏，

00:12:01.770 --> 00:12:04.182
不能算是个临时措施。

00:12:04.182 --> 00:12:06.183
所以我被说服了，

00:12:06.183 --> 00:12:07.905
我们着手工作，

00:12:07.905 --> 00:12:10.177
做出了Verdana字体和Georgia字体，

00:12:10.177 --> 00:12:12.517
第一次不是在纸上工作

00:12:12.517 --> 00:12:16.477
而是直接从像素到屏幕。

00:12:16.477 --> 00:12:20.330
当时，屏幕是二进制的。

00:12:20.330 --> 00:12:23.370
像素或亮或灭。

00:12:23.370 --> 00:12:26.225
这里你们看到字母的轮廓，

00:12:26.225 --> 00:12:27.692
大写的H，

00:12:27.692 --> 00:12:30.493
细黑线是它的轮廓，

00:12:30.493 --> 00:12:33.369
这也是它在存储器里的样子，

00:12:33.369 --> 00:12:35.039
叠加在点阵字体上，

00:12:35.039 --> 00:12:37.187
即灰色区域，

00:12:37.187 --> 00:12:39.024
这就是它在屏幕上显示的样子。

00:12:39.024 --> 00:12:42.170
点阵字体是从轮廓点阵化而来的。

00:12:42.170 --> 00:12:44.411
在大写的H里，全部都是直线，

00:12:44.411 --> 00:12:46.499
在直角坐标网格上

00:12:46.499 --> 00:12:50.867
两者近乎完美同步。

00:12:50.867 --> 00:12:53.993
O可就不是这样啦。

00:12:53.993 --> 00:12:56.720
这个看起来更像是砌砖而不是字体设计，

00:12:56.720 --> 00:12:59.621
但相信我，这是一个好的点阵字体O，

00:12:59.621 --> 00:13:01.636
原因很简单，

00:13:01.636 --> 00:13:04.116
在X轴和Y轴上都是对称的。

00:13:04.116 --> 00:13:06.974
在二进制的点阵字体里，

00:13:06.974 --> 00:13:08.694
你实际上不能要求更多了。

00:13:08.694 --> 00:13:11.098
我有时会为一个难字母

00:13:11.098 --> 00:13:13.454
设计三个或四个版本，

00:13:13.454 --> 00:13:14.960
像小写的a，

00:13:14.960 --> 00:13:18.500
再退回去选出最好的一个。

00:13:18.500 --> 00:13:20.595
其实没有最好的。

00:13:20.595 --> 00:13:23.020
所以这里需要设计师的判断，

00:13:23.020 --> 00:13:24.409
来设法决定

00:13:24.409 --> 00:13:27.450
哪个是最不坏的。

00:13:27.450 --> 00:13:29.900
这是一种妥协吗？

00:13:29.900 --> 00:13:31.446
对我来说不是，

00:13:31.446 --> 00:13:34.533
如果你是按技术所允许的最高标准来工作，

00:13:34.533 --> 00:13:36.742
尽管这个标准

00:13:36.742 --> 00:13:39.221
可能不够理想。

00:13:39.221 --> 00:13:40.812
你或许能看到这张幻灯片上

00:13:40.812 --> 00:13:42.974
有两个不同的点阵字体。

00:13:42.974 --> 00:13:44.670
我觉得上方的“a”

00:13:44.670 --> 00:13:46.583
比下方的“a”要好，

00:13:46.583 --> 00:13:49.159
但仍不够优秀。

00:13:49.159 --> 00:13:52.716
如果缩小它，你们或许能更好地看出这种效果。

00:13:52.716 --> 00:13:54.442
也许看不出来。

00:13:54.442 --> 00:13:56.838
所以，我是一个出于需要的实用主义者，

00:13:56.838 --> 00:13:58.341
而不是一个理想主义者。

00:13:58.341 --> 00:14:00.270
有些事情无法完美

00:14:00.270 --> 00:14:01.970
但尽你所能仍可完成，

00:14:01.970 --> 00:14:05.608
就某种气质而言，

00:14:05.608 --> 00:14:09.477
做这些事情时存在一种满足感。

00:14:09.477 --> 00:14:14.334
这是用Georgia斜体的小写h。

00:14:14.334 --> 00:14:16.607
这个点阵看起来参差不齐，还粗糙。

00:14:16.607 --> 00:14:18.466
它的确参差不齐和粗糙。

00:14:18.466 --> 00:14:20.462
但我通过实验发现，

00:14:20.462 --> 00:14:23.679
屏幕上的斜体

00:14:23.679 --> 00:14:25.625
有一个最佳倾斜

00:14:25.625 --> 00:14:27.957
以致笔画刚好

00:14:27.957 --> 00:14:30.440
在像素边界断开。

00:14:30.440 --> 00:14:33.221
看这个例子，多粗糙，

00:14:33.221 --> 00:14:35.271
左腿和右腿

00:14:35.271 --> 00:14:37.220
实际上怎样在同一水平分开。

00:14:37.220 --> 00:14:40.740
那是个胜利。那很好，就是那儿。

00:14:40.740 --> 00:14:43.918
当然在更低深度，

00:14:43.918 --> 00:14:45.841
你就没有多少选择了。

00:14:45.841 --> 00:14:50.886
这是S，万一你想知道。

00:14:50.886 --> 00:14:53.820
那么， 自从Verdana和Georgia字体发行以来，

00:14:53.820 --> 00:14:55.690
现在已经18年了。

00:14:55.690 --> 00:14:57.780
微软完全是对的，

00:14:57.780 --> 00:15:00.194
花了整整10年，

00:15:00.194 --> 00:15:02.474
但屏幕显示现在确实

00:15:02.474 --> 00:15:04.927
改进了空间分辨率，

00:15:04.927 --> 00:15:08.399
也大大改进了光度分辨率，

00:15:08.399 --> 00:15:11.553
多亏了反锯齿等技术。

00:15:11.553 --> 00:15:15.250
所以现在它们的使命完成了，

00:15:15.250 --> 00:15:16.980
是不是意味着

00:15:16.980 --> 00:15:18.860
那时我为较粗糙的显示器所设计的

00:15:18.860 --> 00:15:21.511
屏幕字体就消亡了呢？

00:15:21.511 --> 00:15:24.906
它们的寿命会超过现已过时的屏幕

00:15:24.906 --> 00:15:27.078
和大量涌向市场的

00:15:27.078 --> 00:15:28.581
新网页字体吗？

00:15:28.581 --> 00:15:30.441
还是他们已经建立了自己的

00:15:30.441 --> 00:15:32.679
某种不依赖技术的

00:15:32.679 --> 00:15:36.416
进化生态位呢？

00:15:36.416 --> 00:15:39.217
换句话说，是否它们已被并入了

00:15:39.217 --> 00:15:41.400
排版的主流了呢？

00:15:41.400 --> 00:15:45.058
我不确定，但到目前为止运行良好。

00:15:45.058 --> 00:15:47.553
嘿，以现今的淘汰率来看，

00:15:47.553 --> 00:15:49.704
18对于任何东西都是个不错的年纪了，

00:15:49.704 --> 00:15:51.618
所以我不抱怨。

00:15:51.618 --> 00:15:54.457
谢谢。

00:15:54.457 --> 00:15:56.634
（掌声）

