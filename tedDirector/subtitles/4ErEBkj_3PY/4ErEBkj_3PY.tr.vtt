WEBVTT
Kind: captions
Language: tr

00:00:00.000 --> 00:00:07.000
Çeviri: Sancak Gülgen
Gözden geçirme: Aylin Femener

00:00:20.260 --> 00:00:22.260
Günaydın.

00:00:22.260 --> 00:00:24.260
Bugün buraya kendi kendine çalışan

00:00:24.260 --> 00:00:27.260
uçan plaj topları hakkında konuşmak için geldim.

00:00:27.260 --> 00:00:31.260
Hayır, bunun gibi çevik hava robotları hakkında.

00:00:31.260 --> 00:00:34.260
Bunları inşa ederken karşılaşılan zorluklar ve

00:00:34.260 --> 00:00:36.260
bu teknolojiyi uygulamak için inanılmaz fırsatlar hakkında

00:00:36.260 --> 00:00:38.260
bir kaç şey söylemek istiyorum.

00:00:38.260 --> 00:00:40.260
Bu yüzden bu robotlar

00:00:40.260 --> 00:00:43.260
insansız uçan hava araçlarıdır.

00:00:43.260 --> 00:00:46.260
Buna rağmen, bruada gördüğünüz araçlar büyük.

00:00:46.260 --> 00:00:48.260
Binlerce kilogram ağırlığında ve

00:00:48.260 --> 00:00:50.260
hiç bir şekilde çevik değiller.

00:00:50.260 --> 00:00:52.260
Kendi kendine çalışan bile değiller.

00:00:52.260 --> 00:00:54.260
Gerçekte, bu araçların çoğu

00:00:54.260 --> 00:00:56.260
birden fazla pilotu içeren

00:00:56.260 --> 00:00:59.260
alıcıları kontrol eden ve görev koordinatörleri olan

00:00:59.260 --> 00:01:01.260
uçuş ekipleri tarafından

00:01:01.260 --> 00:01:03.260
çalıştırılmaktadır.

00:01:03.260 --> 00:01:05.260
Buna benzer robotları geliştirirken ilgimizi çeken şey

00:01:05.260 --> 00:01:07.260
ve burada diğer iki resmi var --

00:01:07.260 --> 00:01:10.260
raftan satın alabiliyor olunması.

00:01:10.260 --> 00:01:13.260
Bunlar dört pervaneli helikopterler

00:01:13.260 --> 00:01:17.260
ve neredeyse bir metre büyüklüğünde

00:01:17.260 --> 00:01:19.260
ve bir kilodan az.

00:01:19.260 --> 00:01:22.260
Ve sensör ve işlemcilerle donanımı iyileştirdik,

00:01:22.260 --> 00:01:24.260
ve bu robotlar GPS bilgisi olmaksızın

00:01:24.260 --> 00:01:26.260
iç mekanlarda uçabiliyorlar.

00:01:26.260 --> 00:01:28.260
Elimde tutmuş olduğum robot

00:01:28.260 --> 00:01:30.260
bir tanesidir,

00:01:30.260 --> 00:01:33.260
ve Alex ve Daniel isimli öğrenciler tarafından

00:01:33.260 --> 00:01:35.260
yaratılmıştır.

00:01:35.260 --> 00:01:37.260
Öyle ki, bunun ağırlığı

00:01:37.260 --> 00:01:39.260
60 gramdan biraz daha fazla.

00:01:39.260 --> 00:01:41.260
Yaklaşık 15 watt enerji harcıyor.

00:01:41.260 --> 00:01:43.260
Görüdüğünüz üzere,

00:01:43.260 --> 00:01:45.260
yaklaşık 20 cm çapındadır.

00:01:45.260 --> 00:01:48.260
Bu robotların nasıl çalıştığı ile ilgili

00:01:48.260 --> 00:01:50.260
size kısa bir bilgilendirme yapmama izin verin.

00:01:50.260 --> 00:01:52.260
Dört adet pervanesi var.

00:01:52.260 --> 00:01:54.260
Bunları aynı hızda döndürürseniz,

00:01:54.260 --> 00:01:56.260
robot havada duruyor.

00:01:56.260 --> 00:01:59.260
Eğer pervanelerden her birinin hızını arttırırsanız,

00:01:59.260 --> 00:02:02.260
robot uçuşa geçiyor ve yükseliyor.

00:02:02.260 --> 00:02:04.260
Tabi robot eğimli ise,

00:02:04.260 --> 00:02:06.260
yatay eksene yöneliyor,

00:02:06.260 --> 00:02:09.260
daha sonra bu doğrultuda hızlanıyor.

00:02:09.260 --> 00:02:12.260
Eğim kazandırmak için, iki yöntemden biri bu.

00:02:12.260 --> 00:02:14.260
Bu yüzden, resimde gördüğünüz

00:02:14.260 --> 00:02:16.260
dördüncü pervane daha hızlı dönüyor ve

00:02:16.260 --> 00:02:18.260
ikinci pervane daha yavaş dönüyor.

00:02:18.260 --> 00:02:20.260
Ve oluşan şey

00:02:20.260 --> 00:02:23.260
robotun yuvarlanmasına sebep olan andır.

00:02:23.260 --> 00:02:25.260
Diğer bir yolu,

00:02:25.260 --> 00:02:28.260
eğer pervane üçü hızlandırır ve

00:02:28.260 --> 00:02:30.260
pervane birin hızını yavaşlatırsanız,

00:02:30.260 --> 00:02:33.260
robot öne doğru ilerler.

00:02:33.260 --> 00:02:35.260
Ve son olarak,

00:02:35.260 --> 00:02:37.260
eğer ters pervane çiftlerini diğer çiften

00:02:37.260 --> 00:02:39.260
daha hızlı döndürürseniz,

00:02:39.260 --> 00:02:41.260
robot dik eksininde sapar.

00:02:41.260 --> 00:02:43.260
Bu yüzden yerleşik bir işlemci

00:02:43.260 --> 00:02:46.260
temel olarak hangi hareketin yapılacağına bakar ve

00:02:46.260 --> 00:02:48.260
bu hareketleri oluşturur ve

00:02:48.260 --> 00:02:51.260
motorlara saniye de 600 kere hangi komutları

00:02:51.260 --> 00:02:53.260
göndereceğini tespit eder.

00:02:53.260 --> 00:02:55.260
Bu basit olarak bunun nasıl çalıştığıdır.

00:02:55.260 --> 00:02:57.260
Bu tasarımın avantajlarından biri

00:02:57.260 --> 00:02:59.260
ölçeği küçülttüğünüz zaman

00:02:59.260 --> 00:03:02.260
robot doğal olarak çevik oluyor.

00:03:02.260 --> 00:03:04.260
İşte burada R

00:03:04.260 --> 00:03:06.260
robotun karekteristik uzunluğudur.

00:03:06.260 --> 00:03:09.260
Aslında çapın yarısıdır.

00:03:09.260 --> 00:03:12.260
R'yi azalttığınızda değişen çok fazla

00:03:12.260 --> 00:03:14.260
fiziksel parametre vardır.

00:03:14.260 --> 00:03:16.260
Bunlardan en önemlisi

00:03:16.260 --> 00:03:18.260
eylemsizlik ya da harekete karşı gelmedir.

00:03:18.260 --> 00:03:20.260
Sonuçta,

00:03:20.260 --> 00:03:23.260
açısal hareketi idame eden eylemsizlik

00:03:23.260 --> 00:03:26.260
R'nin beşinci kuvveti (R üzeri 5) olarak hesaplanır.

00:03:26.260 --> 00:03:28.260
Bu yüzden R ne kadar küçükse

00:03:28.260 --> 00:03:31.260
eylemsizlikte bir o kadar azalancaktır.

00:03:31.260 --> 00:03:34.260
Sonuçta, burada Yunan alfabesindeki Alfa ile belirtilen

00:03:34.260 --> 00:03:36.260
açısal hızlanma

00:03:36.260 --> 00:03:38.260
R üzeri bir şeklide gidiyor.

00:03:38.260 --> 00:03:40.260
Ters olarak R'ye orantılıdır.

00:03:40.260 --> 00:03:43.260
Daha küçük yaparsanız daha hızlı döndürebilirsiniz.

00:03:43.260 --> 00:03:45.260
Bu videolar daha net görülebilir.

00:03:45.260 --> 00:03:48.260
Sağ altta gördüğünüz bir robot

00:03:48.260 --> 00:03:50.260
yarım saniyeden az bir sürede

00:03:50.260 --> 00:03:52.260
360 derece dönebiliyor.

00:03:52.260 --> 00:03:55.260
Bir çok dönüş, daha az bir zamanda oluyor.

00:03:55.260 --> 00:03:57.260
Kartın üzerindeki işlemci

00:03:57.260 --> 00:03:59.260
hız ölçerlerden ve kart üzerindeki

00:03:59.260 --> 00:04:01.260
ciroskoptan geri bildirim alıyor ve

00:04:01.260 --> 00:04:03.260
daha önce söylediğim gibi

00:04:03.260 --> 00:04:05.260
bu robotu stabil tutmak için saniyede 600 kez

00:04:05.260 --> 00:04:07.260
komut gönderek hesaplama yapıyor.

00:04:07.260 --> 00:04:10.260
Solda, Daniel'in robotu havaya attığını görüyorsunuz.

00:04:10.260 --> 00:04:12.260
Ve bu kontrolün ne kadar duyarı olduğunu gösteriyor.

00:04:12.260 --> 00:04:14.260
Nasıl fırlatırsanız fırlatın

00:04:14.260 --> 00:04:18.260
robot kendini kurtarıp tekrar olması gereken hale geliyor.

00:04:18.260 --> 00:04:20.260
Peki bunun gibi robotları niye yapıyoruz?

00:04:20.260 --> 00:04:23.260
Şey, bunun gibi robotlar bir çok uygulamaya sahiptir.

00:04:23.260 --> 00:04:26.260
Onları saldırganlarla ilk olarak temas kurmak için ya da

00:04:26.260 --> 00:04:29.260
biokimyasal sızıntıları ya da gaz sızıntılarını

00:04:29.260 --> 00:04:32.260
kontrol etmek için

00:04:32.260 --> 00:04:34.260
gönderebilirsiniz.

00:04:34.260 --> 00:04:36.260
Onları inşaat işleri gibi uygulamalarda

00:04:36.260 --> 00:04:38.260
Kullanabilirsiniz.

00:04:38.260 --> 00:04:42.260
İşte burada robotlar kiriş, kolon taşıyorlar ve

00:04:42.260 --> 00:04:45.260
küp biçimde yapılar oluşturuyorlar.

00:04:45.260 --> 00:04:48.260
Size bunun hakkında biraz daha anlatayım.

00:04:48.260 --> 00:04:51.260
Robotlar kargo taşımacılığında kullanılabilirler.

00:04:51.260 --> 00:04:54.260
Küçük robotların problemlerinden biri

00:04:54.260 --> 00:04:56.260
taşıyabilecekleri yük kapasitesidir.

00:04:56.260 --> 00:04:58.260
Bunu birden çok robot kullanarak

00:04:58.260 --> 00:05:00.260
aşabilirsiniz.

00:05:00.260 --> 00:05:02.260
Bu yaşamış olduğumuz bir tecrübenin resmidir.

00:05:02.260 --> 00:05:04.260
aslında çok yakın bir zamanda değil artık--

00:05:04.260 --> 00:05:07.260
depremden kısa bir süre sonra Sendai'de.

00:05:07.260 --> 00:05:10.260
Bunu gibi robotlar yıkılmış binalara

00:05:10.260 --> 00:05:12.260
hasar tespiti için ya da reaktör binalarına

00:05:12.260 --> 00:05:15.260
radyasyon seviyesini oluşturmak için

00:05:15.260 --> 00:05:18.260
gönderebilebilirler.

00:05:19.260 --> 00:05:21.260
Burada temel problem

00:05:21.260 --> 00:05:24.260
Eğer robotlar birbirinden bağımsız şekildeyse

00:05:24.260 --> 00:05:26.260
çözmek zorunda olduğu temel problem

00:05:26.260 --> 00:05:28.260
temel olarak A noktasından B noktasına nasıl gideceğidir.

00:05:28.260 --> 00:05:30.260
Burası biraz zorlayıcı çünkü

00:05:30.260 --> 00:05:33.260
robotların dinamiği oldukça karmaşıktır.

00:05:33.260 --> 00:05:35.260
Aslında, 12 boyutlu bir uzayda yaşıyorlar.

00:05:35.260 --> 00:05:37.260
Burada ufak bir hile yapıyoruz.

00:05:37.260 --> 00:05:40.260
Eğik 12 boyutlu uzayı alıyoruz ve

00:05:40.260 --> 00:05:42.260
onu dört boyutlu düz bir uzaya

00:05:42.260 --> 00:05:44.260
dönüştürüyoruz.

00:05:44.260 --> 00:05:46.260
Dört boyutlu uzay

00:05:46.260 --> 00:05:49.260
X,Y,Z ve rota açısından oluşmaktadır.

00:05:49.260 --> 00:05:51.260
Bu yüzden robotların yaptığı şey

00:05:51.260 --> 00:05:55.260
minimum hava yörüngesinin oluşumunun planlamasıdır.

00:05:55.260 --> 00:05:57.260
Fiziği hatırlamak gerekirse,

00:05:57.260 --> 00:05:59.260
konumunuz, türeviniz, ivmeniz var,

00:05:59.260 --> 00:06:01.260
sonra hızlanma ve

00:06:01.260 --> 00:06:03.260
ve sonra hareketlenme geliyor

00:06:03.260 --> 00:06:05.260
ve daha sonra birleştirme geliyor.

00:06:05.260 --> 00:06:08.260
Bu robot birleşimi minimize ediyor.

00:06:08.260 --> 00:06:10.260
Etkin olarak yaptığı şey

00:06:10.260 --> 00:06:12.260
pürüzsüz ve ince hareket oluşturmasıdır.

00:06:12.260 --> 00:06:15.260
Bunu engellerden kaçınarak yapıyor.

00:06:15.260 --> 00:06:18.260
Bu düz bir uzayda minimum yörünge oluşturma

00:06:18.260 --> 00:06:20.260
daha sonra robotların kontrolü

00:06:20.260 --> 00:06:22.260
ve sonra yerine getirmesi için

00:06:22.260 --> 00:06:24.260
yapması gereken karmaşık 12 boyutlu uzaya

00:06:24.260 --> 00:06:26.260
tekrar geri dönüştürülecektir,

00:06:26.260 --> 00:06:28.260
Size bu minimum yörünge oluşturmanın

00:06:28.260 --> 00:06:30.260
neye benzediğini göstermem için bazı örnekler vermeme izin verin.

00:06:30.260 --> 00:06:32.260
Ve ilk videoda,

00:06:32.260 --> 00:06:34.260
Robot A noktasından B noktasına

00:06:34.260 --> 00:06:36.260
bir ara noktadan geçerek gidiyor.

00:06:42.260 --> 00:06:44.260
Yani robot herhangi bir kavis yörüngesini

00:06:44.260 --> 00:06:46.260
kesinlikle oluşturabilir durumda.

00:06:46.260 --> 00:06:48.260
Bunlar robotların 2G oluşuturduğu

00:06:48.260 --> 00:06:51.260
dairesel yörüngelerdir.

00:06:52.260 --> 00:06:56.260
Burada saniyede 100 kere robota nerede olduğunu ileten

00:06:56.260 --> 00:06:59.260
üzerindeki hareket yakalayan kameradır.

00:06:59.260 --> 00:07:02.260
Aynı zamanda roboto engellerin nerede olduğunu söylüyor.

00:07:02.260 --> 00:07:04.260
Engeller hareket ediyor olabilir.

00:07:04.260 --> 00:07:07.260
Ve burada Daniel'in halkayı havaya attığını görüyorsunuz,

00:07:07.260 --> 00:07:09.260
robot halkanın konumunu hesaplıyor

00:07:09.260 --> 00:07:13.260
ve halkanın içinden geçecebileceği en iyi yeri bulmaya çalışıyor.

00:07:13.260 --> 00:07:15.260
Ve akademik olduğu gibi,

00:07:15.260 --> 00:07:18.260
laboratuarımızda fonları arttırabilmek için halkaların içinden atlamak için eğitim alıyoruz

00:07:18.260 --> 00:07:21.260
ve robotların bunu yapmasını sağlıyoruz.

00:07:21.260 --> 00:07:27.260
(alkış)

00:07:27.260 --> 00:07:29.260
Robotların yapabildiği diğer birşey

00:07:29.260 --> 00:07:32.260
daha önce programlanabilen ve öğrenen

00:07:32.260 --> 00:07:34.260
yörünge parçalarını hatırlamasıdır.

00:07:34.260 --> 00:07:36.260
Burada görüdüğünüz robot hızlanmayı gerçekleştirmek için

00:07:36.260 --> 00:07:38.260
bir hareket oluşturuyor ve

00:07:38.260 --> 00:07:40.260
ve oryantasyonunu değiştirip,

00:07:40.260 --> 00:07:43.260
sonra önceki konumuna geliyor.

00:07:43.260 --> 00:07:46.260
Bunu yapmak zorunda çünkü penceredeki bu boşluk

00:07:46.260 --> 00:07:50.260
robotun genişliğinden birazcık daha büyük.

00:07:50.260 --> 00:07:53.260
Sıçrama tahtasının üzerinde duran dalgıç gibi

00:07:53.260 --> 00:07:55.260
eblirli bir momentum kazaranak kendini bırakır,

00:07:55.260 --> 00:07:58.260
ve sonra kendi etrafında döner, ikibuçuk salto ve

00:07:58.260 --> 00:08:00.260
zarifçe eksi haline döner,

00:08:00.260 --> 00:08:02.260
bu robot basitçe bunu yapıyor.

00:08:02.260 --> 00:08:05.260
Böylece bu oldukça zor işleri yapabilmek için küçük ufak tefek

00:08:05.260 --> 00:08:09.260
yolları nasıl birleştireceğini biliyor.

00:08:09.260 --> 00:08:11.260
Şimdi konuyu değiştirmek istiyorum.

00:08:11.260 --> 00:08:14.260
Bu küçük robotların en büyük dezavantajlarından biri boyutlarıdır.

00:08:14.260 --> 00:08:16.260
Size daha önce söylediğim gibi

00:08:16.260 --> 00:08:18.260
bu boyut engelini aşmak için çok, bir çok robot

00:08:18.260 --> 00:08:21.260
kullanmak isteyebiliriz.

00:08:21.260 --> 00:08:23.260
Zorluklardan biri

00:08:23.260 --> 00:08:26.260
bukadar çok robotu nasıl koordine edebileceğinizdir.

00:08:26.260 --> 00:08:28.260
Burada doğaya dönüyoruz.

00:08:28.260 --> 00:08:30.260
Size Professor Stephen Pratt'in laboratuarında

00:08:30.260 --> 00:08:32.260
nesne taşıyan Aphaenogaster çöl karıncılarının

00:08:32.260 --> 00:08:35.260
bir klibini göstermek istiyorum.

00:08:35.260 --> 00:08:37.260
Bu aslında bir incir parçasıdır.

00:08:37.260 --> 00:08:39.260
Aslında incir suyu ile kaplanmış herhangi bir nesneyi alabilirsiniz

00:08:39.260 --> 00:08:42.260
ve karıncalar bunu yuvalarına götüreceklerdir.

00:08:42.260 --> 00:08:45.260
Bu karıncaların herhangi bir merkezi koordinatörü yoktur.

00:08:45.260 --> 00:08:47.260
Komşularını algılayabiliyorlar.

00:08:47.260 --> 00:08:49.260
Belirgin bir iletişim yok.

00:08:49.260 --> 00:08:51.260
Fakat, komşularını algılabildikleri ve

00:08:51.260 --> 00:08:53.260
nesneleri algılayabildikleri için

00:08:53.260 --> 00:08:56.260
Grup arasında üstü kapalı bir koordinasyon var.

00:08:56.260 --> 00:08:58.260
Bu robotlarda olmasını istediğimiz

00:08:58.260 --> 00:09:01.260
bir koordinasyon tipidir.

00:09:01.260 --> 00:09:03.260
etrafında komşularının olduğu bir robotumuz

00:09:03.260 --> 00:09:05.260
olduğu zaman --

00:09:05.260 --> 00:09:07.260
robot I ve robot J'ye bakalım --

00:09:07.260 --> 00:09:09.260
robotlardan yapmasını istediğimiz

00:09:09.260 --> 00:09:12.260
belli bir formasyonda uçarken

00:09:12.260 --> 00:09:14.260
kendi aralarındaki mesafeyi gözlemlemeleridir.

00:09:14.260 --> 00:09:16.260
Ve bu mesafenin kabuledilebilir seviyelerde olduğundan

00:09:16.260 --> 00:09:18.260
emin olmak istiyorsunuz.

00:09:18.260 --> 00:09:21.260
Böylece tekrar robotlar bu hataları gözlemler ve

00:09:21.260 --> 00:09:23.260
daha sonra saniyede 600 kez hareket komutlarına çevirdikleri

00:09:23.260 --> 00:09:25.260
saniyede 100 kez olan

00:09:25.260 --> 00:09:28.260
kontrol komutlarını hesaplarlar.

00:09:28.260 --> 00:09:30.260
Bu merkezi olmayan bir yol ile de

00:09:30.260 --> 00:09:32.260
yapılabilir.

00:09:32.260 --> 00:09:34.260
Tekrar, eğer çok ama çok robotunuz varsa,

00:09:34.260 --> 00:09:38.260
görevi yerine getirebilmek için bu kadar hız ile bu bilgiyi merkezi olarak

00:09:38.260 --> 00:09:41.260
koordine etmeniz mümkün değildir.

00:09:41.260 --> 00:09:43.260
Ayrıca robotlar kendi hareketlerini diğer komuşlarından algıladıkları

00:09:43.260 --> 00:09:45.260
yalnızca lokal bilgiyi

00:09:45.260 --> 00:09:47.260
temel alırlar.

00:09:47.260 --> 00:09:49.260
Ve son olarak

00:09:49.260 --> 00:09:51.260
robotların komşularına

00:09:51.260 --> 00:09:53.260
bilinmezlik içinde olduğu üzerinde duruyoruz.

00:09:53.260 --> 00:09:56.260
Ve buna kişisel alan diyoruz.

00:09:56.260 --> 00:09:58.260
Size bir sonraki göstermek istediğim

00:09:58.260 --> 00:10:00.260
belirli bir formda uçan

00:10:00.260 --> 00:10:03.260
bu küçük 20 robotun

00:10:03.260 --> 00:10:05.260
videosudur.

00:10:05.260 --> 00:10:08.260
Komşularının konumlarını iziliyorlar.

00:10:08.260 --> 00:10:10.260
Dizilişi koruyorlar.

00:10:10.260 --> 00:10:12.260
Diziliş değişebiliyor.

00:10:12.260 --> 00:10:14.260
Düzlemsel dizilimde olabilirler,

00:10:14.260 --> 00:10:16.260
üç boyutlu diziliş içinde olabilirler.

00:10:16.260 --> 00:10:18.260
Burada gördüğünüz gibi,

00:10:18.260 --> 00:10:21.260
üç boyutlu dizilişten düzlemsel dizilişe geçiyorlar.

00:10:21.260 --> 00:10:23.260
Engellerin içinden uçarak geçebilmek için

00:10:23.260 --> 00:10:27.260
uçuş sırasında dizilişe uymaları gerekiyor.

00:10:27.260 --> 00:10:30.260
Yani tekrar, bu robotlar gerçekten birbirlerine yaklaşıyorlar.

00:10:30.260 --> 00:10:32.260
Sekizinci uçuşta gördüğünüz gibi,

00:10:32.260 --> 00:10:34.260
birbirlerine 3-5 santim kadar yaklaşıyorlar.

00:10:34.260 --> 00:10:37.260
Bu pervane kantlarının aerodinamik

00:10:37.260 --> 00:10:39.260
etkileşimlerine rağmen,

00:10:39.260 --> 00:10:41.260
stabil uçusu sağlayabiliyorlar.

00:10:41.260 --> 00:10:48.260
(Alkış)

00:10:48.260 --> 00:10:50.260
Dizilişte nasıl uçaçacağınızı bir kere bildikten sonra

00:10:50.260 --> 00:10:52.260
nesneleri elbirliği ile toplayabilirsiniz.

00:10:52.260 --> 00:10:54.260
Bu gösteriyor ki,

00:10:54.260 --> 00:10:57.260
robotun dayanıklılığını komşuları ile

00:10:57.260 --> 00:10:59.260
takım oluşturarak iki, üç, dört katına

00:10:59.260 --> 00:11:01.260
çıkarabilirsiniz, burada gördüğünüz gibi.

00:11:01.260 --> 00:11:04.260
Bunu yapmanın dezavantajlarından biri

00:11:04.260 --> 00:11:06.260
bunları yükselttiğiniz zaman

00:11:06.260 --> 00:11:08.260
diyelim ki aynı şeyi taşıyan birçok robota sahipsiniz,

00:11:08.260 --> 00:11:11.260
temel olarak etkili şekilde eylemsizliği arttırıyorsunuz,

00:11:11.260 --> 00:11:14.260
ve bir bedel ödüyorsunuz; çok çevik olmuyorlar.

00:11:14.260 --> 00:11:17.260
Fakat taşıma kapasitesi adına kazanım elde ediyorsunuz.

00:11:17.260 --> 00:11:19.260
Size göstermek istediğim diğer bir uygulama --

00:11:19.260 --> 00:11:21.260
tekrar, bizim laboratuarımızda--

00:11:21.260 --> 00:11:23.260
Bu Quentin Lindsey isimli yüksek lisans ögrencimizin çalışmasıdır.

00:11:23.260 --> 00:11:26.260
Onun algoritması bu rotobotlara temel olarak

00:11:26.260 --> 00:11:28.260
üçgen şeklindeki elemanlardan

00:11:28.260 --> 00:11:30.260
kübik yapıları nasıl bağımsız olarak inşa edeceğini

00:11:30.260 --> 00:11:33.260
söylüyor olmasıdır.

00:11:33.260 --> 00:11:35.260
Algoritması robotlara hangi parçanın

00:11:35.260 --> 00:11:37.260
alınacağı

00:11:37.260 --> 00:11:39.260
nereye konulacağını söylüyor.

00:11:39.260 --> 00:11:41.260
Bu videoda görüdüğünüz --

00:11:41.260 --> 00:11:43.260
10-15 kat hızlandırılmıştır--

00:11:43.260 --> 00:11:46.260
üç farklı yapının robotlar tarafından inşa ediliğini görüyorsunuz.

00:11:46.260 --> 00:11:48.260
Ve tekrar, herşey birbirinden bağımsız,

00:11:48.260 --> 00:11:50.260
ve Quentinin yapmak zorunda olduğu şey

00:11:50.260 --> 00:11:52.260
inşa etmek istediği tasarımın

00:11:52.260 --> 00:11:56.260
kopyasını elde etmektir.

00:11:56.260 --> 00:11:59.260
Şu ana kadar gördüğünüz deneyler,

00:11:59.260 --> 00:12:01.260
bütün bu gösteriler,

00:12:01.260 --> 00:12:04.260
hareket yakalama sistemlerinin yardımıyla yapılmıştır.

00:12:04.260 --> 00:12:06.260
Laboratuardan ayrıldığınız zaman ve

00:12:06.260 --> 00:12:09.260
ve dışarı çıkıp gerçek dünyaya çıktığınızda ne oluyor?

00:12:09.260 --> 00:12:12.260
Ya hiç GPS konum bilgisi yoksa?

00:12:12.260 --> 00:12:14.260
Bu robot

00:12:14.260 --> 00:12:16.260
bir kamera, lazer mesafe ölçer

00:12:16.260 --> 00:12:19.260
tarayıcı ile donatılmıştır.

00:12:19.260 --> 00:12:21.260
Çevresinin haritasını çıkarmak için

00:12:21.260 --> 00:12:23.260
sensörlerini kullanıyor.

00:12:23.260 --> 00:12:26.260
Haritanın sahip olduğu özellikler olan --

00:12:26.260 --> 00:12:28.260
kapı girişleri, pencereler,

00:12:28.260 --> 00:12:30.260
insanlar, mobilyalar--

00:12:30.260 --> 00:12:32.260
ve sonra kendi konumunu bunlarla karşılaştırarak

00:12:32.260 --> 00:12:34.260
tahmin edebiliyor.

00:12:34.260 --> 00:12:36.260
Öyle ki hiç bir global koordinasyon sistemi yok.

00:12:36.260 --> 00:12:39.260
Koordinasyon sistemi robotun

00:12:39.260 --> 00:12:42.260
nerede olduğu ve nereye baktığı baz alınarak oluşuyor.

00:12:42.260 --> 00:12:45.260
Bu özelliklere riayet ederek yön tayininde bulunuyor.

00:12:45.260 --> 00:12:47.260
Size Frank Shen ve

00:12:47.260 --> 00:12:49.260
Professor Nathan Micheal tarafından geliştirilen

00:12:49.260 --> 00:12:51.260
robotun binaya ilk kez girdiğinde ve

00:12:51.260 --> 00:12:55.260
uçuş sırasında harita oluşturmasını gösteren

00:12:55.260 --> 00:12:58.260
bir video göstereceğim.

00:12:58.260 --> 00:13:01.260
Öyle ki robotlar binanın özelliklerinin ne olduğunu buluyorlar.

00:13:01.260 --> 00:13:03.260
Harita oluşturuyorlar.

00:13:03.260 --> 00:13:05.260
Bu özelliklerin nerede olduğunu tayin edip

00:13:05.260 --> 00:13:07.260
size daha önce tarif ettiğim

00:13:07.260 --> 00:13:09.260
bize saniyede 100 kez izin veren

00:13:09.260 --> 00:13:11.260
kontrol algoritmalarını

00:13:11.260 --> 00:13:13.260
kullanarak kendi yerini tahmin ediyor.

00:13:13.260 --> 00:13:15.260
Bu robot aslında Frank tarafından

00:13:15.260 --> 00:13:17.260
komuta ediliyor.

00:13:17.260 --> 00:13:19.260
Fakat bu robot kendisinin

00:13:19.260 --> 00:13:21.260
nereye gideceğini bilebilir.

00:13:21.260 --> 00:13:23.260
Farz edin ki; bunu bir binanın içine gönderdim

00:13:23.260 --> 00:13:25.260
ve binanın neye benzediği hakkında bir fikrim yok,

00:13:25.260 --> 00:13:27.260
robota içeri girip

00:13:27.260 --> 00:13:29.260
bir harita oluşturmasını ve sonra geri gelip

00:13:29.260 --> 00:13:32.260
bana binanın neye benzediğini isteyebilirim.

00:13:32.260 --> 00:13:35.260
Öyle ki burada, robot bu haritadaki A noktasından B noktasına

00:13:35.260 --> 00:13:38.260
nasıl gideceği problemi sadece çözmekle kalmıyor,

00:13:38.260 --> 00:13:40.260
ayrıca B noktasına her defasında gideceği en iyi yolun ne olduğunu

00:13:40.260 --> 00:13:42.260
buluyor.

00:13:42.260 --> 00:13:45.260
Temel olarak az bilgi ile yerleri arayarak

00:13:45.260 --> 00:13:47.260
nereye gideceğini biliyor.

00:13:47.260 --> 00:13:50.260
Ve bu haritayı nasıl oluşturduğudur.

00:13:50.260 --> 00:13:52.260
Sizi son bir uygulama ile

00:13:52.260 --> 00:13:54.260
bırakmak istiyorum.

00:13:54.260 --> 00:13:57.260
Bu teknolojinin bir çok uygulaması vardır.

00:13:57.260 --> 00:13:59.260
Ben bir profesörüm ve eğiteme tutkuluyum.

00:13:59.260 --> 00:14:01.260
Robotlar anaokuldan lise son eğitimine kadar ki

00:14:01.260 --> 00:14:03.260
yapıyı gerçekten değiştirebilir.

00:14:03.260 --> 00:14:05.260
Fakat biz Güney Kaliforniya'dayız,

00:14:05.260 --> 00:14:07.260
Los Angeles'a yakınız,

00:14:07.260 --> 00:14:09.260
Bu yüzden eğlenceye yönelik birşey ile

00:14:09.260 --> 00:14:11.260
sonlandırmak istiyorum.

00:14:11.260 --> 00:14:13.260
Bir müzik videosu ile bitirmek istiyorum.

00:14:13.260 --> 00:14:16.260
Bu videoyu oluşturan yaratıcılardan

00:14:16.260 --> 00:14:18.260
Alex ve Daniel'i takdim etmek istiyorum.

00:14:18.260 --> 00:14:25.260
(Alkış)

00:14:25.260 --> 00:14:27.260
Bu videoyu başlatmadan önce,

00:14:27.260 --> 00:14:30.260
bunun Chris'ten telefon aldıktan son üç gün

00:14:30.260 --> 00:14:32.260
içinde yaptıklarını söylemek istiyorum.

00:14:32.260 --> 00:14:34.260
Ve videoyu çalan robotlar

00:14:34.260 --> 00:14:36.260
tamamen bağımsızlar.

00:14:36.260 --> 00:14:39.260
Dokuz robotun altı farklı enstrümanı çaldığını göreceksiniz.

00:14:39.260 --> 00:14:43.260
Ve tabi ki, sadece TED 2012 için yapıldı.

00:14:43.260 --> 00:14:46.260
Hadi izleyelim.

00:15:19.260 --> 00:15:29.260
(Müzik)

00:16:23.260 --> 00:16:40.260
(Alkış)

