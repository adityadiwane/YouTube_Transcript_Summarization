WEBVTT
Kind: captions
Language: zh-TW

00:00:00.000 --> 00:00:07.000
譯者: kane tan
審譯者: Joan Liu

00:00:20.260 --> 00:00:22.260
早安。

00:00:22.260 --> 00:00:24.260
今天我想要來談一談

00:00:24.260 --> 00:00:27.260
會自動飛行的海灘球。

00:00:27.260 --> 00:00:31.260
不是啦，是靈巧的飛行機器人，就像這一個。

00:00:31.260 --> 00:00:34.260
我想告訴大家製作這種東西的挑戰性

00:00:34.260 --> 00:00:36.260
以及一些很棒的可能性

00:00:36.260 --> 00:00:38.260
來運用這種技術。

00:00:38.260 --> 00:00:40.260
這些機器人

00:00:40.260 --> 00:00:43.260
算是一種無人的飛行器。

00:00:43.260 --> 00:00:46.260
不過，如你所見，它們的尺寸都比較大。

00:00:46.260 --> 00:00:48.260
它們都有幾千磅重，

00:00:48.260 --> 00:00:50.260
一點都不靈巧。

00:00:50.260 --> 00:00:52.260
它們甚至並不是自動操作的。

00:00:52.260 --> 00:00:54.260
事實上，大部分這些飛行器

00:00:54.260 --> 00:00:56.260
是由飛行小組所操作，

00:00:56.260 --> 00:00:59.260
可能有好幾個駕駛員

00:00:59.260 --> 00:01:01.260
同時在操控著感應器

00:01:01.260 --> 00:01:03.260
以及任務協調器。

00:01:03.260 --> 00:01:05.260
我們想要開發的機器人是像這個樣子 --

00:01:05.260 --> 00:01:07.260
左邊這裡另外兩張照片--

00:01:07.260 --> 00:01:10.260
這些你都可以買到現成的。

00:01:10.260 --> 00:01:13.260
這些是一種具有四個螺旋槳的直昇機，

00:01:13.260 --> 00:01:17.260
它們大約是一公尺大小，

00:01:17.260 --> 00:01:19.260
也有好幾磅重。

00:01:19.260 --> 00:01:22.260
於是我們將它們進行感應器與處理器的改良，

00:01:22.260 --> 00:01:24.260
讓這些機器人能夠在室內

00:01:24.260 --> 00:01:26.260
不靠GPS飛行。

00:01:26.260 --> 00:01:28.260
我手中所拿的這個機器人

00:01:28.260 --> 00:01:30.260
就是這種飛行器，

00:01:30.260 --> 00:01:33.260
這是由兩位學生所製作的，

00:01:33.260 --> 00:01:35.260
Alex 以及 Daniel。

00:01:35.260 --> 00:01:37.260
它的重量大概是

00:01:37.260 --> 00:01:39.260
十分之一磅左右。

00:01:39.260 --> 00:01:41.260
它消耗的能量大概是15瓦。

00:01:41.260 --> 00:01:43.260
如你所見，

00:01:43.260 --> 00:01:45.260
它的直徑大概是8英吋大。

00:01:45.260 --> 00:01:48.260
讓我替大家簡單介紹一下

00:01:48.260 --> 00:01:50.260
這些機器人的原理。

00:01:50.260 --> 00:01:52.260
這裡有四個螺旋槳。

00:01:52.260 --> 00:01:54.260
當這四個螺旋槳速度相同時，

00:01:54.260 --> 00:01:56.260
機器人就會懸浮在空中。

00:01:56.260 --> 00:01:59.260
如果這些螺旋槳速度增加，

00:01:59.260 --> 00:02:02.260
機器人就會飛起來，往上加速。

00:02:02.260 --> 00:02:04.260
當然，如果機器人傾斜了，

00:02:04.260 --> 00:02:06.260
相對於水平線來說，

00:02:06.260 --> 00:02:09.260
它就會往這個方向前進。

00:02:09.260 --> 00:02:12.260
想讓它傾斜的話，這裡有兩種方法可以辦到。

00:02:12.260 --> 00:02:14.260
在這圖片中，

00:02:14.260 --> 00:02:16.260
你可以看見4號螺旋槳轉速變快一點，

00:02:16.260 --> 00:02:18.260
而2號螺旋槳轉速變慢一點。

00:02:18.260 --> 00:02:20.260
當這種情況發生時，

00:02:20.260 --> 00:02:23.260
就會讓機器人進行翻轉。

00:02:23.260 --> 00:02:25.260
另一種狀況是，

00:02:25.260 --> 00:02:28.260
當3號螺旋槳的速度上升，

00:02:28.260 --> 00:02:30.260
1號螺旋槳的速度下降時，

00:02:30.260 --> 00:02:33.260
機器人就會往前傾斜。

00:02:33.260 --> 00:02:35.260
而最後一種可能，

00:02:35.260 --> 00:02:37.260
當對角線的兩組螺旋槳

00:02:37.260 --> 00:02:39.260
轉得比另外一組快時，

00:02:39.260 --> 00:02:41.260
機器人就會在垂直方向偏移。

00:02:41.260 --> 00:02:43.260
有一個內置處理器

00:02:43.260 --> 00:02:46.260
一直在監控著該進行什麼動作，

00:02:46.260 --> 00:02:48.260
並且將這些動作進行組合，

00:02:48.260 --> 00:02:51.260
然後以每秒600次的速度

00:02:51.260 --> 00:02:53.260
決定出該對這些螺旋槳下達什麼指令。

00:02:53.260 --> 00:02:55.260
這就是它操作的基本概念。

00:02:55.260 --> 00:02:57.260
這種設計的其中一項優點是，

00:02:57.260 --> 00:02:59.260
當你將它的尺寸縮小時，

00:02:59.260 --> 00:03:02.260
機器人自然就會變得很靈巧。

00:03:02.260 --> 00:03:04.260
這邊的 R

00:03:04.260 --> 00:03:06.260
代表著機器人特性的長度。

00:03:06.260 --> 00:03:09.260
事實上是直徑的一半。

00:03:09.260 --> 00:03:12.260
而當你將 R 縮減時，

00:03:12.260 --> 00:03:14.260
許多物理係數就會跟著變動。

00:03:14.260 --> 00:03:16.260
其中最重要的

00:03:16.260 --> 00:03:18.260
就是慣性或稱為阻止變動的抵抗力。

00:03:18.260 --> 00:03:20.260
結果，

00:03:20.260 --> 00:03:23.260
控制了角運動的慣性，

00:03:23.260 --> 00:03:26.260
大小約是 R 的 5 次方。

00:03:26.260 --> 00:03:28.260
所以當 R 變小時，

00:03:28.260 --> 00:03:31.260
慣性會急遽的下降。

00:03:31.260 --> 00:03:34.260
結果，角加速度，

00:03:34.260 --> 00:03:36.260
這裡用希臘字母的 α 表示，

00:03:36.260 --> 00:03:38.260
變成了 1 / R 。

00:03:38.260 --> 00:03:40.260
它和 R 成反比。

00:03:40.260 --> 00:03:43.260
當尺寸越小時，它就越容易旋轉。

00:03:43.260 --> 00:03:45.260
用這個影片說明會清楚一點。

00:03:45.260 --> 00:03:48.260
在右下角，你可以看見一個機器人

00:03:48.260 --> 00:03:50.260
正在進行 360 度翻轉

00:03:50.260 --> 00:03:52.260
在不到 1/2 秒的時間內。

00:03:52.260 --> 00:03:55.260
多次的翻轉，只要稍微長一點點的時間。

00:03:55.260 --> 00:03:57.260
在這種狀況下，內置的處理器

00:03:57.260 --> 00:03:59.260
接收了加速器

00:03:59.260 --> 00:04:01.260
以及陀螺儀回傳的資訊，

00:04:01.260 --> 00:04:03.260
然後進行計算，如先前所說，

00:04:03.260 --> 00:04:05.260
用每秒600次的速度發出指令，

00:04:05.260 --> 00:04:07.260
讓機器人保持平衡。

00:04:07.260 --> 00:04:10.260
在左下角，Daniel 正將機器人拋向空中。

00:04:10.260 --> 00:04:12.260
這會讓你知道它的操控能力有多強大。

00:04:12.260 --> 00:04:14.260
不論你怎麼丟，

00:04:14.260 --> 00:04:18.260
機器人都能恢復平衡然後回到他的手中。

00:04:18.260 --> 00:04:20.260
為什麼要將機器人設計成這樣呢？

00:04:20.260 --> 00:04:23.260
嗯，這種機器人有很多種運用方式。

00:04:23.260 --> 00:04:26.260
你可以將它派遣到這種建築物裡，

00:04:26.260 --> 00:04:29.260
擔任先遣部隊去找出侵入者，

00:04:29.260 --> 00:04:32.260
或是去找尋生化物質洩漏，

00:04:32.260 --> 00:04:34.260
或是瓦斯洩漏等。

00:04:34.260 --> 00:04:36.260
你也可以將它們運用在

00:04:36.260 --> 00:04:38.260
例如建築上面。

00:04:38.260 --> 00:04:42.260
這裡的機器人正運送著橫梁、柱子，

00:04:42.260 --> 00:04:45.260
並且組合成立方體形狀的建築物。

00:04:45.260 --> 00:04:48.260
我再告訴大家詳細一點。

00:04:48.260 --> 00:04:51.260
這些機器人可以用來運送貨櫃。

00:04:51.260 --> 00:04:54.260
但這些小機器人的困難在於

00:04:54.260 --> 00:04:56.260
它們對於重物的負載能力有限。

00:04:56.260 --> 00:04:58.260
所以如果你可能會希望能有多一點機器人

00:04:58.260 --> 00:05:00.260
一起來搬運這個重物。

00:05:00.260 --> 00:05:02.260
這是我們近期實驗的照片 --

00:05:02.260 --> 00:05:04.260
事實上已經不算是近期了 --

00:05:04.260 --> 00:05:07.260
在地震過後的仙台市(日本)。

00:05:07.260 --> 00:05:10.260
這種機器人可以被派遣進入傾倒的建築物裡面

00:05:10.260 --> 00:05:12.260
去評估天災造成的損害，

00:05:12.260 --> 00:05:15.260
或是派遣到反應爐裡

00:05:15.260 --> 00:05:18.260
去勘查輻射等級。

00:05:19.260 --> 00:05:21.260
如果這些機器人想有自主能力的話，

00:05:21.260 --> 00:05:24.260
它們必須先解決這個問題，

00:05:24.260 --> 00:05:26.260
就是必須能夠判斷

00:05:26.260 --> 00:05:28.260
怎麼從 A 點到達 B 點。

00:05:28.260 --> 00:05:30.260
這有一點難度，

00:05:30.260 --> 00:05:33.260
因為這個機器人的動力學是相當複雜的。

00:05:33.260 --> 00:05:35.260
事實上，它們活在 12 維空間裡。

00:05:35.260 --> 00:05:37.260
所以我們運用了一些技巧。

00:05:37.260 --> 00:05:40.260
我們將這個 12 維空間的曲線

00:05:40.260 --> 00:05:42.260
轉換成為

00:05:42.260 --> 00:05:44.260
一個平面的四維空間。

00:05:44.260 --> 00:05:46.260
在這個四維空間之中，

00:05:46.260 --> 00:05:49.260
包含了 X, Y, Z 還有偏移的角度。

00:05:49.260 --> 00:05:51.260
所以這個機器人所做的是，

00:05:51.260 --> 00:05:55.260
去找出我們所說的最小震盪軌跡。

00:05:55.260 --> 00:05:57.260
複習一下物理參數，

00:05:57.260 --> 00:05:59.260
我們有位置，接著衍生出速度，

00:05:59.260 --> 00:06:01.260
以及加速度，

00:06:01.260 --> 00:06:03.260
還有加加速度，

00:06:03.260 --> 00:06:05.260
然後是震盪。

00:06:05.260 --> 00:06:08.260
所以機器人將震盪進行最小化。

00:06:08.260 --> 00:06:10.260
這實際上的結果就是

00:06:10.260 --> 00:06:12.260
產生出柔順且優美的動作。

00:06:12.260 --> 00:06:15.260
它還可以用來避開障礙物。

00:06:15.260 --> 00:06:18.260
而這些最小震盪軌跡在這個平面空間中

00:06:18.260 --> 00:06:20.260
又會被轉換回

00:06:20.260 --> 00:06:22.260
這個複雜的 12 維空間，

00:06:22.260 --> 00:06:24.260
才能夠讓機器人去進行

00:06:24.260 --> 00:06:26.260
控制以及執行任務。

00:06:26.260 --> 00:06:28.260
讓我給大家看一些例子

00:06:28.260 --> 00:06:30.260
說明這些最小震盪軌跡是什麼樣子。

00:06:30.260 --> 00:06:32.260
在第一段影片中，

00:06:32.260 --> 00:06:34.260
你可以看見機器人經過中繼點

00:06:34.260 --> 00:06:36.260
由 A 點到達 B 點。

00:06:42.260 --> 00:06:44.260
所以機器人確實可以

00:06:44.260 --> 00:06:46.260
去執行任何曲線軌跡。

00:06:46.260 --> 00:06:48.260
這些是環狀軌跡，

00:06:48.260 --> 00:06:51.260
機器人牽引著大約 2 G 的重力。

00:06:52.260 --> 00:06:56.260
在上面有個置頂動態影像攝影機，

00:06:56.260 --> 00:06:59.260
它會以每秒100次的速度告訴機器人自己在哪裡。

00:06:59.260 --> 00:07:02.260
它也會告訴機器人這些障礙物的位置。

00:07:02.260 --> 00:07:04.260
這些也可以是移動中的障礙物。

00:07:04.260 --> 00:07:07.260
你將會看見 Daniel 將這個鐵環丟向空中，

00:07:07.260 --> 00:07:09.260
機器人會計算鐵環的位置，

00:07:09.260 --> 00:07:13.260
然後試著去找出穿過鐵環的最佳方式。

00:07:13.260 --> 00:07:15.260
身為一個學術人員，

00:07:15.260 --> 00:07:18.260
我們總是被訓練得能夠赴湯蹈火才能籌措研究經費，

00:07:18.260 --> 00:07:21.260
所以我們也要我們的機器人做到。

00:07:21.260 --> 00:07:27.260
(掌聲)

00:07:27.260 --> 00:07:29.260
這機器人還能做另一件事，

00:07:29.260 --> 00:07:32.260
就是去記住軌跡的片段，

00:07:32.260 --> 00:07:34.260
不論是它自行發現的或是事先輸入的。

00:07:34.260 --> 00:07:36.260
所以你可以看見機器人會去

00:07:36.260 --> 00:07:38.260
組合一項動作

00:07:38.260 --> 00:07:40.260
讓它產生動量，

00:07:40.260 --> 00:07:43.260
接著改變自己的行進方向在回復過來。

00:07:43.260 --> 00:07:46.260
它必須這麼做，因為這個窗戶的缺口大小

00:07:46.260 --> 00:07:50.260
只比機器人的寬度稍微大一點。

00:07:50.260 --> 00:07:53.260
就像是跳水選手站在跳板上，

00:07:53.260 --> 00:07:55.260
接著會跳起來用以產生動量，

00:07:55.260 --> 00:07:58.260
然後快速旋轉，翻轉兩周半進行穿越，

00:07:58.260 --> 00:08:00.260
最後優雅的回復，

00:08:00.260 --> 00:08:02.260
這就是機器人所做的事。

00:08:02.260 --> 00:08:05.260
它懂得如何去結合這些零碎的軌跡

00:08:05.260 --> 00:08:09.260
以達成這些相當困難的任務。

00:08:09.260 --> 00:08:11.260
我想換個話題。

00:08:11.260 --> 00:08:14.260
這些小機器人的缺點之一就是尺寸。

00:08:14.260 --> 00:08:16.260
如同先前所提，

00:08:16.260 --> 00:08:18.260
我們想使用大量的機器人

00:08:18.260 --> 00:08:21.260
來解決尺寸上的限制。

00:08:21.260 --> 00:08:23.260
但有個困難點是

00:08:23.260 --> 00:08:26.260
你要如何去協調這些機器人呢？

00:08:26.260 --> 00:08:28.260
這部份我們觀察了自然界。

00:08:28.260 --> 00:08:30.260
我想讓大家看一段影片，

00:08:30.260 --> 00:08:32.260
關於沙漠盤腹蟻

00:08:32.260 --> 00:08:35.260
在 Stephen Pratt 教授的實驗室裡搬運東西。

00:08:35.260 --> 00:08:37.260
事實上這是一小塊無花果。

00:08:37.260 --> 00:08:39.260
事實上你可以把任何東西沾附一層無花果汁

00:08:39.260 --> 00:08:42.260
螞蟻們就會將它搬回巢穴裡。

00:08:42.260 --> 00:08:45.260
這些螞蟻並沒有中樞協調者。

00:08:45.260 --> 00:08:47.260
它們能感覺到旁邊的鄰居們。

00:08:47.260 --> 00:08:49.260
不用進行明確的溝通。

00:08:49.260 --> 00:08:51.260
但因為它們能感覺到鄰居，

00:08:51.260 --> 00:08:53.260
因為它們能感覺到東西，

00:08:53.260 --> 00:08:56.260
它們在團體間有著隱性協調能力。

00:08:56.260 --> 00:08:58.260
這種協調能力

00:08:58.260 --> 00:09:01.260
就是我們希望機器人能有的。

00:09:01.260 --> 00:09:03.260
當我們的一個機器人

00:09:03.260 --> 00:09:05.260
被周圍的機器人包圍時 --

00:09:05.260 --> 00:09:07.260
看看機器人 I 和機器人 J --

00:09:07.260 --> 00:09:09.260
我們希望機器人做的事情是

00:09:09.260 --> 00:09:12.260
當它們以特定隊形飛行時

00:09:12.260 --> 00:09:14.260
去偵測它們之間的距離。

00:09:14.260 --> 00:09:16.260
你期望能夠確保

00:09:16.260 --> 00:09:18.260
這個距離是在可接受的範圍內。

00:09:18.260 --> 00:09:21.260
於是機器人們偵測著這個誤差值

00:09:21.260 --> 00:09:23.260
然後以每秒100次的速度

00:09:23.260 --> 00:09:25.260
去估算控制指令，

00:09:25.260 --> 00:09:28.260
接著以每秒600次的速度對螺旋槳進行動作指令。

00:09:28.260 --> 00:09:30.260
這必須是在

00:09:30.260 --> 00:09:32.260
沒有中央控制的方式下進行。

00:09:32.260 --> 00:09:34.260
當你有許許多多機器人的時候，

00:09:34.260 --> 00:09:38.260
想要以中央協調訊息的方式

00:09:38.260 --> 00:09:41.260
快速的讓所有機器人完成任務是不可能的。

00:09:41.260 --> 00:09:43.260
再加上機器人們必須依靠

00:09:43.260 --> 00:09:45.260
它們自身去偵測到鄰近機器人

00:09:45.260 --> 00:09:47.260
以獲得訊息來進行動作。

00:09:47.260 --> 00:09:49.260
最後，

00:09:49.260 --> 00:09:51.260
我們堅持機器人必須無法預知

00:09:51.260 --> 00:09:53.260
鄰近機器人會是誰。

00:09:53.260 --> 00:09:56.260
也就是匿名的方式。

00:09:56.260 --> 00:09:58.260
接下來我將要給大家看

00:09:58.260 --> 00:10:00.260
一段影片

00:10:00.260 --> 00:10:03.260
關於20個這些小機器人

00:10:03.260 --> 00:10:05.260
以特定隊形進行飛行。

00:10:05.260 --> 00:10:08.260
它們正在偵測鄰近機器人的位置。

00:10:08.260 --> 00:10:10.260
它們正在保持著這個隊形。

00:10:10.260 --> 00:10:12.260
這些隊形可以改變。

00:10:12.260 --> 00:10:14.260
可以是平面的隊形，

00:10:14.260 --> 00:10:16.260
也可以是三維空間的隊形。

00:10:16.260 --> 00:10:18.260
如你所見的，

00:10:18.260 --> 00:10:21.260
它們從三維空間的隊形變換成平面的隊形。

00:10:21.260 --> 00:10:23.260
在穿越障礙物時，

00:10:23.260 --> 00:10:27.260
它們可以在飛行中調整隊形。

00:10:27.260 --> 00:10:30.260
這些機器人移動時真的靠得很近。

00:10:30.260 --> 00:10:32.260
在這個 8 字飛行隊形中，

00:10:32.260 --> 00:10:34.260
它們的距離只有幾吋而已。

00:10:34.260 --> 00:10:37.260
儘管在這些螺旋槳葉片之間

00:10:37.260 --> 00:10:39.260
有著空氣動力的交互影響，

00:10:39.260 --> 00:10:41.260
它們仍然能維持穩定的飛行。

00:10:41.260 --> 00:10:48.260
(掌聲)

00:10:48.260 --> 00:10:50.260
一旦你知道要怎麼進行特定飛行隊形，

00:10:50.260 --> 00:10:52.260
你就能準確的協力拿起物體。

00:10:52.260 --> 00:10:54.260
而這是要告訴大家

00:10:54.260 --> 00:10:57.260
藉由將機器人組合成小組後，

00:10:57.260 --> 00:10:59.260
我們可以將機器人們的力量

00:10:59.260 --> 00:11:01.260
放大兩倍、三倍、四倍，就像是你將看到的這樣。

00:11:01.260 --> 00:11:04.260
但這樣做有一個缺點，

00:11:04.260 --> 00:11:06.260
當你將尺寸放大以後 --

00:11:06.260 --> 00:11:08.260
如果你有很多這些機器人載運同一個東西，

00:11:08.260 --> 00:11:11.260
你一定會有效地增加慣性，

00:11:11.260 --> 00:11:14.260
於是你將會付出代價，它們會失去靈巧性。

00:11:14.260 --> 00:11:17.260
但你可以相對獲得載運負重能力。

00:11:17.260 --> 00:11:19.260
另一項我想給大家看的運用 --

00:11:19.260 --> 00:11:21.260
這也是在我們的實驗室裡進行的。

00:11:21.260 --> 00:11:23.260
這是由 Quentin Lindsey 完成的，他是一位研究生。

00:11:23.260 --> 00:11:26.260
他的演算法告訴這些機器人們

00:11:26.260 --> 00:11:28.260
如何能夠自主性的

00:11:28.260 --> 00:11:30.260
將綑狀的材料

00:11:30.260 --> 00:11:33.260
建造成立體建築。

00:11:33.260 --> 00:11:35.260
他的演算法告訴機器人

00:11:35.260 --> 00:11:37.260
該拿起哪一個部份，

00:11:37.260 --> 00:11:39.260
以及什麼時候該把它放在哪裡。

00:11:39.260 --> 00:11:41.260
你可以在這短片中看到 --

00:11:41.260 --> 00:11:43.260
這是以 10 倍、14 倍速播放 --

00:11:43.260 --> 00:11:46.260
你可以看見這些機器人們建造了三種不同建築。

00:11:46.260 --> 00:11:48.260
再次提醒，一切都是自主性進行的，

00:11:48.260 --> 00:11:50.260
而 Quentin 所做的是

00:11:50.260 --> 00:11:52.260
給這些機器人一張藍圖

00:11:52.260 --> 00:11:56.260
記載著他想要的建築設計。

00:11:56.260 --> 00:11:59.260
你所看見的這些實驗，

00:11:59.260 --> 00:12:01.260
這些展示，

00:12:01.260 --> 00:12:04.260
都使用了動作擷取系統。

00:12:04.260 --> 00:12:06.260
如果離開了實驗室，

00:12:06.260 --> 00:12:09.260
走進真實世界會變成怎麼樣呢？

00:12:09.260 --> 00:12:12.260
如果沒有 GPS 會怎樣呢？

00:12:12.260 --> 00:12:14.260
這個機器人

00:12:14.260 --> 00:12:16.260
裝置了一具攝影機，

00:12:16.260 --> 00:12:19.260
一具雷射H搜尋器，雷射掃描器。

00:12:19.260 --> 00:12:21.260
它使用這些感應器

00:12:21.260 --> 00:12:23.260
來製作一張周圍的地圖。

00:12:23.260 --> 00:12:26.260
這地圖然有著一些環境特徵 --

00:12:26.260 --> 00:12:28.260
例如大門、窗戶、

00:12:28.260 --> 00:12:30.260
人、家具 --

00:12:30.260 --> 00:12:32.260
接著它會辨識出相對於這些環境特徵

00:12:32.260 --> 00:12:34.260
它所處的位置。

00:12:34.260 --> 00:12:36.260
這裡並沒有整體座標系統。

00:12:36.260 --> 00:12:39.260
座標系統是機器人自身定義出來的，

00:12:39.260 --> 00:12:42.260
藉由它所在的位置以及它所看到的東西。

00:12:42.260 --> 00:12:45.260
接著它對這些環境特徵進行探索。

00:12:45.260 --> 00:12:47.260
我想給大家看一段影片，

00:12:47.260 --> 00:12:49.260
關於 Frank Shen 以及 Nathan Michael 教授

00:12:49.260 --> 00:12:51.260
所開發出來的演算法，

00:12:51.260 --> 00:12:55.260
這個機器人第一次進入一個建築物，

00:12:55.260 --> 00:12:58.260
然後在飛行中製作了這個地圖。

00:12:58.260 --> 00:13:01.260
於是機器人知道環境特徵是什麼東西。

00:13:01.260 --> 00:13:03.260
它製作出地圖。

00:13:03.260 --> 00:13:05.260
它知道自己相對於環境特徵的位置，

00:13:05.260 --> 00:13:07.260
然後每秒100次的速度

00:13:07.260 --> 00:13:09.260
估算出自己的位置，

00:13:09.260 --> 00:13:11.260
讓我們可以利用

00:13:11.260 --> 00:13:13.260
剛剛說過的控制演算法。

00:13:13.260 --> 00:13:15.260
事實上這個機器人正被

00:13:15.260 --> 00:13:17.260
Frank 以遠端遙控的方式下指令。

00:13:17.260 --> 00:13:19.260
但這個機器人也能自行判斷

00:13:19.260 --> 00:13:21.260
它應該往哪裡走。

00:13:21.260 --> 00:13:23.260
假設我把它送進一個建築物，

00:13:23.260 --> 00:13:25.260
而我完全不知道這個建築物的樣子，

00:13:25.260 --> 00:13:27.260
我可以命令機器人進入，

00:13:27.260 --> 00:13:29.260
製作出一張地圖，

00:13:29.260 --> 00:13:32.260
然後回來告訴我建築物的樣子。

00:13:32.260 --> 00:13:35.260
所以機器人並不只是解決

00:13:35.260 --> 00:13:38.260
如何從地圖上的A點到B點這個問題，

00:13:38.260 --> 00:13:40.260
它甚至知道

00:13:40.260 --> 00:13:42.260
每一次的最佳B點是哪個位置。

00:13:42.260 --> 00:13:45.260
於是它知道該往哪裡去

00:13:45.260 --> 00:13:47.260
以找出還沒有訊息的位置。

00:13:47.260 --> 00:13:50.260
這就是它如何把地圖裝滿的方法。

00:13:50.260 --> 00:13:52.260
最後，

00:13:52.260 --> 00:13:54.260
我想再給大家看一樣應用。

00:13:54.260 --> 00:13:57.260
這個技術有許多運用方式。

00:13:57.260 --> 00:13:59.260
我是一個教授，我們對教育充滿熱情。

00:13:59.260 --> 00:14:01.260
這種機器人可以改變

00:14:01.260 --> 00:14:03.260
我們進行12年國教的方式。

00:14:03.260 --> 00:14:05.260
我們身在南加州，

00:14:05.260 --> 00:14:07.260
很靠近洛杉磯，

00:14:07.260 --> 00:14:09.260
所以我想用關於娛樂的例子

00:14:09.260 --> 00:14:11.260
來作為最後的結尾。

00:14:11.260 --> 00:14:13.260
我想用一段音樂影片來作為結尾。

00:14:13.260 --> 00:14:16.260
我要為大家介紹

00:14:16.260 --> 00:14:18.260
這個影片的作者，Alex 和 Daniel。

00:14:18.260 --> 00:14:25.260
(掌聲)

00:14:25.260 --> 00:14:27.260
在我播放影片之前，

00:14:27.260 --> 00:14:30.260
我想告訴大家他們在接到 Chris 電話後的三天內

00:14:30.260 --> 00:14:32.260
就將這段影片製作完了。

00:14:32.260 --> 00:14:34.260
影片中演奏的機器人

00:14:34.260 --> 00:14:36.260
都是完全自主性的進行。

00:14:36.260 --> 00:14:39.260
你可以看見 9 個機器人們演奏著 6 種不同的樂器。

00:14:39.260 --> 00:14:43.260
當然，這是為了 TED 2012 特別製作的。

00:14:43.260 --> 00:14:46.260
讓我們一起來欣賞。

00:15:19.260 --> 00:15:29.260
(音樂聲)

00:16:23.260 --> 00:16:40.260
(掌聲)

