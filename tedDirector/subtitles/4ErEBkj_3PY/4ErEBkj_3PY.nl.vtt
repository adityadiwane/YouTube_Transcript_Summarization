WEBVTT
Kind: captions
Language: nl

00:00:00.000 --> 00:00:07.000
Vertaald door: Els De Keyser
Nagekeken door: Christel Foncke

00:00:20.260 --> 00:00:22.260
Goedemorgen.

00:00:22.260 --> 00:00:24.260
Ik kom hier vandaag spreken

00:00:24.260 --> 00:00:27.260
over autonome, vliegende strandballen.

00:00:27.260 --> 00:00:31.260
Nee, over wendbare luchtrobots zoals deze.

00:00:31.260 --> 00:00:34.260
Ik zou jullie wat willen vertellen over de uitdagingen bij het bouwen ervan

00:00:34.260 --> 00:00:36.260
en over de geweldige toepassingsmogelijkheden

00:00:36.260 --> 00:00:38.260
van deze technologie.

00:00:38.260 --> 00:00:40.260
Deze robots

00:00:40.260 --> 00:00:43.260
zijn verwant met onbemande vliegtuigen.

00:00:43.260 --> 00:00:46.260
De tuigen die je hier ziet, zijn groot.

00:00:46.260 --> 00:00:48.260
Ze wegen duizenden kilo,

00:00:48.260 --> 00:00:50.260
zijn allerminst wendbaar

00:00:50.260 --> 00:00:52.260
en zijn ook niet autonoom.

00:00:52.260 --> 00:00:54.260
Vele van deze voertuigen

00:00:54.260 --> 00:00:56.260
worden bestuurd door bemanningen,

00:00:56.260 --> 00:00:59.260
vaak meerdere piloten,

00:00:59.260 --> 00:01:01.260
die sensoren bedienen

00:01:01.260 --> 00:01:03.260
en de missie coördineren.

00:01:03.260 --> 00:01:05.260
Wij willen dit soort van robots ontwikkelen --

00:01:05.260 --> 00:01:07.260
hier zijn nog twee afbeeldingen --

00:01:07.260 --> 00:01:10.260
deze kan je zo in de winkel kopen.

00:01:10.260 --> 00:01:13.260
Dit zijn helikopters met vier rotoren.

00:01:13.260 --> 00:01:17.260
Ze zijn ongeveer een meter groot

00:01:17.260 --> 00:01:19.260
en wegen een paar kilo.

00:01:19.260 --> 00:01:22.260
We rusten ze uit met sensoren en processoren.

00:01:22.260 --> 00:01:24.260
Ze kunnen binnenshuis vliegen

00:01:24.260 --> 00:01:26.260
zonder gps.

00:01:26.260 --> 00:01:28.260
De robot die ik in de hand houd,

00:01:28.260 --> 00:01:30.260
is deze.

00:01:30.260 --> 00:01:33.260
Hij is gemaakt door twee studenten,

00:01:33.260 --> 00:01:35.260
Alex en Daniel.

00:01:35.260 --> 00:01:37.260
Dit weegt iets meer

00:01:37.260 --> 00:01:39.260
dan vijf gram.

00:01:39.260 --> 00:01:41.260
Het verbruikt ongeveer 15 watt.

00:01:41.260 --> 00:01:43.260
Zoals je ziet,

00:01:43.260 --> 00:01:45.260
heeft het een diameter van ongeveer 20 cm.

00:01:45.260 --> 00:01:48.260
Laat me jullie een snelcursus geven

00:01:48.260 --> 00:01:50.260
in de werking van deze robots.

00:01:50.260 --> 00:01:52.260
Hij heeft vier rotoren.

00:01:52.260 --> 00:01:54.260
Als je die met dezelfde snelheid laat draaien,

00:01:54.260 --> 00:01:56.260
dan zweeft de robot.

00:01:56.260 --> 00:01:59.260
Als je de snelheid van alle rotoren verhoogt,

00:01:59.260 --> 00:02:02.260
vliegt hij omhoog en versnelt hij.

00:02:02.260 --> 00:02:04.260
Als de robot gekanteld zou zijn,

00:02:04.260 --> 00:02:06.260
horizontaal gekanteld,

00:02:06.260 --> 00:02:09.260
dan zou hij in deze richting versnellen.

00:02:09.260 --> 00:02:12.260
Om de robot te doen kantelen, zijn er twee methodes.

00:02:12.260 --> 00:02:14.260
In deze afbeelding

00:02:14.260 --> 00:02:16.260
zie je dat rotor 4 sneller draait

00:02:16.260 --> 00:02:18.260
en rotor 2 trager.

00:02:18.260 --> 00:02:20.260
Als dat gebeurt,

00:02:20.260 --> 00:02:23.260
gaat de robot om de langsas rollen.

00:02:23.260 --> 00:02:25.260
Omgekeerd,

00:02:25.260 --> 00:02:28.260
als je de snelheid van rotor drie verhoogt

00:02:28.260 --> 00:02:30.260
en die van rotor één verlaagt,

00:02:30.260 --> 00:02:33.260
dan stampt de robot om de dwars-as.

00:02:33.260 --> 00:02:35.260
Tenslotte,

00:02:35.260 --> 00:02:37.260
als je tegenovergestelde paren rotoren

00:02:37.260 --> 00:02:39.260
sneller doet draaien dan het andere paar,

00:02:39.260 --> 00:02:41.260
dan giert de robot om de top-as.

00:02:41.260 --> 00:02:43.260
Een processor in de robot

00:02:43.260 --> 00:02:46.260
bekijkt welke bewegingen moeten worden uitgevoerd

00:02:46.260 --> 00:02:48.260
en combineert deze bewegingen.

00:02:48.260 --> 00:02:51.260
Hij vist uit welke bevelen naar de motoren moeten gaan,

00:02:51.260 --> 00:02:53.260
en dat 600 keer per seconde.

00:02:53.260 --> 00:02:55.260
Zo werkt dit ding.

00:02:55.260 --> 00:02:57.260
Eén van de voordelen van dit ontwerp

00:02:57.260 --> 00:02:59.260
is dat als je alles kleiner maakt,

00:02:59.260 --> 00:03:02.260
de robot van nature wendbaar wordt.

00:03:02.260 --> 00:03:04.260
Hier is R

00:03:04.260 --> 00:03:06.260
de gebruikelijke lengte van de robot.

00:03:06.260 --> 00:03:09.260
Het is de helft van de diameter.

00:03:09.260 --> 00:03:12.260
Er zijn een hoop fysische parameters die wijzigen

00:03:12.260 --> 00:03:14.260
als je R kleiner maakt.

00:03:14.260 --> 00:03:16.260
De belangrijkste

00:03:16.260 --> 00:03:18.260
is de inertie of de weerstand tegen beweging.

00:03:18.260 --> 00:03:20.260
Het blijkt

00:03:20.260 --> 00:03:23.260
dat de inertie, die de hoekbeweging bepaalt,

00:03:23.260 --> 00:03:26.260
met R tot de vijfde macht afneemt.

00:03:26.260 --> 00:03:28.260
Hoe kleiner je R maakt,

00:03:28.260 --> 00:03:31.260
hoe dramatischer de inertie afneemt.

00:03:31.260 --> 00:03:34.260
Het resultaat is dat de hoekversnelling,

00:03:34.260 --> 00:03:36.260
hier weergegeven met de Griekse letter alpha,

00:03:36.260 --> 00:03:38.260
1 over R wordt.

00:03:38.260 --> 00:03:40.260
Ze is omgekeerd evenredig met R.

00:03:40.260 --> 00:03:43.260
Hoe kleiner je het maakt, hoe sneller je kan draaien.

00:03:43.260 --> 00:03:45.260
Dat moet blijken uit deze video's.

00:03:45.260 --> 00:03:48.260
Rechtsonder zie je een robot

00:03:48.260 --> 00:03:50.260
die 360° draait

00:03:50.260 --> 00:03:52.260
in minder dan een halve seconde.

00:03:52.260 --> 00:03:55.260
Meerdere omwentelingen, een beetje meer tijd.

00:03:55.260 --> 00:03:57.260
De processen aan boord

00:03:57.260 --> 00:03:59.260
krijgen feedback van versnellingsmeters

00:03:59.260 --> 00:04:01.260
en gyroscopen aan boord.

00:04:01.260 --> 00:04:03.260
Ze berekenen zoals gezegd

00:04:03.260 --> 00:04:05.260
600 keer per seconde de bevelen

00:04:05.260 --> 00:04:07.260
om deze robot te stabiliseren.

00:04:07.260 --> 00:04:10.260
Links zie je Daniël die zijn robot omhoog gooit.

00:04:10.260 --> 00:04:12.260
Dit toont hoe robuust de controle is.

00:04:12.260 --> 00:04:14.260
Hoe je het ook gooit,

00:04:14.260 --> 00:04:18.260
de robot herstelt zich en keert terug.

00:04:18.260 --> 00:04:20.260
Waarom bouwen we dit soort robots?

00:04:20.260 --> 00:04:23.260
Er zijn vele soorten toepassingen.

00:04:23.260 --> 00:04:26.260
Je kan ze in dit soort gebouwen binnensturen

00:04:26.260 --> 00:04:29.260
als eerstelijnsdienst op zoek naar inbrekers,

00:04:29.260 --> 00:04:32.260
op zoek naar biochemische lekken,

00:04:32.260 --> 00:04:34.260
of gaslekken.

00:04:34.260 --> 00:04:36.260
Je kan ze ook gebruiken

00:04:36.260 --> 00:04:38.260
voor bouwtoepassingen.

00:04:38.260 --> 00:04:42.260
Dit zijn robots die balken dragen, zuilen,

00:04:42.260 --> 00:04:45.260
en die kubusachtige structuren bouwen.

00:04:45.260 --> 00:04:48.260
Ik vertel jullie er wat meer over.

00:04:48.260 --> 00:04:51.260
De robots kunnen worden gebruikt om lading te vervoeren.

00:04:51.260 --> 00:04:54.260
Eén van de problemen met deze kleine robots

00:04:54.260 --> 00:04:56.260
is hun vermogen om nuttige lading te vervoeren.

00:04:56.260 --> 00:04:58.260
Je hebt wellicht meerdere robots nodig

00:04:58.260 --> 00:05:00.260
die nuttige lading vervoeren.

00:05:00.260 --> 00:05:02.260
Dit is een beeld van een recent experiment --

00:05:02.260 --> 00:05:04.260
intussen al niet meer zo recent --

00:05:04.260 --> 00:05:07.260
in Sendai, kort na de aardbeving.

00:05:07.260 --> 00:05:10.260
Robots als deze kunnen een ingestort gebouw ingestuurd worden

00:05:10.260 --> 00:05:12.260
om de schade in te schatten na natuurrampen.

00:05:12.260 --> 00:05:15.260
Ze kunnen reactorgebouwen worden ingestuurd

00:05:15.260 --> 00:05:18.260
om stralingsniveaus in kaart te brengen.

00:05:19.260 --> 00:05:21.260
Een fundamenteel probleem

00:05:21.260 --> 00:05:24.260
dat robots moeten oplossen om autonoom te zijn,

00:05:24.260 --> 00:05:26.260
is uitzoeken

00:05:26.260 --> 00:05:28.260
hoe ze van punt A naar punt B geraken.

00:05:28.260 --> 00:05:30.260
Dat wordt een uitdaging

00:05:30.260 --> 00:05:33.260
omdat de dynamica van deze robot ingewikkeld is.

00:05:33.260 --> 00:05:35.260
Ze bewegen zich in een 12-dimensionale ruimte.

00:05:35.260 --> 00:05:37.260
Daarom gebruiken we een trucje.

00:05:37.260 --> 00:05:40.260
We nemen deze 12-dimensionale gekromde ruimte

00:05:40.260 --> 00:05:42.260
en vormen ze om

00:05:42.260 --> 00:05:44.260
tot een vlakke vierdimensionale ruimte.

00:05:44.260 --> 00:05:46.260
Die vierdimensionale ruimte

00:05:46.260 --> 00:05:49.260
bestaat uit X, Y, Z en de gierhoek.

00:05:49.260 --> 00:05:51.260
De robot doet het volgende:

00:05:51.260 --> 00:05:55.260
hij plant wat wij een minimale 'snap'-baan noemen.

00:05:55.260 --> 00:05:57.260
Kleine fysicaherhaling:

00:05:57.260 --> 00:05:59.260
je hebt positie, snelheid is de afgeleide,

00:05:59.260 --> 00:06:01.260
dan versnelling,

00:06:01.260 --> 00:06:03.260
dan 'jerk'

00:06:03.260 --> 00:06:05.260
en dan 'snap'.

00:06:05.260 --> 00:06:08.260
Deze robot minimaliseert 'snap'.

00:06:08.260 --> 00:06:10.260
Waar dat toe leidt,

00:06:10.260 --> 00:06:12.260
is een vloeiende en gracieuze beweging.

00:06:12.260 --> 00:06:15.260
Dat doet het door obstakels te vermijden.

00:06:15.260 --> 00:06:18.260
Deze minimale 'snap'-banen in een vlakke ruimte

00:06:18.260 --> 00:06:20.260
worden vervolgens opnieuw omgezet

00:06:20.260 --> 00:06:22.260
naar een ingewikkelde 12-dimensionale ruimte.

00:06:22.260 --> 00:06:24.260
De robot doet dat

00:06:24.260 --> 00:06:26.260
om te controleren en vervolgens uit te voeren.

00:06:26.260 --> 00:06:28.260
Laat me jullie een paar voorbeelden tonen

00:06:28.260 --> 00:06:30.260
van hoe deze minimale snap-banen eruit zien.

00:06:30.260 --> 00:06:32.260
In de eerste video

00:06:32.260 --> 00:06:34.260
zie je de robot van punt A naar punt B gaan

00:06:34.260 --> 00:06:36.260
via een punt er tussenin.

00:06:42.260 --> 00:06:44.260
De robot is in staat

00:06:44.260 --> 00:06:46.260
om elke kromme baan uit te voeren.

00:06:46.260 --> 00:06:48.260
Dit zijn cirkelbanen

00:06:48.260 --> 00:06:51.260
waarbij de robot ongeveer twee G te verwerken krijgt.

00:06:52.260 --> 00:06:56.260
Dit zijn bewegingsregistratiecamera's op de bovenkant

00:06:56.260 --> 00:06:59.260
die de robot 100 keer per seconde vertellen waar hij is.

00:06:59.260 --> 00:07:02.260
Ze vertellen hem ook waar de obstakels zijn.

00:07:02.260 --> 00:07:04.260
De obstakels kunnen bewegen.

00:07:04.260 --> 00:07:07.260
Hier zie je Daniel een hoepel opgooien.

00:07:07.260 --> 00:07:09.260
De robot berekent de positie van de hoepel

00:07:09.260 --> 00:07:13.260
en zoekt uit hoe hij er het beste kan doorvliegen.

00:07:13.260 --> 00:07:15.260
Als academicus

00:07:15.260 --> 00:07:18.260
oefenen we altijd om door hoepels te springen om geld in te zamelen voor ons lab.

00:07:18.260 --> 00:07:21.260
Onze robots doen dat voor ons.

00:07:21.260 --> 00:07:27.260
(Applaus)

00:07:27.260 --> 00:07:29.260
Nog iets dat deze robot kan doen,

00:07:29.260 --> 00:07:32.260
is dat hij delen van een baan onthoudt

00:07:32.260 --> 00:07:34.260
die hij leert of die voorgeprogrammeerd zijn.

00:07:34.260 --> 00:07:36.260
Hier zie je hoe de robot

00:07:36.260 --> 00:07:38.260
een beweging combineert

00:07:38.260 --> 00:07:40.260
die momentum opbouwt,

00:07:40.260 --> 00:07:43.260
waarna hij zijn oriëntatie wijzigt en zich herstelt.

00:07:43.260 --> 00:07:46.260
Dat moet hij doen omdat het gat in het venster

00:07:46.260 --> 00:07:50.260
maar een klein beetje breder is dan de breedte van de robot.

00:07:50.260 --> 00:07:53.260
Zoals een duiker op een duikplank staat

00:07:53.260 --> 00:07:55.260
en eraf springt om momentum te krijgen

00:07:55.260 --> 00:07:58.260
en dan een pirouette uitvoert, een 2 1/2 salto,

00:07:58.260 --> 00:08:00.260
waarna hij zich gracieus herstelt,

00:08:00.260 --> 00:08:02.260
zo doet deze robot hetzelfde.

00:08:02.260 --> 00:08:05.260
Hij kan stukjes en beetjes van banen combineren

00:08:05.260 --> 00:08:09.260
om moeilijke taken uit te voeren.

00:08:09.260 --> 00:08:11.260
Ik verander van versnelling.

00:08:11.260 --> 00:08:14.260
Eén van de nadelen van deze kleine robots is hun omvang.

00:08:14.260 --> 00:08:16.260
Ik zei al

00:08:16.260 --> 00:08:18.260
dat we heel veel robots nodig hebben

00:08:18.260 --> 00:08:21.260
om de beperkingen van de afmetingen te overwinnen.

00:08:21.260 --> 00:08:23.260
Eén moeilijkheid is:

00:08:23.260 --> 00:08:26.260
hoe coördineer je een hoop robots?

00:08:26.260 --> 00:08:28.260
Hier keken we naar de natuur.

00:08:28.260 --> 00:08:30.260
Ik wil jullie een clip tonen

00:08:30.260 --> 00:08:32.260
van aphaenogaster-woestijnmieren

00:08:32.260 --> 00:08:35.260
die een object dragen in het lab van Professor Stephen Pratt.

00:08:35.260 --> 00:08:37.260
Dit is een stuk vijg.

00:08:37.260 --> 00:08:39.260
Bedek om het even welk object met een laag vijgensap

00:08:39.260 --> 00:08:42.260
en de mieren zullen het naar hun nest slepen.

00:08:42.260 --> 00:08:45.260
Deze mieren hebben geen centrale coördinator.

00:08:45.260 --> 00:08:47.260
Ze worden hun buren gewaar.

00:08:47.260 --> 00:08:49.260
Er is geen expliciete communicatie.

00:08:49.260 --> 00:08:51.260
Maar omdat ze hun buren gewaarworden,

00:08:51.260 --> 00:08:53.260
en omdat ze het object gewaarworden,

00:08:53.260 --> 00:08:56.260
is er impliciete coördinatie in de groep.

00:08:56.260 --> 00:08:58.260
Dit is het soort coördinatie

00:08:58.260 --> 00:09:01.260
dat we wensen voor onze robots.

00:09:01.260 --> 00:09:03.260
We hebben een robot

00:09:03.260 --> 00:09:05.260
die omgeven is door buren --

00:09:05.260 --> 00:09:07.260
laten we robot I en robot J in de gaten houden.

00:09:07.260 --> 00:09:09.260
We willen dat de robots

00:09:09.260 --> 00:09:12.260
de afstand van elkaar in de gaten houden

00:09:12.260 --> 00:09:14.260
terwijl ze in formatie vliegen.

00:09:14.260 --> 00:09:16.260
Je moet ervoor zorgen

00:09:16.260 --> 00:09:18.260
dat deze afstand binnen aanvaardbare perken blijft.

00:09:18.260 --> 00:09:21.260
De robots monitoren de fout

00:09:21.260 --> 00:09:23.260
en berekenen controlecommando's,

00:09:23.260 --> 00:09:25.260
100 keer per seconde,

00:09:25.260 --> 00:09:28.260
wat dan wordt omgezet in bewegingscommando's, 600 keer per seconde.

00:09:28.260 --> 00:09:30.260
Dit moet ook gebeuren

00:09:30.260 --> 00:09:32.260
op gedecentraliseerde wijze.

00:09:32.260 --> 00:09:34.260
Als je heel veel robots hebt,

00:09:34.260 --> 00:09:38.260
kan je al deze informatie niet snel genoeg centraal coördineren

00:09:38.260 --> 00:09:41.260
om de robots in hun taak te doen slagen.

00:09:41.260 --> 00:09:43.260
De robots moeten hun actie

00:09:43.260 --> 00:09:45.260
louter op lokale informatie baseren,

00:09:45.260 --> 00:09:47.260
op wat ze vanwege hun buren gewaarworden.

00:09:47.260 --> 00:09:49.260
Tenslotte willen we

00:09:49.260 --> 00:09:51.260
dat de robots niet weten

00:09:51.260 --> 00:09:53.260
wie hun buren zijn.

00:09:53.260 --> 00:09:56.260
Dat noemen we anonimiteit.

00:09:56.260 --> 00:09:58.260
Ik toon jullie zo meteen

00:09:58.260 --> 00:10:00.260
een video

00:10:00.260 --> 00:10:03.260
van 20 van deze kleine robots

00:10:03.260 --> 00:10:05.260
die in formatie vliegen.

00:10:05.260 --> 00:10:08.260
Ze monitoren de positie van hun buren.

00:10:08.260 --> 00:10:10.260
Ze houden een formatie aan.

00:10:10.260 --> 00:10:12.260
De formaties kunnen wijzigen.

00:10:12.260 --> 00:10:14.260
Ze kunnen vlak zijn,

00:10:14.260 --> 00:10:16.260
of driedimensionaal.

00:10:16.260 --> 00:10:18.260
Hier zie je dat ze

00:10:18.260 --> 00:10:21.260
van een driedimensionale formatie naar een vlakke overgaan.

00:10:21.260 --> 00:10:23.260
Om door obstakels te vliegen,

00:10:23.260 --> 00:10:27.260
kunnen ze de formaties tijdens het vliegen aanpassen;

00:10:27.260 --> 00:10:30.260
Deze robots vliegen dicht tegen elkaar aan.

00:10:30.260 --> 00:10:32.260
Je ziet bij deze acht-vormige vlucht

00:10:32.260 --> 00:10:34.260
dat ze centimeters van elkaar vliegen.

00:10:34.260 --> 00:10:37.260
Ondanks de aërodynamische interactie

00:10:37.260 --> 00:10:39.260
van de schroefbladen,

00:10:39.260 --> 00:10:41.260
slagen ze erin om stabiel te vliegen.

00:10:41.260 --> 00:10:48.260
(Applaus)

00:10:48.260 --> 00:10:50.260
Zodra je weet hoe je in formatie vliegt,

00:10:50.260 --> 00:10:52.260
kan je samen objecten oppikken.

00:10:52.260 --> 00:10:54.260
Dit toont aan

00:10:54.260 --> 00:10:57.260
dat we dubbel, driedubbel, vier keer zoveel

00:10:57.260 --> 00:10:59.260
robotkracht kunnen krijgen

00:10:59.260 --> 00:11:01.260
door ze in team met hun buren te laten werken, zoals je hier ziet.

00:11:01.260 --> 00:11:04.260
Eén van de nadelen daarvan is

00:11:04.260 --> 00:11:06.260
dat als je de dingen opschaalt --

00:11:06.260 --> 00:11:08.260
als je veel robots hetzelfde ding laat dragen,

00:11:08.260 --> 00:11:11.260
je daardoor de inertie verhoogt

00:11:11.260 --> 00:11:14.260
en dus een prijs betaalt. Ze zijn niet zo wendbaar.

00:11:14.260 --> 00:11:17.260
Maar je nuttige lading stijgt wel.

00:11:17.260 --> 00:11:19.260
Ik wil jullie nog een toepassing tonen --

00:11:19.260 --> 00:11:21.260
dit is in ons lab.

00:11:21.260 --> 00:11:23.260
Dit werk is van de hand van student Quentin Lindsey.

00:11:23.260 --> 00:11:26.260
Zijn algoritme zegt deze robots

00:11:26.260 --> 00:11:28.260
hoe ze autonoom

00:11:28.260 --> 00:11:30.260
kubusstructuren moeten bouwen

00:11:30.260 --> 00:11:33.260
uit bundel-achtige elementen.

00:11:33.260 --> 00:11:35.260
Dit algoritme vertelt de robot

00:11:35.260 --> 00:11:37.260
welk deel ze moeten oppikken,

00:11:37.260 --> 00:11:39.260
wanneer, en waar ze het moeten neerzetten.

00:11:39.260 --> 00:11:41.260
In deze video zie je --

00:11:41.260 --> 00:11:43.260
het is 10 tot 14 keer versneld --

00:11:43.260 --> 00:11:46.260
je ziet hoe 3 verschillende structuren door deze robots worden gebouwd.

00:11:46.260 --> 00:11:48.260
Alles is autonoom,

00:11:48.260 --> 00:11:50.260
en het enige dat Quentin moet doen,

00:11:50.260 --> 00:11:52.260
is ze een blauwdruk geven

00:11:52.260 --> 00:11:56.260
van het ontwerp dat hij wil bouwen.

00:11:56.260 --> 00:11:59.260
Alle experimenten die je tot hiertoe hebt gezien,

00:11:59.260 --> 00:12:01.260
alle demonstraties

00:12:01.260 --> 00:12:04.260
zijn uitgevoerd met bewegingsregistratiesystemen.

00:12:04.260 --> 00:12:06.260
Wat gebeurt er als je je lab verlaat,

00:12:06.260 --> 00:12:09.260
en je naar buiten gaat, de echte wereld in?

00:12:09.260 --> 00:12:12.260
Wat als er geen gps is?

00:12:12.260 --> 00:12:14.260
Deze robot

00:12:14.260 --> 00:12:16.260
is uitgerust met een camera

00:12:16.260 --> 00:12:19.260
een een optische afstandsmeter, een laserscanner.

00:12:19.260 --> 00:12:21.260
Het gebruikt deze sensoren

00:12:21.260 --> 00:12:23.260
om een kaart van de omgeving op te stellen.

00:12:23.260 --> 00:12:26.260
Die kaart bestaat uit kenmerken --

00:12:26.260 --> 00:12:28.260
deuren, vensters,

00:12:28.260 --> 00:12:30.260
mensen, meubilair --

00:12:30.260 --> 00:12:32.260
en zoekt dan uit waar zijn positie is

00:12:32.260 --> 00:12:34.260
met betrekking tot die kenmerken.

00:12:34.260 --> 00:12:36.260
Er is geen algemeen coördinatensysteem.

00:12:36.260 --> 00:12:39.260
Het coördinatensysteem is gebaseerd op de robot,

00:12:39.260 --> 00:12:42.260
waar die is en waar hij naar kijkt.

00:12:42.260 --> 00:12:45.260
Hij navigeert op basis van die kenmerken.

00:12:45.260 --> 00:12:47.260
Ik toon jullie een filmpje

00:12:47.260 --> 00:12:49.260
van algoritmes die zijn ontworpen door Frank Shen

00:12:49.260 --> 00:12:51.260
en door professor Nathan Michael.

00:12:51.260 --> 00:12:55.260
Je ziet hoe deze robot een gebouw voor het eerst binnengaat

00:12:55.260 --> 00:12:58.260
en daarbij deze kaart maakt.

00:12:58.260 --> 00:13:01.260
De robot zoekt uit wat de kenmerken zijn.

00:13:01.260 --> 00:13:03.260
Hij stelt de kaart op.

00:13:03.260 --> 00:13:05.260
Hij zoekt uit wat zijn positie is op basis van de kenmerken

00:13:05.260 --> 00:13:07.260
en schat dan zijn positie in,

00:13:07.260 --> 00:13:09.260
100 keer per seconde,

00:13:09.260 --> 00:13:11.260
waarbij we de controle-algoritmes kunnen gebruiken

00:13:11.260 --> 00:13:13.260
die ik eerder heb beschreven.

00:13:13.260 --> 00:13:15.260
Deze robot wordt vanop afstand

00:13:15.260 --> 00:13:17.260
bestuurd door Frank.

00:13:17.260 --> 00:13:19.260
De robot kan ook op zijn eentje

00:13:19.260 --> 00:13:21.260
uitzoeken waar hij heen moet.

00:13:21.260 --> 00:13:23.260
Als ik dit een gebouw instuur

00:13:23.260 --> 00:13:25.260
en geen idee heb hoe het eruit ziet,

00:13:25.260 --> 00:13:27.260
kan ik deze robot vragen om binnen te gaan,

00:13:27.260 --> 00:13:29.260
een kaart op te stellen

00:13:29.260 --> 00:13:32.260
en me dan te komen vertellen hoe het gebouw eruit ziet.

00:13:32.260 --> 00:13:35.260
De robot lost niet alleen het probleem op -

00:13:35.260 --> 00:13:38.260
hoe ga ik van punt A naar punt B op deze kaart -

00:13:38.260 --> 00:13:40.260
maar hij zoekt ook uit

00:13:40.260 --> 00:13:42.260
wat op elk moment het beste punt B is.

00:13:42.260 --> 00:13:45.260
Hij weet dus waar hij moet gaan

00:13:45.260 --> 00:13:47.260
om plaatsen te zoeken met minimale informatie.

00:13:47.260 --> 00:13:50.260
Zo stelt hij deze kaart op.

00:13:50.260 --> 00:13:52.260
Ik wil besluiten

00:13:52.260 --> 00:13:54.260
met nog een laatste toepassing.

00:13:54.260 --> 00:13:57.260
Er zijn vele toepassingen van deze technologie.

00:13:57.260 --> 00:13:59.260
Ik ben professor. Mijn passie is onderwijs.

00:13:59.260 --> 00:14:01.260
Robots als deze kunnen een revolutie betekenen

00:14:01.260 --> 00:14:03.260
voor het basis- en middelbaar onderwijs.

00:14:03.260 --> 00:14:05.260
Maar we zitten in Zuid-Californië,

00:14:05.260 --> 00:14:07.260
vlakbij Los Angeles,

00:14:07.260 --> 00:14:09.260
dus moet ik afsluiten

00:14:09.260 --> 00:14:11.260
met de klemtoon op amusement.

00:14:11.260 --> 00:14:13.260
Ik wil afsluiten met een muziekvideo.

00:14:13.260 --> 00:14:16.260
Laat me de auteurs voorstellen, Alex en Daniel,

00:14:16.260 --> 00:14:18.260
die deze video hebben gemaakt.

00:14:18.260 --> 00:14:25.260
(Applaus)

00:14:25.260 --> 00:14:27.260
Voor ik de video afspeel,

00:14:27.260 --> 00:14:30.260
vertel ik jullie graag dat ze hem de afgelopen 3 dagen hebben gemaakt,

00:14:30.260 --> 00:14:32.260
na een telefoontje van Chris.

00:14:32.260 --> 00:14:34.260
De robots die je ziet in de video

00:14:34.260 --> 00:14:36.260
zijn volledig autonoom.

00:14:36.260 --> 00:14:39.260
Je ziet negen robots die zes verschillende instrumenten spelen.

00:14:39.260 --> 00:14:43.260
Dit werd exclusief voor TED 2012 gemaakt.

00:14:43.260 --> 00:14:46.260
Laten we kijken.

00:15:19.260 --> 00:15:29.260
(Muziek)

00:16:23.260 --> 00:16:40.260
(Applaus)

