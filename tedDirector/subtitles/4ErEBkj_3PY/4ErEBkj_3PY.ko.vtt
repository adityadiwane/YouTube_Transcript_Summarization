WEBVTT
Kind: captions
Language: ko

00:00:00.000 --> 00:00:07.000
번역: Woo Hwang
검토: Bianca Lee

00:00:20.260 --> 00:00:22.260
안녕하세요.

00:00:22.260 --> 00:00:24.260
저는 오늘 자율적으로 날아다니는

00:00:24.260 --> 00:00:27.260
비치볼에 대해서 말하려고 합니다.

00:00:27.260 --> 00:00:31.260
아닙니다, 이와같은 민첩한 비행 로봇들입니다.

00:00:31.260 --> 00:00:34.260
이런 기술을 적용 할 수 있는 몇가지 기막힌 방법들과

00:00:34.260 --> 00:00:36.260
이런 로봇들을 제작할 때 어려운점에 대해서

00:00:36.260 --> 00:00:38.260
말하려고 합니다.

00:00:38.260 --> 00:00:40.260
이 로봇들은

00:00:40.260 --> 00:00:43.260
무인 항공기와 관련이 있습니다.

00:00:43.260 --> 00:00:46.260
하지만 여러분이 보는 이 항공기들은 너무 크죠.

00:00:46.260 --> 00:00:48.260
수천 파운드에 달하는 무게이고,

00:00:48.260 --> 00:00:50.260
전혀 민첩하지 않습니다.

00:00:50.260 --> 00:00:52.260
자율적으로 움직이는 것도 아닙니다.

00:00:52.260 --> 00:00:54.260
사실 많은 이런 항공기들은

00:00:54.260 --> 00:00:56.260
다수의 조종사가 포함된

00:00:56.260 --> 00:00:59.260
운항 승무원들과

00:00:59.260 --> 00:01:01.260
작동 센서들, 그리고 관제 시스템들에 의해

00:01:01.260 --> 00:01:03.260
운항되어 집니다.

00:01:03.260 --> 00:01:05.260
저희는 이런 로봇들을 발전시키는 데 관심이 있는데요

00:01:05.260 --> 00:01:07.260
-- 여기 두개 사진이 있지요 --

00:01:07.260 --> 00:01:10.260
여러분이 흔히 구입 할 수 있는 로봇들입니다.

00:01:10.260 --> 00:01:13.260
이 로봇들은 4개의 날개가 달린 헬리콥터이며,

00:01:13.260 --> 00:01:17.260
대략 1미터 정도 크기에

00:01:17.260 --> 00:01:19.260
몇 파운드정도 무게가 나갑니다.

00:01:19.260 --> 00:01:22.260
그래서 센서들과 프로세서 등을 재장착하여

00:01:22.260 --> 00:01:24.260
GPS 없이도

00:01:24.260 --> 00:01:26.260
실내에서 날 수 있도록 했습니다.

00:01:26.260 --> 00:01:28.260
제손에 들고 있는 로봇이

00:01:28.260 --> 00:01:30.260
바로 그 로봇입니다.

00:01:30.260 --> 00:01:33.260
이 로봇은 두 학생인,

00:01:33.260 --> 00:01:35.260
알렉스와 다니엘이 만들었죠.

00:01:35.260 --> 00:01:37.260
이 로봇은 약 0.1파운드(약 45g)

00:01:37.260 --> 00:01:39.260
보다 조금 더 나갑니다.

00:01:39.260 --> 00:01:41.260
약 15와트의 전력을 소모하구요.

00:01:41.260 --> 00:01:43.260
그리고 보시다시피,

00:01:43.260 --> 00:01:45.260
지름이 약 8인치(약 20cm) 정도 됩니다.

00:01:45.260 --> 00:01:48.260
이 로봇들이 어떻게 작동되는지

00:01:48.260 --> 00:01:50.260
간단하게 설명을 드리겠습니다.

00:01:50.260 --> 00:01:52.260
4개의 회전날개가 있습니다.

00:01:52.260 --> 00:01:54.260
같은 속도로 이 회전날개들 돌리면,

00:01:54.260 --> 00:01:56.260
로봇이 부양하게 되죠.

00:01:56.260 --> 00:01:59.260
이 각각의 회전날개의 속도를 올리면,

00:01:59.260 --> 00:02:02.260
로봇이 날아 오르게 되고, 속도를 올리게 됩니다.

00:02:02.260 --> 00:02:04.260
물론, 수평방향으로

00:02:04.260 --> 00:02:06.260
기울어지면,

00:02:06.260 --> 00:02:09.260
이쪽 방향으로 속도를 올리게 됩니다.

00:02:09.260 --> 00:02:12.260
몸체를 기울이기 위해서는 한가지 방법이 있는데요.

00:02:12.260 --> 00:02:14.260
이 그림을 보시면,

00:02:14.260 --> 00:02:16.260
네번째 회전날개가 더 빨리 회전하는걸 보실 수 있죠.

00:02:16.260 --> 00:02:18.260
그리고 두번째 회전날개는 더 천천히 돌고있구요.

00:02:18.260 --> 00:02:20.260
이런 상태가 되면

00:02:20.260 --> 00:02:23.260
이 로봇이 빙빙 돌게 되는거죠.

00:02:23.260 --> 00:02:25.260
다른 방향으로는,

00:02:25.260 --> 00:02:28.260
세번째 날개의 속도를 올리고,

00:02:28.260 --> 00:02:30.260
첫번째 날개의 속도를 줄이면,

00:02:30.260 --> 00:02:33.260
앞으로 고개를 숙이게 되죠.

00:02:33.260 --> 00:02:35.260
그리고 마지막으로,

00:02:35.260 --> 00:02:37.260
날개 한 쌍을 반대쪽보다

00:02:37.260 --> 00:02:39.260
더 빨리 돌리면,

00:02:39.260 --> 00:02:41.260
로봇은 수직축을 중심으로 한쪽으로 기울어집니다.

00:02:41.260 --> 00:02:43.260
보드에 탑재된 프로세서가

00:02:43.260 --> 00:02:46.260
어떤 동작이 실행 되어야 하는지를 관할하고,

00:02:46.260 --> 00:02:48.260
동작들을 조합해서,

00:02:48.260 --> 00:02:51.260
초당 600번 정도로 모터에

00:02:51.260 --> 00:02:53.260
어떤 명령을 내릴 것인지를 결정합니다.

00:02:53.260 --> 00:02:55.260
이것이 기본적으로 이 로봇이 작동되는 방식입니다.

00:02:55.260 --> 00:02:57.260
이런 로봇 설계의 장점들 중 한가지는

00:02:57.260 --> 00:02:59.260
로봇의 크기를 줄이면

00:02:59.260 --> 00:03:02.260
자연스럽게 민첩해지죠.

00:03:02.260 --> 00:03:04.260
여기 "R"이

00:03:04.260 --> 00:03:06.260
로봇의 길이를 표시합니다.

00:03:06.260 --> 00:03:09.260
지름의 반정도이죠.

00:03:09.260 --> 00:03:12.260
R을 줄여가면,

00:03:12.260 --> 00:03:14.260
많은 물리적 변수들이 변하게 됩니다.

00:03:14.260 --> 00:03:16.260
아주 중요한것 중 한가지는

00:03:16.260 --> 00:03:18.260
동작에 미치는 관성이나 저항력입니다.

00:03:18.260 --> 00:03:20.260
각운동을 좌우하는 관성은

00:03:20.260 --> 00:03:23.260
R의 1/5씩 늘어 난다고

00:03:23.260 --> 00:03:26.260
알려져있습니다.

00:03:26.260 --> 00:03:28.260
R의 크기를 더 작게하면 할 수록

00:03:28.260 --> 00:03:31.260
관성은 더욱더 급속히 감소합니다.

00:03:31.260 --> 00:03:34.260
결과적으로, 그리스 문자 "알파"로 쓰는

00:03:34.260 --> 00:03:36.260
각 가속도는 1/R로

00:03:36.260 --> 00:03:38.260
늘어납니다.

00:03:38.260 --> 00:03:40.260
이것은 R에 반비례하는거죠.

00:03:40.260 --> 00:03:43.260
더 작게 만들면 만들 수록 더 빨리 방향을 바꿀 수 있는 것입니다.

00:03:43.260 --> 00:03:45.260
이 비디오에서 더 명확하게 보여드리겠습니다.

00:03:45.260 --> 00:03:48.260
오른쪽 밑에 로봇을 보면,

00:03:48.260 --> 00:03:50.260
0.5초도 안되는 시간만에

00:03:50.260 --> 00:03:52.260
360도 뒤집기를 합니다.

00:03:52.260 --> 00:03:55.260
몇번 더 다중 뒤집기를 합니다.

00:03:55.260 --> 00:03:57.260
여기 프로세서들이

00:03:57.260 --> 00:03:59.260
가속계로부터 정보를 받고

00:03:59.260 --> 00:04:01.260
이전에 말한대로

00:04:01.260 --> 00:04:03.260
초당 600번 정도

00:04:03.260 --> 00:04:05.260
평행 회전자가 계산해서

00:04:05.260 --> 00:04:07.260
로봇이 평행을 유지하도록 합니다.

00:04:07.260 --> 00:04:10.260
왼쪽에, 다니엘이 로봇을 하늘로 날리는 모습을 볼 수 있습니다.

00:04:10.260 --> 00:04:12.260
제어가 얼마나 잘 되는지 보여주죠.

00:04:12.260 --> 00:04:14.260
어떻게 던지더라도,

00:04:14.260 --> 00:04:18.260
로봇은 복구하여 다니엘에게 돌아갑니다.

00:04:18.260 --> 00:04:20.260
그럼 왜 이런 로봇을 만들었을까요?

00:04:20.260 --> 00:04:23.260
이런 로봇은 많은 응용분야에 사용 될 수 있습니다.

00:04:23.260 --> 00:04:26.260
이처럼 침입자를 탐지하기 위해

00:04:26.260 --> 00:04:29.260
건물 내부로 보낼 수 도 있고,

00:04:29.260 --> 00:04:32.260
생화학 물질 유출이나

00:04:32.260 --> 00:04:34.260
가스 유출을 탐지하기 위해서 사용 될 수 도 있죠.

00:04:34.260 --> 00:04:36.260
건설과 같은 응용분야에서도

00:04:36.260 --> 00:04:38.260
사용 될 수 있습니다.

00:04:38.260 --> 00:04:42.260
빔을 운반하거나, 육면체의 구조물을

00:04:42.260 --> 00:04:45.260
나열하거나 조합 할 수 도 있습니다.

00:04:45.260 --> 00:04:48.260
이부분에 대해 좀더 이야기 해 보겠습니다.

00:04:48.260 --> 00:04:51.260
로봇은 화물 운송을 위해서 사용 될 수 있습니다.

00:04:51.260 --> 00:04:54.260
이런 작은 로봇들의 문제중 한가지는

00:04:54.260 --> 00:04:56.260
운반가능한 용량의 적재하중입니다.

00:04:56.260 --> 00:04:58.260
그래서 탑재량을 위해

00:04:58.260 --> 00:05:00.260
여러대의 로봇들을 사용 할 수 도 있겠죠.

00:05:00.260 --> 00:05:02.260
이 그림이 최근에 실험했던 모습니다.

00:05:02.260 --> 00:05:04.260
-- 사실 더이상 최근은 아니지만요 --

00:05:04.260 --> 00:05:07.260
지진후의 센다이 지방입니다.

00:05:07.260 --> 00:05:10.260
로봇들은 천재지변 재난 이후에 위험물에 접근하려고

00:05:10.260 --> 00:05:12.260
붕괴된 건물들 안으로 들어 갈 수 있습니다.

00:05:12.260 --> 00:05:15.260
또는 방사능 수치를 그리기 위해

00:05:15.260 --> 00:05:18.260
원자로 건물로 들어 갈 수 도 있구요.

00:05:19.260 --> 00:05:21.260
그래서 이런 로봇들이 풀어야만 하는

00:05:21.260 --> 00:05:24.260
아주 기본적인 문제점은

00:05:24.260 --> 00:05:26.260
자율적인 로봇이라면

00:05:26.260 --> 00:05:28.260
A지점에서 B지점으로 어떻게 가느냐 입니다.

00:05:28.260 --> 00:05:30.260
이건 조금 어려운 문제인데요,

00:05:30.260 --> 00:05:33.260
이 로봇의 역학구조가 복잡하기 때문입니다.

00:05:33.260 --> 00:05:35.260
이 로봇들은 12차원의 공간에서 산다고 볼 수 있습니다.

00:05:35.260 --> 00:05:37.260
그래서 약간의 트릭을 사용합니다.

00:05:37.260 --> 00:05:40.260
이 구불어진 12차원 공간을

00:05:40.260 --> 00:05:42.260
평평한 4차원 공간으로

00:05:42.260 --> 00:05:44.260
변형합니다.

00:05:44.260 --> 00:05:46.260
4차원 공간은

00:05:46.260 --> 00:05:49.260
X, Y, Z, 그리고 요잉축으로 구성됩니다.

00:05:49.260 --> 00:05:51.260
그리고 로봇이 하는것은

00:05:51.260 --> 00:05:55.260
최소 목표 궤적이라고 불리는 궤적을 계산합니다.

00:05:55.260 --> 00:05:57.260
물리학으로 알려드리면,

00:05:57.260 --> 00:05:59.260
위치, 미분, 속력,

00:05:59.260 --> 00:06:01.260
그리고 가속도 입니다.

00:06:01.260 --> 00:06:03.260
그래서 갑자기 움직이고

00:06:03.260 --> 00:06:05.260
순간적으로 하강합니다..

00:06:05.260 --> 00:06:08.260
그래서 이 로봇은 순간하강을 최소화합니다.

00:06:08.260 --> 00:06:10.260
그래서 로봇이 효과적으로 하는 것은

00:06:10.260 --> 00:06:12.260
부드럽고 우아한 동작을 하는것 입니다.

00:06:12.260 --> 00:06:15.260
그래서 장애물을 피하기 위한 것이죠.

00:06:15.260 --> 00:06:18.260
이런 평평한 공간에서 최소 목표 궤적들은

00:06:18.260 --> 00:06:20.260
로봇들이 제어하고

00:06:20.260 --> 00:06:22.260
실행해야하는

00:06:22.260 --> 00:06:24.260
복잡한 12차원 공간으로

00:06:24.260 --> 00:06:26.260
다시 재변형하게 됩니다.

00:06:26.260 --> 00:06:28.260
이런 최소 목표 궤적들이

00:06:28.260 --> 00:06:30.260
어떤것인지 몇가지 예를 보여 드리 겠습니다.

00:06:30.260 --> 00:06:32.260
첫번째 비디오에서,

00:06:32.260 --> 00:06:34.260
중간지점을 통과해서

00:06:34.260 --> 00:06:36.260
A지점에서 B지점으로 이동하는 로봇을 보시게됩니다.

00:06:42.260 --> 00:06:44.260
그래서 이 로봇이 분명하게 곡선 궤적을

00:06:44.260 --> 00:06:46.260
따라 갈 수 있다는 것을 볼 수 있습니다.

00:06:46.260 --> 00:06:48.260
로봇은 중력의 2배를 이겨내고

00:06:48.260 --> 00:06:51.260
타원궤적을 돌기도 합니다.

00:06:52.260 --> 00:06:56.260
초당 100번정도 로봇이 어디 있는지를 확인시켜주는

00:06:56.260 --> 00:06:59.260
모션캡쳐 카메라를 천장에 달았습니다.

00:06:59.260 --> 00:07:02.260
이 카메라는 로봇에게 장애물이 어디에 있는지도 알려줍니다.

00:07:02.260 --> 00:07:04.260
장애물은 움직일수도 있구요.

00:07:04.260 --> 00:07:07.260
다니엘이 허공에 훌라후프를 던지는 것을 볼 수 있는데요,

00:07:07.260 --> 00:07:09.260
로봇이 훌라후프의 위치를 계산하고,

00:07:09.260 --> 00:07:13.260
훌라후프를 잘 통과 하도록 시도하는 것을 볼 수 있습니다.

00:07:13.260 --> 00:07:15.260
학자로써, 연구자금을 확보 하기 위해서

00:07:15.260 --> 00:07:18.260
훌라후프를 뛰어넘는 훈련을 해왔습니다.

00:07:18.260 --> 00:07:21.260
그리고 우리의 로봇들이 해냈습니다.

00:07:21.260 --> 00:07:27.260
(박수)

00:07:27.260 --> 00:07:29.260
로봇이 할 수 있는 또다른 것은

00:07:29.260 --> 00:07:32.260
미리 프로그램 되거나 학습된 궤도를

00:07:32.260 --> 00:07:34.260
기억 할 수 있다는 것입니다.

00:07:34.260 --> 00:07:36.260
운동량을 높여서

00:07:36.260 --> 00:07:38.260
동작을 조합하고,

00:07:38.260 --> 00:07:40.260
방향을 바꾸고

00:07:40.260 --> 00:07:43.260
다시 복귀하는 로봇을 볼 수 있습니다.

00:07:43.260 --> 00:07:46.260
창문사이의 틈이 로봇보다 약간 더 크기 때문에

00:07:46.260 --> 00:07:50.260
이 로봇은 이런 동작을 해야만 합니다.

00:07:50.260 --> 00:07:53.260
그래서 도약판 위에 서 있는 다이버 처럼

00:07:53.260 --> 00:07:55.260
운동량을 얻기 위해서 뛰어 내립니다.

00:07:55.260 --> 00:07:58.260
그래서 발레처럼 피루엣 돌기나 공중제비를 돌고,

00:07:58.260 --> 00:08:00.260
그리고 우아하게 다시 복귀하고,

00:08:00.260 --> 00:08:02.260
이 로봇이 기본적으로 하는 것입니다.

00:08:02.260 --> 00:08:05.260
그래서 로봇은 상당히 복잡한 임무를 수행하기 위해

00:08:05.260 --> 00:08:09.260
어떻게 궤도를 조합해야하는지 알고 있습니다.

00:08:09.260 --> 00:08:11.260
저는 장치들을 바꾸고 싶습니다.

00:08:11.260 --> 00:08:14.260
이 작은 로봇들의 단점 중 한가지는 크기입니다.

00:08:14.260 --> 00:08:16.260
처음에 말씀드린대로,

00:08:16.260 --> 00:08:18.260
크기 문제를 극복하기 위해서

00:08:18.260 --> 00:08:21.260
더 많은 로봇들을 이용하기를 원한다고 했습니다.

00:08:21.260 --> 00:08:23.260
한가지 어려운점은

00:08:23.260 --> 00:08:26.260
어떻게 이런 로봇들을 조직적으로 움직이느냐 입니다.

00:08:26.260 --> 00:08:28.260
그래서 자연에서 찾아보았습니다.

00:08:28.260 --> 00:08:30.260
스티븐 프랏 교수의 연구실에서 가져온

00:08:30.260 --> 00:08:32.260
사막개미의 동영상을

00:08:32.260 --> 00:08:35.260
보여드리도록 하겠습니다.

00:08:35.260 --> 00:08:37.260
이것은 무화과 조각입니다.

00:08:37.260 --> 00:08:39.260
무화과 즙을 바른 다른 물건으로도 할 수 있습니다.

00:08:39.260 --> 00:08:42.260
개미들이 이 물건을 개미집으로 옮길겁니다.

00:08:42.260 --> 00:08:45.260
이 개미들은 어떤 중앙 관리자도 없습니다.

00:08:45.260 --> 00:08:47.260
개미들은 자신들의 이웃을 감지합니다.

00:08:47.260 --> 00:08:49.260
명확한 의사소통은 없습니다.

00:08:49.260 --> 00:08:51.260
하지만 이웃들을 감지하기 때문에,

00:08:51.260 --> 00:08:53.260
그리고 물건을 감지하기 때문에

00:08:53.260 --> 00:08:56.260
그룹 내에 묵시적인 조직화가 이루어집니다.

00:08:56.260 --> 00:08:58.260
이런것이 우리의 로봇들이 갖기를 바라는

00:08:58.260 --> 00:09:01.260
조직화일 일종입니다.

00:09:01.260 --> 00:09:03.260
주위 로봇들로 둘러싸여있는

00:09:03.260 --> 00:09:05.260
로봇이 있을 때,

00:09:05.260 --> 00:09:07.260
-- 로봇 I와 로봇 J를 보시죠. --

00:09:07.260 --> 00:09:09.260
우리가 그 로봇들에게 원하는 것은

00:09:09.260 --> 00:09:12.260
포메이션을 형성하고 비행하면서

00:09:12.260 --> 00:09:14.260
로봇들이 분리되어 비행하는지 감시하는 것 입니다.

00:09:14.260 --> 00:09:16.260
이런 분리 비행이 감당할 만한 수준인지를

00:09:16.260 --> 00:09:18.260
확인하고 싶어지실겁니다.

00:09:18.260 --> 00:09:21.260
로봇들은 이런 오류를 감시하고

00:09:21.260 --> 00:09:23.260
제어 명령어를 초당 100번씩

00:09:23.260 --> 00:09:25.260
계산합니다.

00:09:25.260 --> 00:09:28.260
그리고 나서 초당 600번의 모터 명령어로 바꿉니다.

00:09:28.260 --> 00:09:30.260
그래서 이방법은

00:09:30.260 --> 00:09:32.260
비중앙식 방법으로 이루어집니다.

00:09:32.260 --> 00:09:34.260
수많은 로봇을 가지고 있다면,

00:09:34.260 --> 00:09:38.260
이런 작업을 수행하기 위해 모든 정보를 중앙에서

00:09:38.260 --> 00:09:41.260
빨리 처리 한다는 것은 불가능합니다.

00:09:41.260 --> 00:09:43.260
또한 로봇들은 그들의 이웃 로봇들로부터

00:09:43.260 --> 00:09:45.260
감지한 지역 정보만을

00:09:45.260 --> 00:09:47.260
기반으로 행동해야만 합니다.

00:09:47.260 --> 00:09:49.260
그리고 마지막으로,

00:09:49.260 --> 00:09:51.260
우리는 로봇들이

00:09:51.260 --> 00:09:53.260
이웃 로봇들로부터 자유롭다고 말합니다.

00:09:53.260 --> 00:09:56.260
우리는 이것을 익명성이라고 부릅니다.

00:09:56.260 --> 00:09:58.260
다음에 보여드고 싶은 것은

00:09:58.260 --> 00:10:00.260
20개의 작은 로봇들이

00:10:00.260 --> 00:10:03.260
무리지어 날아다니는

00:10:03.260 --> 00:10:05.260
비디오 입니다.

00:10:05.260 --> 00:10:08.260
로봇들은 그들 주변 로봇들의 위치를 감시합니다.

00:10:08.260 --> 00:10:10.260
그리고 포메이션을 유지합니다.

00:10:10.260 --> 00:10:12.260
포메이션은 바꿀 수 있습니다.

00:10:12.260 --> 00:10:14.260
평면 포메이션이 될 수 있고,

00:10:14.260 --> 00:10:16.260
3차원 포메이션이 될 수 도 있습니다.

00:10:16.260 --> 00:10:18.260
여기 보시는 것 처럼,

00:10:18.260 --> 00:10:21.260
3차원 포메이션에서 평면 포메이션으로 흐트러집니다.

00:10:21.260 --> 00:10:23.260
또, 장애물을 통과하며 날기 위해서

00:10:23.260 --> 00:10:27.260
비행중에 포메이션에 적응 할 수 있습니다.

00:10:27.260 --> 00:10:30.260
다시 이 로봇들이 아주 가깝게 다가옵니다.

00:10:30.260 --> 00:10:32.260
그림에서 보실 수 있듯이,

00:10:32.260 --> 00:10:34.260
로봇들을 서로 몇 인치의 간격을 두고 붙을 수 있습니다.

00:10:34.260 --> 00:10:37.260
프로펠러 날개의

00:10:37.260 --> 00:10:39.260
공기역학적인 상호작용에도 불구하고

00:10:39.260 --> 00:10:41.260
안정적인 비행을 할 수 있습니다.

00:10:41.260 --> 00:10:48.260
(박수)

00:10:48.260 --> 00:10:50.260
포메이션을 이루면서 비행하는 방법을 알게 되면

00:10:50.260 --> 00:10:52.260
협동해서 물건을 들어 올릴 수 있습니다.

00:10:52.260 --> 00:10:54.260
여기 보실 수 있는것 처럼,

00:10:54.260 --> 00:10:57.260
로봇들을 함께 팀으로 만들어서

00:10:57.260 --> 00:10:59.260
로봇의 힘을 두 배, 세 배,

00:10:59.260 --> 00:11:01.260
네 배 더 크게 만들 수 있다는 것을 보여줍니다.

00:11:01.260 --> 00:11:04.260
이렇게 하는데 있어 단점은

00:11:04.260 --> 00:11:06.260
물건의 크기를 늘릴수록

00:11:06.260 --> 00:11:08.260
같은 물건을 옮기는 많은 로봇이 있다고 가정할 때,

00:11:08.260 --> 00:11:11.260
기본적으로 관성이 증가하고, 따라서

00:11:11.260 --> 00:11:14.260
그만큼 댓가를 치뤄야 하는데 결국 로봇이 민첩해지지 않는다는거죠.

00:11:14.260 --> 00:11:17.260
하지만 적재하중의 용량에 대해서는 이점을 얻게 됩니다.

00:11:17.260 --> 00:11:19.260
보여드리고 싶은 또다른 응용분야는

00:11:19.260 --> 00:11:21.260
-- 여기는 저희 연구실 입니다. --

00:11:21.260 --> 00:11:23.260
대학원생인 쿠엔틴 린지 학생이 작업한 것인데요.

00:11:23.260 --> 00:11:26.260
그의 알고리즘은 이런 로봇들에게

00:11:26.260 --> 00:11:28.260
교량 구조물에서

00:11:28.260 --> 00:11:30.260
어떻게 육면체 구조물을 만드는지

00:11:30.260 --> 00:11:33.260
알려주고 있습니다.

00:11:33.260 --> 00:11:35.260
그래서 그의 알고리즘은

00:11:35.260 --> 00:11:37.260
어떤 부분을 들어올리고, 언제, 어디로 옮기는지를

00:11:37.260 --> 00:11:39.260
로봇에게 말해줍니다.

00:11:39.260 --> 00:11:41.260
여러분은 이 비디오에서

00:11:41.260 --> 00:11:43.260
-- 속도를 10, 14배 올리죠 --

00:11:43.260 --> 00:11:46.260
로봇들에 의해 만들어진 3개의 서로 다른 구조물들을 보실 수 있습니다.

00:11:46.260 --> 00:11:48.260
모든것이 자율적입니다.

00:11:48.260 --> 00:11:50.260
쿠엔틴 학생이 해야 하는 것은

00:11:50.260 --> 00:11:52.260
만들고 싶은 디자인의 청사진을

00:11:52.260 --> 00:11:56.260
로봇들에게 알려만 주는 것입니다.

00:11:56.260 --> 00:11:59.260
지금까지 보셨던 모든 실험들과,

00:11:59.260 --> 00:12:01.260
모든 시연들은

00:12:01.260 --> 00:12:04.260
동작감지 시스템의 도움으로 이루어졌습니다.

00:12:04.260 --> 00:12:06.260
연구실을 떠나 실제 세상으로 나가면

00:12:06.260 --> 00:12:09.260
무슨일이 일어날까요?

00:12:09.260 --> 00:12:12.260
GPS가 없다면 어떨까요?

00:12:12.260 --> 00:12:14.260
그래서 이런 로봇은

00:12:14.260 --> 00:12:16.260
카메라, 레이져 H 파인더, 스캐너가

00:12:16.260 --> 00:12:19.260
장착되어 있습니다.

00:12:19.260 --> 00:12:21.260
이것은 주변환경의 지도를 만들기 위해

00:12:21.260 --> 00:12:23.260
이런 센서들을 사용합니다.

00:12:23.260 --> 00:12:26.260
지도는 몇가지 구조물들로 구성되는데요

00:12:26.260 --> 00:12:28.260
-- 출입구, 창문들,

00:12:28.260 --> 00:12:30.260
사람들, 가구 등 --

00:12:30.260 --> 00:12:32.260
그리고 그것들이 구조물에 연관해

00:12:32.260 --> 00:12:34.260
어디에 위치하는지를 계산합니다.

00:12:34.260 --> 00:12:36.260
그래서 전역적인 좌표 시스템이 없습니다.

00:12:36.260 --> 00:12:39.260
좌표 시스템은 로봇을 기반으로 정의 되는데요,

00:12:39.260 --> 00:12:42.260
어디에 있는지, 어디를 보고 있는지를 확인 합니다.

00:12:42.260 --> 00:12:45.260
그리고 그런 구조물들을 따라서 비행하게 됩니다.

00:12:45.260 --> 00:12:47.260
프랭크 쉔과

00:12:47.260 --> 00:12:49.260
네이썬 마이클 교수가 개발한

00:12:49.260 --> 00:12:51.260
알고리즘의 동영상을 보드리고 싶습니다.

00:12:51.260 --> 00:12:55.260
이 동영상은 맨 처음 로봇이 빌딩에 들어가서

00:12:55.260 --> 00:12:58.260
비행중에 지도를 작성하는 장면을 보여줍니다.

00:12:58.260 --> 00:13:01.260
그 로봇은 무슨 구조물들이 있는지를 알아냅니다.

00:13:01.260 --> 00:13:03.260
그리고 지도를 만듭니다.

00:13:03.260 --> 00:13:05.260
로봇은 구조물들을 비교하여 어디에 위치하는지를 계산하고

00:13:05.260 --> 00:13:07.260
초당 100번정도 로봇의 위치를 측정합니다.

00:13:07.260 --> 00:13:09.260
처음에 제가 설명드린

00:13:09.260 --> 00:13:11.260
제어 알고리즘을

00:13:11.260 --> 00:13:13.260
사용 할 수 있게 한 것이죠.

00:13:13.260 --> 00:13:15.260
이 로봇은 프랭크에 의해

00:13:15.260 --> 00:13:17.260
원격으로 명령이 내려진것입니다.

00:13:17.260 --> 00:13:19.260
하지만 로봇은 어디로 가야하는지

00:13:19.260 --> 00:13:21.260
자신이 해결합니다.

00:13:21.260 --> 00:13:23.260
제가 이 로봇을 빌딩안으로 들여 보냈다고 가정해보죠.

00:13:23.260 --> 00:13:25.260
저는 이 빌딩이 어떻게 생겼는지 모릅니다.

00:13:25.260 --> 00:13:27.260
이 로봇에게 들어가라고 명령하고,

00:13:27.260 --> 00:13:29.260
지도를 만들라고 하고,

00:13:29.260 --> 00:13:32.260
돌아와서 빌딩이 어떤 모양인지 말해달라고 할 수 있습니다.

00:13:32.260 --> 00:13:35.260
여기보면, 그 로봇들은 지도의 A지점에서

00:13:35.260 --> 00:13:38.260
B지점으로 어떻게 가는지 뿐만 아니라,

00:13:38.260 --> 00:13:40.260
매번 어떤 지점이 최적의 B지점인지도

00:13:40.260 --> 00:13:42.260
알아낼 수 있습니다.

00:13:42.260 --> 00:13:45.260
최소한의 정보를 가지고 특정 장소를 찾기위해

00:13:45.260 --> 00:13:47.260
어디로 가야하는지 알고 있습니다.

00:13:47.260 --> 00:13:50.260
또한, 로봇은 어떻게 지도에 덧붙이는지를 알려줍니다.

00:13:50.260 --> 00:13:52.260
마지막 한가지 응용분야를

00:13:52.260 --> 00:13:54.260
보여 드리겠습니다.

00:13:54.260 --> 00:13:57.260
이 기술에는 많은 응용분야가 있습니다.

00:13:57.260 --> 00:13:59.260
저는 교수입니다. 그리고 교육에 대해 매우 열정적입니다.

00:13:59.260 --> 00:14:01.260
이와 같은 로봇은 초등학교 교육과정을

00:14:01.260 --> 00:14:03.260
바꿀 수도 있습니다.

00:14:03.260 --> 00:14:05.260
하지만 저희는 로스앤젤레스에 가까운

00:14:05.260 --> 00:14:07.260
남부 캘리포니아 지방에 있습니다.

00:14:07.260 --> 00:14:09.260
그래서 엔터테인먼트에 관련된 것으로

00:14:09.260 --> 00:14:11.260
결론을 맺고 싶군요.

00:14:11.260 --> 00:14:13.260
뮤직비디오 한편으로 강연을 마치고 싶습니다.

00:14:13.260 --> 00:14:16.260
이 비디오를 만든

00:14:16.260 --> 00:14:18.260
알렉스와 다니엘을 소개합니다.

00:14:18.260 --> 00:14:25.260
(박수)

00:14:25.260 --> 00:14:27.260
이 비디오를 실행하기 전에,

00:14:27.260 --> 00:14:30.260
크리스로부터 전화를 받고 3일만에

00:14:30.260 --> 00:14:32.260
이 작품을 만들었다는 것을 말씀 드리고 싶습니다.

00:14:32.260 --> 00:14:34.260
비디오 상영되는 로봇들은

00:14:34.260 --> 00:14:36.260
완전히 자율적으로 움직입니다.

00:14:36.260 --> 00:14:39.260
6개의 서로 다른 악기를 다루는 9개의 로봇들을 보실겁니다.

00:14:39.260 --> 00:14:43.260
물론 TED 2012를 위해서 만들었습니다.

00:14:43.260 --> 00:14:46.260
자 보시죠.

00:15:19.260 --> 00:15:29.260
(음악)

00:16:23.260 --> 00:16:40.260
(박수)

