WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:07.000
翻訳: Yasushi Aoki
校正: Sawa Horibe

00:00:20.260 --> 00:00:22.260
おはようございます

00:00:22.260 --> 00:00:24.260
今日お話しするのは

00:00:24.260 --> 00:00:27.260
自律的に飛行するビーチボールについてです

00:00:27.260 --> 00:00:31.260
違った こういう自律的で敏捷な飛行ロボットについてです

00:00:31.260 --> 00:00:34.260
このようなものを作る難しさと

00:00:34.260 --> 00:00:36.260
この技術の応用にどれほどの可能性があるかお話しします

00:00:36.260 --> 00:00:38.260
この技術の応用にどれほどの可能性があるかお話しします

00:00:38.260 --> 00:00:40.260
このロボットは

00:00:40.260 --> 00:00:43.260
無人航空機と似ています

00:00:43.260 --> 00:00:46.260
しかし無人航空機はずっと大きいものです

00:00:46.260 --> 00:00:48.260
何千キロもの重さがあって

00:00:48.260 --> 00:00:50.260
とても敏捷とは言えず

00:00:50.260 --> 00:00:52.260
自律的でさえありません

00:00:52.260 --> 00:00:54.260
無人航空機の多くは実際

00:00:54.260 --> 00:00:56.260
人間によって遠隔操作されていて

00:00:56.260 --> 00:00:59.260
複数のパイロット

00:00:59.260 --> 00:01:01.260
センサのオペレータ

00:01:01.260 --> 00:01:03.260
作戦指揮官などが関わっています

00:01:03.260 --> 00:01:05.260
私たちが興味を持っているのは

00:01:05.260 --> 00:01:07.260
私の手にあるようなロボットの開発で

00:01:07.260 --> 00:01:10.260
左の写真の２つは実際 お店で買うことができます

00:01:10.260 --> 00:01:13.260
これはローターが４つのヘリコプターで

00:01:13.260 --> 00:01:17.260
大きさは１メートル前後

00:01:17.260 --> 00:01:19.260
重さも数キロ程度です

00:01:19.260 --> 00:01:22.260
私たちはそれにセンサやプロセッサを後付けして

00:01:22.260 --> 00:01:24.260
GPSなしで屋内を

00:01:24.260 --> 00:01:26.260
飛べるようにしています

00:01:26.260 --> 00:01:28.260
私が今

00:01:28.260 --> 00:01:30.260
手にしているロボットは

00:01:30.260 --> 00:01:33.260
私の学生アレックスとダニエルが

00:01:33.260 --> 00:01:35.260
作ったものです

00:01:35.260 --> 00:01:37.260
重さは

00:01:37.260 --> 00:01:39.260
50グラムほど

00:01:39.260 --> 00:01:41.260
消費電力は15ワットで

00:01:41.260 --> 00:01:43.260
見ての通り

00:01:43.260 --> 00:01:45.260
直径20センチほどの大きさです

00:01:45.260 --> 00:01:48.260
このようなロボットの仕組みを

00:01:48.260 --> 00:01:50.260
簡単にご説明しましょう

00:01:50.260 --> 00:01:52.260
４つのローターが

00:01:52.260 --> 00:01:54.260
すべて同じ速さで回っているとき

00:01:54.260 --> 00:01:56.260
ロボットは空中で静止します

00:01:56.260 --> 00:01:59.260
４つのローターの回転速度を上げると

00:01:59.260 --> 00:02:02.260
上に加速し 上昇します

00:02:02.260 --> 00:02:04.260
ロボットが傾いていれば当然

00:02:04.260 --> 00:02:06.260
その傾いた方向に

00:02:06.260 --> 00:02:09.260
進むことになります

00:02:09.260 --> 00:02:12.260
ロボットを傾けるには ２つの方法があります

00:02:12.260 --> 00:02:14.260
この写真で

00:02:14.260 --> 00:02:16.260
４番ローターは速く

00:02:16.260 --> 00:02:18.260
２番ローターは遅く回っています

00:02:18.260 --> 00:02:20.260
そうするとロボットを

00:02:20.260 --> 00:02:23.260
「ローリング」させる力が働きます

00:02:23.260 --> 00:02:25.260
一方

00:02:25.260 --> 00:02:28.260
３番ローターの回転を速く

00:02:28.260 --> 00:02:30.260
１番ローターの回転を遅くすると

00:02:30.260 --> 00:02:33.260
ロボットは手前側に「ピッチング」します

00:02:33.260 --> 00:02:35.260
最後に

00:02:35.260 --> 00:02:37.260
向かい合った２つのローターを

00:02:37.260 --> 00:02:39.260
他の２つより速く回転させると

00:02:39.260 --> 00:02:41.260
垂直軸を中心に「ヨーイング」します

00:02:41.260 --> 00:02:43.260
オンボードプロセッサは

00:02:43.260 --> 00:02:46.260
行うべき動作に対して必要となる

00:02:46.260 --> 00:02:48.260
これらの方法の組み合わせを求め

00:02:48.260 --> 00:02:51.260
モーターに対して 毎秒600回送る命令を

00:02:51.260 --> 00:02:53.260
決めています

00:02:53.260 --> 00:02:55.260
それがこの基本的な仕組みです

00:02:55.260 --> 00:02:57.260
この設計が有利な点は

00:02:57.260 --> 00:02:59.260
サイズを小さくするほど

00:02:59.260 --> 00:03:02.260
ロボットの動きが敏捷になることです

00:03:02.260 --> 00:03:04.260
ここでRは

00:03:04.260 --> 00:03:06.260
ロボットの大きさを表す数字で

00:03:06.260 --> 00:03:09.260
実際には半径です

00:03:09.260 --> 00:03:12.260
Rを小さくすると 様々な物理的パラメータが

00:03:12.260 --> 00:03:14.260
変わります

00:03:14.260 --> 00:03:16.260
中でも一番重要なのは 慣性

00:03:16.260 --> 00:03:18.260
すなわち動きに対する抵抗力です

00:03:18.260 --> 00:03:20.260
回転運動を支配する

00:03:20.260 --> 00:03:23.260
慣性の大きさは

00:03:23.260 --> 00:03:26.260
Rの５乗に比例します

00:03:26.260 --> 00:03:28.260
ですからRを小さくすると

00:03:28.260 --> 00:03:31.260
慣性は劇的に減るのです

00:03:31.260 --> 00:03:34.260
結果として ここでギリシャ文字の

00:03:34.260 --> 00:03:36.260
αで表している角加速度は

00:03:36.260 --> 00:03:38.260
1/Rになります

00:03:38.260 --> 00:03:40.260
Rに反比例するのです

00:03:40.260 --> 00:03:43.260
小さくするほど速く回ることができるようになります

00:03:43.260 --> 00:03:45.260
ビデオを見ると そのことがよく分かります

00:03:45.260 --> 00:03:48.260
右下の映像でロボットが

00:03:48.260 --> 00:03:50.260
360度宙返りを

00:03:50.260 --> 00:03:52.260
0.5秒未満で行っています

00:03:52.260 --> 00:03:55.260
連続宙返りにはもう少し時間がかかります

00:03:55.260 --> 00:03:57.260
オンボードプロセッサは

00:03:57.260 --> 00:03:59.260
加速度計やジャイロからの

00:03:59.260 --> 00:04:01.260
フィードバックを受け取って

00:04:01.260 --> 00:04:03.260
計算をし

00:04:03.260 --> 00:04:05.260
ロボットを安定させるために

00:04:05.260 --> 00:04:07.260
毎秒600回命令を出しています

00:04:07.260 --> 00:04:10.260
左下の映像では ダニエルがロボットを宙に放り投げています

00:04:10.260 --> 00:04:12.260
制御能力がいかに強いか分かるでしょう

00:04:12.260 --> 00:04:14.260
どんな風に放り投げても

00:04:14.260 --> 00:04:18.260
ロボットは体勢を立て直して戻ってきます

00:04:18.260 --> 00:04:20.260
このようなロボットを作る

00:04:20.260 --> 00:04:23.260
理由は何かというと 多くの応用があるからです

00:04:23.260 --> 00:04:26.260
例えばこのような建物内に送り込み

00:04:26.260 --> 00:04:29.260
侵入者 生化学物質の漏洩 ガス漏れ等が—

00:04:29.260 --> 00:04:32.260
あった際の 初動対応として

00:04:32.260 --> 00:04:34.260
調査を行わせることができます

00:04:34.260 --> 00:04:36.260
建築のような作業に

00:04:36.260 --> 00:04:38.260
使うこともできます

00:04:38.260 --> 00:04:42.260
ここではロボットが梁や柱を運んで

00:04:42.260 --> 00:04:45.260
四角い構造物を組み立てています

00:04:45.260 --> 00:04:48.260
これについては後ほど もう少し詳しくお話しします

00:04:48.260 --> 00:04:51.260
このロボットは貨物輸送にも使えます

00:04:51.260 --> 00:04:54.260
小さなロボットは 運搬容量が

00:04:54.260 --> 00:04:56.260
小さいという問題がありますが

00:04:56.260 --> 00:04:58.260
複数のロボットで運ぶ—

00:04:58.260 --> 00:05:00.260
という手もあります

00:05:00.260 --> 00:05:02.260
この写真は最近行った実験で･･･

00:05:02.260 --> 00:05:04.260
もうそんなに最近でもありませんが

00:05:04.260 --> 00:05:07.260
震災直後の仙台で行ったものです

00:05:07.260 --> 00:05:10.260
自然災害で崩れた建物や 核施設内にロボットを

00:05:10.260 --> 00:05:12.260
送り込んで 状況の確認や

00:05:12.260 --> 00:05:15.260
放射能レベルのチェックを

00:05:15.260 --> 00:05:18.260
行わせることができます

00:05:19.260 --> 00:05:21.260
自律的なロボットが

00:05:21.260 --> 00:05:24.260
解決すべき基本的な問題は

00:05:24.260 --> 00:05:26.260
１つの地点から別の地点へ

00:05:26.260 --> 00:05:28.260
移動する方法を見出すということです

00:05:28.260 --> 00:05:30.260
これが簡単でないのは

00:05:30.260 --> 00:05:33.260
このロボットの力学的特性が極めて複雑なためです

00:05:33.260 --> 00:05:35.260
実際12次元空間で考える必要があり

00:05:35.260 --> 00:05:37.260
そのためちょっとしたトリックを使って

00:05:37.260 --> 00:05:40.260
曲がった12次元空間を

00:05:40.260 --> 00:05:42.260
平らな４次元空間に

00:05:42.260 --> 00:05:44.260
変換しています

00:05:44.260 --> 00:05:46.260
その４次元空間は

00:05:46.260 --> 00:05:49.260
X, Y, Z座標とヨー角からなっています

00:05:49.260 --> 00:05:51.260
そうするとロボットがするのは

00:05:51.260 --> 00:05:55.260
最小スナップ軌道を求めるということになります

00:05:55.260 --> 00:05:57.260
物理学のおさらいですが

00:05:57.260 --> 00:05:59.260
位置の変化を微分していくと 速度

00:05:59.260 --> 00:06:01.260
加速度

00:06:01.260 --> 00:06:03.260
ジャーク

00:06:03.260 --> 00:06:05.260
スナップとなります

00:06:05.260 --> 00:06:08.260
このロボットはスナップを最小化するようになっています

00:06:08.260 --> 00:06:10.260
それは結果としてなめらかできれいな

00:06:10.260 --> 00:06:12.260
動作を生み出すことになります

00:06:12.260 --> 00:06:15.260
また障害物の回避も行います

00:06:15.260 --> 00:06:18.260
この平らな空間における最小スナップ軌道を

00:06:18.260 --> 00:06:20.260
複雑な12次元空間へと

00:06:20.260 --> 00:06:22.260
逆変換して

00:06:22.260 --> 00:06:24.260
それによって制御や

00:06:24.260 --> 00:06:26.260
動作の実行をするわけです

00:06:26.260 --> 00:06:28.260
最小スナップ軌道がどのようなものか

00:06:28.260 --> 00:06:30.260
いくつか例をご覧にいれましょう

00:06:30.260 --> 00:06:32.260
最初のビデオでは

00:06:32.260 --> 00:06:34.260
ロボットが１つの地点から別な地点へ

00:06:34.260 --> 00:06:36.260
中間点を経由して移動します

00:06:42.260 --> 00:06:44.260
どんな曲線軌道でも問題なく

00:06:44.260 --> 00:06:46.260
こなすことができます

00:06:46.260 --> 00:06:48.260
これは円軌道で

00:06:48.260 --> 00:06:51.260
約2Gの加速度になります

00:06:52.260 --> 00:06:56.260
ここでは上にあるモーションキャプチャカメラが

00:06:56.260 --> 00:06:59.260
ロボットに現在位置を毎秒100回伝えています

00:06:59.260 --> 00:07:02.260
また障害物の位置も伝えています

00:07:02.260 --> 00:07:04.260
障害物が動いていても対応できます

00:07:04.260 --> 00:07:07.260
ここではダニエルがフープを宙に投げていますが

00:07:07.260 --> 00:07:09.260
ロボットはその位置を計算して

00:07:09.260 --> 00:07:13.260
中を通り抜ける最適な経路を求めています

00:07:13.260 --> 00:07:15.260
私たちは学者として

00:07:15.260 --> 00:07:18.260
いつも研究予算獲得という曲芸をさせられているので

00:07:18.260 --> 00:07:21.260
ロボットにも同様の曲芸をさせているわけです

00:07:21.260 --> 00:07:27.260
(拍手)

00:07:27.260 --> 00:07:29.260
このロボットにできる別なこととして

00:07:29.260 --> 00:07:32.260
自分で見つけた軌道や プログラムされた軌道を

00:07:32.260 --> 00:07:34.260
記憶するというのがあります

00:07:34.260 --> 00:07:36.260
ここではロボットが

00:07:36.260 --> 00:07:38.260
基本動作を組み合わせて

00:07:38.260 --> 00:07:40.260
加速して 向きを変え

00:07:40.260 --> 00:07:43.260
元の所に戻るという一連の動作をしています

00:07:43.260 --> 00:07:46.260
このようにする必要があるのは

00:07:46.260 --> 00:07:50.260
通る隙間の幅がロボットよりわずかに広いだけだからです

00:07:50.260 --> 00:07:53.260
そのため 飛び込み選手がするように

00:07:53.260 --> 00:07:55.260
飛び込み板からジャンプして勢いを付け

00:07:55.260 --> 00:07:58.260
つま先回転をして1/4宙返りをして通り抜け

00:07:58.260 --> 00:08:00.260
きれいに体制を立て直すという動作を

00:08:00.260 --> 00:08:02.260
このロボットはしているわけです

00:08:02.260 --> 00:08:05.260
ロボットにはこの難しいタスクをこなすために

00:08:05.260 --> 00:08:09.260
軌道の断片をどう組み合わせれば良いのか分かっているのです

00:08:09.260 --> 00:08:11.260
ちょっと話題を変えましょう

00:08:11.260 --> 00:08:14.260
このような小さなロボットの短所はその大きさです

00:08:14.260 --> 00:08:16.260
そこで 先ほども言いましたように

00:08:16.260 --> 00:08:18.260
大きさによる制限を克服するため

00:08:18.260 --> 00:08:21.260
たくさんのロボットを使おうというわけです

00:08:21.260 --> 00:08:23.260
ここで難しいのは

00:08:23.260 --> 00:08:26.260
たくさんのロボットをどうやって協調させるかです

00:08:26.260 --> 00:08:28.260
そこで私たちは自然に目を向けました

00:08:28.260 --> 00:08:30.260
ご覧いただく映像は

00:08:30.260 --> 00:08:32.260
スティーブン・プラット教授の研究室の

00:08:32.260 --> 00:08:35.260
アシナガアリがものを運んでいる様子です

00:08:35.260 --> 00:08:37.260
イチジクの切れ端です

00:08:37.260 --> 00:08:39.260
実際どんなものでも

00:08:39.260 --> 00:08:42.260
イチジクの果汁を付けると アリたちは巣に運んでいきます

00:08:42.260 --> 00:08:45.260
このアリたちには中央で指示を出す者は誰もいません

00:08:45.260 --> 00:08:47.260
そばにいる他のアリを知覚しますが

00:08:47.260 --> 00:08:49.260
明示的なコミュニケーションは行いません

00:08:49.260 --> 00:08:51.260
それでも他のアリと

00:08:51.260 --> 00:08:53.260
食料を知覚することで

00:08:53.260 --> 00:08:56.260
集団として暗黙の調整が行われるのです

00:08:56.260 --> 00:08:58.260
これはまさに私たちが

00:08:58.260 --> 00:09:01.260
ロボットに持たせたい調整方法です

00:09:01.260 --> 00:09:03.260
ロボットが 他のロボットに

00:09:03.260 --> 00:09:05.260
囲まれているときに･･･

00:09:05.260 --> 00:09:07.260
ロボットｉとロボットｊを見てください･･･

00:09:07.260 --> 00:09:09.260
ロボットにさせたいのは

00:09:09.260 --> 00:09:12.260
編隊飛行中の他のロボットとの距離を

00:09:12.260 --> 00:09:14.260
監視するということです

00:09:14.260 --> 00:09:16.260
そしてその距離を

00:09:16.260 --> 00:09:18.260
許容範囲内に保とうとするわけです

00:09:18.260 --> 00:09:21.260
そのため ずれの大きさを監視して

00:09:21.260 --> 00:09:23.260
制御のための命令を

00:09:23.260 --> 00:09:25.260
毎秒100回算出し

00:09:25.260 --> 00:09:28.260
それが毎秒600回のモーターへの命令に変換されます

00:09:28.260 --> 00:09:30.260
これもまた分散的に

00:09:30.260 --> 00:09:32.260
行わせる必要があります

00:09:32.260 --> 00:09:34.260
ロボットがたくさんある場合

00:09:34.260 --> 00:09:38.260
これらすべての情報の処理を中央から

00:09:38.260 --> 00:09:41.260
ロボットのタスク実行に必要な速さで行うのは無理です

00:09:41.260 --> 00:09:43.260
また ロボットは 近くのロボットを

00:09:43.260 --> 00:09:45.260
感知することによる周辺情報のみで

00:09:45.260 --> 00:09:47.260
行動する必要があります

00:09:47.260 --> 00:09:49.260
最後に

00:09:49.260 --> 00:09:51.260
どのロボットが隣に来ても

00:09:51.260 --> 00:09:53.260
構わないようにしてあり

00:09:53.260 --> 00:09:56.260
これを匿名性と呼んでいます

00:09:56.260 --> 00:09:58.260
次にお見せする

00:09:58.260 --> 00:10:00.260
映像では

00:10:00.260 --> 00:10:03.260
20個の小さなロボットが

00:10:03.260 --> 00:10:05.260
編隊飛行しています

00:10:05.260 --> 00:10:08.260
互いに隣のロボットの位置を監視しながら

00:10:08.260 --> 00:10:10.260
編隊を維持しています

00:10:10.260 --> 00:10:12.260
編隊の形を変えることもできます

00:10:12.260 --> 00:10:14.260
平面的な編隊を組むことも

00:10:14.260 --> 00:10:16.260
立体的な編隊を組むこともできます

00:10:16.260 --> 00:10:18.260
ご覧のように

00:10:18.260 --> 00:10:21.260
編隊が立体型から平面型に移行しています

00:10:21.260 --> 00:10:23.260
障害物をよける際には

00:10:23.260 --> 00:10:27.260
その場で編隊を変形して対応します

00:10:27.260 --> 00:10:30.260
ロボットは互いにとても近い距離で飛んでいます

00:10:30.260 --> 00:10:32.260
８の字飛行をしていますが

00:10:32.260 --> 00:10:34.260
互いに数センチまで近づいています

00:10:34.260 --> 00:10:37.260
プロペラの空力的干渉が

00:10:37.260 --> 00:10:39.260
あるにもかかわらず

00:10:39.260 --> 00:10:41.260
安定した飛行を維持できます

00:10:41.260 --> 00:10:48.260
(拍手)

00:10:48.260 --> 00:10:50.260
編隊飛行ができるようになれば

00:10:50.260 --> 00:10:52.260
協力してものを運ぶこともできます

00:10:52.260 --> 00:10:54.260
ご覧の通り

00:10:54.260 --> 00:10:57.260
近くのロボットとチームを組むことで

00:10:57.260 --> 00:10:59.260
運ぶ力を２倍 ３倍 ４倍と

00:10:59.260 --> 00:11:01.260
増やしていくことができます

00:11:01.260 --> 00:11:04.260
このようにすることの短所は

00:11:04.260 --> 00:11:06.260
規模を大きくするにつれ

00:11:06.260 --> 00:11:08.260
たくさんのロボットで

00:11:08.260 --> 00:11:11.260
１つのものを運ぶため 慣性が大きくなり

00:11:11.260 --> 00:11:14.260
敏捷に動けなくなることです

00:11:14.260 --> 00:11:17.260
しかし運搬能力の面では増大します

00:11:17.260 --> 00:11:19.260
もう１つお見せしたいのは

00:11:19.260 --> 00:11:21.260
これも うちの研究室のものですが

00:11:21.260 --> 00:11:23.260
院生のクエンティン・リンゼイが

00:11:23.260 --> 00:11:26.260
取り組んでいます 彼のアルゴリズムは

00:11:26.260 --> 00:11:28.260
桁のような部材から

00:11:28.260 --> 00:11:30.260
四角い構造物を組み立てる作業を

00:11:30.260 --> 00:11:33.260
ロボットに自律的に行わせるものです

00:11:33.260 --> 00:11:35.260
どのパーツを どの順に取り上げ

00:11:35.260 --> 00:11:37.260
どこに置くかを

00:11:37.260 --> 00:11:39.260
アルゴリズムが決めています

00:11:39.260 --> 00:11:41.260
映像は 10倍から

00:11:41.260 --> 00:11:43.260
14倍早回ししています

00:11:43.260 --> 00:11:46.260
ロボットが３種の構造物を組み立てています

00:11:46.260 --> 00:11:48.260
ここでもすべてが自律的で

00:11:48.260 --> 00:11:50.260
クエンティンがするのは

00:11:50.260 --> 00:11:52.260
作りたい構造の

00:11:52.260 --> 00:11:56.260
設計図を与えるということだけです

00:11:56.260 --> 00:11:59.260
ここまでご覧いただいた実験はどれも

00:11:59.260 --> 00:12:01.260
モーションキャプチャシステムの

00:12:01.260 --> 00:12:04.260
助けを借りています

00:12:04.260 --> 00:12:06.260
では実験室を離れ 外の

00:12:06.260 --> 00:12:09.260
現実の世界に出た場合はどうなるのでしょう？

00:12:09.260 --> 00:12:12.260
もしGPSもなかったとしたら？

00:12:12.260 --> 00:12:14.260
そこでこのロボットには

00:12:14.260 --> 00:12:16.260
Kinectカメラと

00:12:16.260 --> 00:12:19.260
レーザーレンジファインダーを搭載しています

00:12:19.260 --> 00:12:21.260
それらのセンサを使って

00:12:21.260 --> 00:12:23.260
周囲の環境の地図を作ります

00:12:23.260 --> 00:12:26.260
地図の内容は様々な目印になるもの

00:12:26.260 --> 00:12:28.260
ドアや 窓

00:12:28.260 --> 00:12:30.260
人間や 家具などで

00:12:30.260 --> 00:12:32.260
それらの目印に対する

00:12:32.260 --> 00:12:34.260
自分の位置を把握します

00:12:34.260 --> 00:12:36.260
グローバル座標系は使っていません

00:12:36.260 --> 00:12:39.260
ロボットがどこにいて何を見ているかに基づいて

00:12:39.260 --> 00:12:42.260
座標系を定義しています

00:12:42.260 --> 00:12:45.260
そしてそれらの目印を使って航行しているのです

00:12:45.260 --> 00:12:47.260
フランク・シェンと

00:12:47.260 --> 00:12:49.260
ネイサン・マイケル教授が開発した

00:12:49.260 --> 00:12:51.260
アルゴリズムの映像をご覧いただきましょう

00:12:51.260 --> 00:12:55.260
ロボットが初めての建物に入り

00:12:55.260 --> 00:12:58.260
リアルタイムで地図を作っていきます

00:12:58.260 --> 00:13:01.260
ロボットは目印になるものを把握し

00:13:01.260 --> 00:13:03.260
地図を作成します

00:13:03.260 --> 00:13:05.260
目印に対する

00:13:05.260 --> 00:13:07.260
自分の位置の算出を

00:13:07.260 --> 00:13:09.260
毎秒100回行い

00:13:09.260 --> 00:13:11.260
前に説明した制御アルゴリズムによる

00:13:11.260 --> 00:13:13.260
制御を行います

00:13:13.260 --> 00:13:15.260
このロボットはフランクが

00:13:15.260 --> 00:13:17.260
遠隔操作していますが

00:13:17.260 --> 00:13:19.260
どこに行くかを

00:13:19.260 --> 00:13:21.260
自分で決めることもできます

00:13:21.260 --> 00:13:23.260
どういう建物なのか分からない

00:13:23.260 --> 00:13:25.260
建物の中に送り込もうという場合は

00:13:25.260 --> 00:13:27.260
「中に入って地図を作り

00:13:27.260 --> 00:13:29.260
戻って様子を教えてくれ」と

00:13:29.260 --> 00:13:32.260
指示するだけでいいのです

00:13:32.260 --> 00:13:35.260
ここでロボットは１つの地点から別な地点に行くという

00:13:35.260 --> 00:13:38.260
問題を解決するだけでなく

00:13:38.260 --> 00:13:40.260
最良の次の地点を見つけるという問題も

00:13:40.260 --> 00:13:42.260
絶えず解決しているのです

00:13:42.260 --> 00:13:45.260
基本的には 最も情報の少ない場所を

00:13:45.260 --> 00:13:47.260
次の目的地にします

00:13:47.260 --> 00:13:50.260
そうして地図を埋めていくのです

00:13:50.260 --> 00:13:52.260
次にお見せするのが

00:13:52.260 --> 00:13:54.260
最後の例になります

00:13:54.260 --> 00:13:57.260
この技術には多くの応用があります

00:13:57.260 --> 00:13:59.260
教育者として私は教育に情熱がありますが

00:13:59.260 --> 00:14:01.260
このようなロボットは小中高の教育を

00:14:01.260 --> 00:14:03.260
大きく変えうると思っています

00:14:03.260 --> 00:14:05.260
しかし我々は今ロサンゼルスに近い

00:14:05.260 --> 00:14:07.260
南カリフォルニアにいるので

00:14:07.260 --> 00:14:09.260
エンターテインメント関係のもので

00:14:09.260 --> 00:14:11.260
締めくくることにしましょう

00:14:11.260 --> 00:14:13.260
ミュージックビデオを用意しました

00:14:13.260 --> 00:14:16.260
作者のアレックスとダニエルを

00:14:16.260 --> 00:14:18.260
ご紹介します

00:14:18.260 --> 00:14:25.260
(拍手)

00:14:25.260 --> 00:14:27.260
ビデオをご覧いただく前に

00:14:27.260 --> 00:14:30.260
彼らはクリスから直前に連絡をもらい この３日間で

00:14:30.260 --> 00:14:32.260
作り上げたことを言っておきたいと思います

00:14:32.260 --> 00:14:34.260
出てくるロボットは

00:14:34.260 --> 00:14:36.260
全く自律的に動いています

00:14:36.260 --> 00:14:39.260
９つのロボットが６種類の楽器を演奏します

00:14:39.260 --> 00:14:43.260
TED 2012のため特別に作ったものです

00:14:43.260 --> 00:14:46.260
ではご覧ください

00:15:19.260 --> 00:15:29.260
(音楽)

00:16:23.260 --> 00:16:40.260
(拍手)

