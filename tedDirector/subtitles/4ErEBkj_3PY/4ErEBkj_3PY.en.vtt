WEBVTT
Kind: captions
Language: en

00:00:20.566 --> 00:00:21.725
Good morning.

00:00:22.853 --> 00:00:27.006
I'm here today to talk
about autonomous flying beach balls.

00:00:27.030 --> 00:00:28.038
(Laughter)

00:00:28.062 --> 00:00:30.927
No, agile aerial robots like this one.

00:00:31.624 --> 00:00:35.084
I'd like to tell you a little bit
about the challenges in building these,

00:00:35.108 --> 00:00:38.500
and some of the terrific opportunities
for applying this technology.

00:00:38.957 --> 00:00:43.565
So these robots are related
to unmanned aerial vehicles.

00:00:44.199 --> 00:00:46.850
However, the vehicles
you see here are big.

00:00:47.318 --> 00:00:50.587
They weigh thousands of pounds,
are not by any means agile.

00:00:50.611 --> 00:00:52.236
They're not even autonomous.

00:00:52.886 --> 00:00:57.068
In fact, many of these vehicles
are operated by flight crews

00:00:57.092 --> 00:00:59.652
that can include multiple pilots,

00:00:59.676 --> 00:01:01.882
operators of sensors,

00:01:01.906 --> 00:01:03.236
and mission coordinators.

00:01:03.922 --> 00:01:06.665
What we're interested in
is developing robots like this --

00:01:06.689 --> 00:01:08.379
and here are two other pictures --

00:01:08.403 --> 00:01:11.086
of robots that you can buy off the shelf.

00:01:11.110 --> 00:01:14.394
So these are helicopters with four rotors,

00:01:14.418 --> 00:01:18.108
and they're roughly
a meter or so in scale,

00:01:18.132 --> 00:01:19.592
and weigh several pounds.

00:01:20.076 --> 00:01:23.431
And so we retrofit these
with sensors and processors,

00:01:23.455 --> 00:01:25.661
and these robots can fly indoors.

00:01:25.685 --> 00:01:27.004
Without GPS.

00:01:27.457 --> 00:01:29.345
The robot I'm holding in my hand

00:01:29.369 --> 00:01:31.019
is this one,

00:01:31.043 --> 00:01:34.186
and it's been created by two students,

00:01:34.210 --> 00:01:35.858
Alex and Daniel.

00:01:36.493 --> 00:01:39.608
So this weighs a little more
than a tenth of a pound.

00:01:39.632 --> 00:01:42.211
It consumes about 15 watts of power.

00:01:42.235 --> 00:01:45.068
And as you can see,
it's about eight inches in diameter.

00:01:46.330 --> 00:01:48.925
So let me give you
just a very quick tutorial

00:01:48.949 --> 00:01:50.615
on how these robots work.

00:01:51.043 --> 00:01:52.236
So it has four rotors.

00:01:52.260 --> 00:01:54.308
If you spin these rotors
at the same speed,

00:01:54.332 --> 00:01:55.531
the robot hovers.

00:01:56.420 --> 00:02:00.056
If you increase the speed
of each of these rotors,

00:02:00.080 --> 00:02:02.619
then the robot flies up,
it accelerates up.

00:02:02.643 --> 00:02:05.075
Of course, if the robot were tilted,

00:02:05.099 --> 00:02:06.409
inclined to the horizontal,

00:02:06.433 --> 00:02:09.236
then it would accelerate
in this direction.

00:02:09.686 --> 00:02:11.099
So to get it to tilt,

00:02:11.123 --> 00:02:13.216
there's one of two ways of doing it.

00:02:13.240 --> 00:02:16.876
So in this picture, you see
that rotor four is spinning faster

00:02:16.900 --> 00:02:18.868
and rotor two is spinning slower.

00:02:18.892 --> 00:02:20.452
And when that happens,

00:02:20.476 --> 00:02:23.527
there's a moment that causes
this robot to roll.

00:02:24.495 --> 00:02:25.750
And the other way around,

00:02:25.774 --> 00:02:31.353
if you increase the speed of rotor three
and decrease the speed of rotor one,

00:02:31.377 --> 00:02:33.236
then the robot pitches forward.

00:02:33.820 --> 00:02:34.988
And then finally,

00:02:35.012 --> 00:02:37.906
if you spin opposite pairs of rotors

00:02:37.930 --> 00:02:39.622
faster than the other pair,

00:02:39.646 --> 00:02:42.367
then the robot yaws
about the vertical axis.

00:02:42.391 --> 00:02:43.851
So an on-board processor

00:02:43.875 --> 00:02:47.182
essentially looks at what motions
need to be executed

00:02:47.206 --> 00:02:49.176
and combines these motions,

00:02:49.200 --> 00:02:52.310
and figures out what commands
to send to the motors --

00:02:52.334 --> 00:02:53.746
600 times a second.

00:02:53.770 --> 00:02:55.739
That's basically how this thing operates.

00:02:56.247 --> 00:02:58.389
So one of the advantages of this design

00:02:58.413 --> 00:03:00.312
is when you scale things down,

00:03:00.336 --> 00:03:02.654
the robot naturally becomes agile.

00:03:03.194 --> 00:03:07.257
So here, R is the characteristic
length of the robot.

00:03:07.281 --> 00:03:08.955
It's actually half the diameter.

00:03:09.595 --> 00:03:14.236
And there are lots of physical parameters
that change as you reduce R.

00:03:14.968 --> 00:03:17.599
The one that's most important
is the inertia,

00:03:17.623 --> 00:03:19.544
or the resistance to motion.

00:03:19.568 --> 00:03:24.044
So it turns out the inertia,
which governs angular motion,

00:03:24.068 --> 00:03:26.668
scales as a fifth power of R.

00:03:27.046 --> 00:03:28.742
So the smaller you make R,

00:03:28.766 --> 00:03:31.083
the more dramatically the inertia reduces.

00:03:31.956 --> 00:03:34.891
So as a result, the angular acceleration,

00:03:34.915 --> 00:03:36.954
denoted by the Greek letter alpha here,

00:03:36.978 --> 00:03:38.597
goes as 1 over R.

00:03:38.621 --> 00:03:40.350
It's inversely proportional to R.

00:03:40.374 --> 00:03:43.144
The smaller you make it,
the more quickly you can turn.

00:03:44.219 --> 00:03:46.180
So this should be clear in these videos.

00:03:46.204 --> 00:03:50.663
On the bottom right, you see a robot
performing a 360-degree flip

00:03:50.687 --> 00:03:52.235
in less than half a second.

00:03:52.656 --> 00:03:55.236
Multiple flips, a little more time.

00:03:56.259 --> 00:03:58.140
So here the processes on board

00:03:58.164 --> 00:04:01.348
are getting feedback from accelerometers
and gyros on board,

00:04:01.372 --> 00:04:03.490
and calculating, like I said before,

00:04:03.514 --> 00:04:05.323
commands at 600 times a second,

00:04:05.347 --> 00:04:07.236
to stabilize this robot.

00:04:07.607 --> 00:04:10.957
So on the left, you see Daniel
throwing this robot up into the air,

00:04:10.981 --> 00:04:13.008
and it shows you
how robust the control is.

00:04:13.032 --> 00:04:14.342
No matter how you throw it,

00:04:14.366 --> 00:04:17.278
the robot recovers and comes back to him.

00:04:18.881 --> 00:04:20.658
So why build robots like this?

00:04:21.079 --> 00:04:23.650
Well, robots like this
have many applications.

00:04:24.198 --> 00:04:26.669
You can send them
inside buildings like this,

00:04:26.693 --> 00:04:30.280
as first responders to look for intruders,

00:04:30.304 --> 00:04:33.605
maybe look for biochemical leaks,

00:04:33.629 --> 00:04:34.780
gaseous leaks.

00:04:35.102 --> 00:04:38.816
You can also use them
for applications like construction.

00:04:38.840 --> 00:04:43.364
So here are robots carrying beams, columns

00:04:43.388 --> 00:04:45.236
and assembling cube-like structures.

00:04:45.260 --> 00:04:47.316
I'll tell you a little bit
more about this.

00:04:48.695 --> 00:04:51.236
The robots can be used
for transporting cargo.

00:04:51.583 --> 00:04:54.696
So one of the problems
with these small robots

00:04:54.720 --> 00:04:56.721
is their payload-carrying capacity.

00:04:56.745 --> 00:04:59.762
So you might want to have
multiple robots carry payloads.

00:05:00.746 --> 00:05:03.101
This is a picture of a recent
experiment we did --

00:05:03.125 --> 00:05:04.720
actually not so recent anymore --

00:05:04.744 --> 00:05:07.236
in Sendai, shortly after the earthquake.

00:05:07.938 --> 00:05:11.129
So robots like this could be sent
into collapsed buildings,

00:05:11.153 --> 00:05:14.044
to assess the damage
after natural disasters,

00:05:14.068 --> 00:05:15.650
or sent into reactor buildings,

00:05:15.674 --> 00:05:17.293
to map radiation levels.

00:05:19.583 --> 00:05:23.104
So one fundamental problem
that the robots have to solve

00:05:23.128 --> 00:05:24.707
if they are to be autonomous,

00:05:24.731 --> 00:05:28.236
is essentially figuring out how to get
from point A to point B.

00:05:28.937 --> 00:05:30.604
So this gets a little challenging,

00:05:30.628 --> 00:05:33.635
because the dynamics of this robot
are quite complicated.

00:05:33.659 --> 00:05:36.151
In fact, they live
in a 12-dimensional space.

00:05:36.524 --> 00:05:37.968
So we use a little trick.

00:05:37.992 --> 00:05:41.405
We take this curved 12-dimensional space,

00:05:41.429 --> 00:05:45.323
and transform it into a flat,
four-dimensional space.

00:05:45.347 --> 00:05:48.418
And that four-dimensional space
consists of X, Y, Z,

00:05:48.442 --> 00:05:49.854
and then the yaw angle.

00:05:49.878 --> 00:05:51.236
And so what the robot does,

00:05:51.260 --> 00:05:55.236
is it plans what we call
a minimum-snap trajectory.

00:05:56.209 --> 00:05:57.606
So to remind you of physics:

00:05:57.630 --> 00:05:59.684
You have position, derivative, velocity;

00:05:59.708 --> 00:06:01.564
then acceleration;

00:06:01.588 --> 00:06:03.689
and then comes jerk,

00:06:03.713 --> 00:06:05.133
and then comes snap.

00:06:05.578 --> 00:06:08.030
So this robot minimizes snap.

00:06:08.800 --> 00:06:10.236
So what that effectively does,

00:06:10.260 --> 00:06:12.884
is produce a smooth and graceful motion.

00:06:12.908 --> 00:06:15.750
And it does that avoiding obstacles.

00:06:16.313 --> 00:06:19.876
So these minimum-snap trajectories
in this flat space are then transformed

00:06:19.900 --> 00:06:23.225
back into this complicated
12-dimensional space,

00:06:23.249 --> 00:06:26.235
which the robot must do
for control and then execution.

00:06:26.749 --> 00:06:28.289
So let me show you some examples

00:06:28.313 --> 00:06:31.090
of what these minimum-snap
trajectories look like.

00:06:31.114 --> 00:06:32.265
And in the first video,

00:06:32.289 --> 00:06:35.018
you'll see the robot going
from point A to point B,

00:06:35.042 --> 00:06:36.665
through an intermediate point.

00:06:36.990 --> 00:06:39.720
(Whirring noise)

00:06:43.377 --> 00:06:46.998
So the robot is obviously capable
of executing any curve trajectory.

00:06:47.022 --> 00:06:48.736
So these are circular trajectories,

00:06:48.760 --> 00:06:51.260
where the robot pulls about two G's.

00:06:52.844 --> 00:06:56.546
Here you have overhead
motion capture cameras on the top

00:06:56.570 --> 00:06:59.776
that tell the robot where it is
100 times a second.

00:06:59.800 --> 00:07:02.236
It also tells the robot
where these obstacles are.

00:07:03.140 --> 00:07:04.696
And the obstacles can be moving.

00:07:04.720 --> 00:07:07.847
And here, you'll see Daniel
throw this hoop into the air,

00:07:07.871 --> 00:07:10.530
while the robot is calculating
the position of the hoop,

00:07:10.554 --> 00:07:13.434
and trying to figure out how to best
go through the hoop.

00:07:14.002 --> 00:07:15.236
So as an academic,

00:07:15.260 --> 00:07:17.788
we're always trained to be able
to jump through hoops

00:07:17.812 --> 00:07:19.297
to raise funding for our labs,

00:07:19.321 --> 00:07:21.236
and we get our robots to do that.

00:07:21.260 --> 00:07:27.625
(Applause)

00:07:28.524 --> 00:07:30.135
So another thing the robot can do

00:07:30.159 --> 00:07:32.236
is it remembers pieces of trajectory

00:07:32.260 --> 00:07:35.164
that it learns or is pre-programmed.

00:07:35.466 --> 00:07:40.236
So here, you see the robot combining
a motion that builds up momentum,

00:07:40.260 --> 00:07:43.236
and then changes its orientation
and then recovers.

00:07:44.004 --> 00:07:46.964
So it has to do this
because this gap in the window

00:07:46.988 --> 00:07:50.446
is only slightly larger
than the width of the robot.

00:07:51.050 --> 00:07:53.803
So just like a diver
stands on a springboard

00:07:53.827 --> 00:07:56.280
and then jumps off it to gain momentum,

00:07:56.304 --> 00:07:59.533
and then does this pirouette,
this two and a half somersault through

00:07:59.557 --> 00:08:00.959
and then gracefully recovers,

00:08:00.983 --> 00:08:02.681
this robot is basically doing that.

00:08:02.705 --> 00:08:05.785
So it knows how to combine
little bits and pieces of trajectories

00:08:05.809 --> 00:08:08.808
to do these fairly difficult tasks.

00:08:10.018 --> 00:08:11.236
So I want change gears.

00:08:11.260 --> 00:08:15.099
So one of the disadvantages
of these small robots is its size.

00:08:15.654 --> 00:08:16.806
And I told you earlier

00:08:16.830 --> 00:08:19.179
that we may want to employ
lots and lots of robots

00:08:19.203 --> 00:08:21.236
to overcome the limitations of size.

00:08:22.010 --> 00:08:23.584
So one difficulty is:

00:08:23.608 --> 00:08:26.401
How do you coordinate
lots of these robots?

00:08:26.425 --> 00:08:28.236
And so here, we looked to nature.

00:08:28.544 --> 00:08:33.152
So I want to show you a clip
of Aphaenogaster desert ants,

00:08:33.176 --> 00:08:36.564
in Professor Stephen Pratt's lab,
carrying an object.

00:08:36.588 --> 00:08:38.303
So this is actually a piece of fig.

00:08:38.327 --> 00:08:40.727
Actually you take any object
coated with fig juice,

00:08:40.751 --> 00:08:42.842
and the ants will carry it
back to the nest.

00:08:42.866 --> 00:08:46.035
So these ants don't have
any central coordinator.

00:08:46.487 --> 00:08:48.034
They sense their neighbors.

00:08:48.058 --> 00:08:50.343
There's no explicit communication.

00:08:50.367 --> 00:08:52.106
But because they sense the neighbors

00:08:52.130 --> 00:08:53.906
and because they sense the object,

00:08:53.930 --> 00:08:56.760
they have implicit coordination
across the group.

00:08:57.474 --> 00:09:00.894
So this is the kind of coordination
we want our robots to have.

00:09:01.569 --> 00:09:06.347
So when we have a robot
which is surrounded by neighbors --

00:09:06.371 --> 00:09:08.600
and let's look at robot I and robot J --

00:09:08.624 --> 00:09:10.172
what we want the robots to do,

00:09:10.196 --> 00:09:12.307
is to monitor the separation between them,

00:09:12.331 --> 00:09:14.236
as they fly in formation.

00:09:14.537 --> 00:09:16.018
And then you want to make sure

00:09:16.042 --> 00:09:18.946
that this separation
is within acceptable levels.

00:09:19.303 --> 00:09:21.771
So again, the robots monitor this error

00:09:21.795 --> 00:09:25.944
and calculate the control commands
100 times a second,

00:09:25.968 --> 00:09:27.991
which then translates into motor commands,

00:09:28.015 --> 00:09:29.230
600 times a second.

00:09:29.254 --> 00:09:32.476
So this also has to be done
in a decentralized way.

00:09:32.785 --> 00:09:35.119
Again, if you have
lots and lots of robots,

00:09:35.143 --> 00:09:38.420
it's impossible to coordinate
all this information centrally

00:09:38.444 --> 00:09:41.621
fast enough in order for the robots
to accomplish the task.

00:09:41.645 --> 00:09:45.993
Plus, the robots have to base
their actions only on local information --

00:09:46.017 --> 00:09:48.136
what they sense from their neighbors.

00:09:48.160 --> 00:09:49.546
And then finally,

00:09:49.570 --> 00:09:53.670
we insist that the robots be agnostic
to who their neighbors are.

00:09:53.694 --> 00:09:55.811
So this is what we call anonymity.

00:09:57.258 --> 00:10:03.675
So what I want to show you next
is a video of 20 of these little robots,

00:10:03.699 --> 00:10:05.236
flying in formation.

00:10:06.144 --> 00:10:09.040
They're monitoring
their neighbors' positions.

00:10:09.064 --> 00:10:10.966
They're maintaining formation.

00:10:10.990 --> 00:10:12.770
The formations can change.

00:10:12.794 --> 00:10:14.473
They can be planar formations,

00:10:14.497 --> 00:10:16.600
they can be three-dimensional formations.

00:10:17.331 --> 00:10:18.672
As you can see here,

00:10:18.696 --> 00:10:22.383
they collapse from a three-dimensional
formation into planar formation.

00:10:22.407 --> 00:10:23.938
And to fly through obstacles,

00:10:23.962 --> 00:10:26.914
they can adapt the formations on the fly.

00:10:28.026 --> 00:10:30.489
So again, these robots come
really close together.

00:10:30.513 --> 00:10:32.901
As you can see
in this figure-eight flight,

00:10:32.925 --> 00:10:34.909
they come within inches of each other.

00:10:35.377 --> 00:10:39.694
And despite the aerodynamic interactions
with these propeller blades,

00:10:39.718 --> 00:10:41.866
they're able to maintain stable flight.

00:10:41.890 --> 00:10:48.786
(Applause)

00:10:49.246 --> 00:10:51.245
So once you know how to fly in formation,

00:10:51.269 --> 00:10:53.485
you can actually pick up
objects cooperatively.

00:10:53.509 --> 00:10:58.086
So this just shows that we can
double, triple, quadruple

00:10:58.110 --> 00:10:59.268
the robots' strength,

00:10:59.292 --> 00:11:02.369
by just getting them to team
with neighbors, as you can see here.

00:11:02.393 --> 00:11:06.535
One of the disadvantages of doing that is,
as you scale things up --

00:11:06.559 --> 00:11:09.123
so if you have lots of robots
carrying the same thing,

00:11:09.147 --> 00:11:11.867
you're essentially increasing the inertia,

00:11:11.891 --> 00:11:14.510
and therefore you pay a price;
they're not as agile.

00:11:14.978 --> 00:11:18.074
But you do gain in terms
of payload-carrying capacity.

00:11:18.098 --> 00:11:21.313
Another application I want to show you --
again, this is in our lab.

00:11:21.337 --> 00:11:24.502
This is work done by Quentin Lindsey,
who's a graduate student.

00:11:24.526 --> 00:11:27.146
So his algorithm essentially
tells these robots

00:11:27.170 --> 00:11:31.242
how to autonomously build cubic structures

00:11:31.266 --> 00:11:33.236
from truss-like elements.

00:11:34.441 --> 00:11:38.201
So his algorithm tells the robot
what part to pick up,

00:11:38.225 --> 00:11:40.050
when, and where to place it.

00:11:40.471 --> 00:11:41.954
So in this video you see --

00:11:41.978 --> 00:11:44.002
and it's sped up 10, 14 times --

00:11:44.026 --> 00:11:47.115
you see three different structures
being built by these robots.

00:11:47.139 --> 00:11:49.165
And again, everything is autonomous,

00:11:49.189 --> 00:11:50.472
and all Quentin has to do

00:11:50.496 --> 00:11:54.431
is to give them a blueprint
of the design that he wants to build.

00:11:56.925 --> 00:11:59.736
So all these experiments
you've seen thus far,

00:11:59.760 --> 00:12:01.110
all these demonstrations,

00:12:01.134 --> 00:12:04.236
have been done with the help
of motion-capture systems.

00:12:05.029 --> 00:12:07.536
So what happens when you leave your lab,

00:12:07.560 --> 00:12:09.597
and you go outside into the real world?

00:12:09.922 --> 00:12:11.628
And what if there's no GPS?

00:12:12.755 --> 00:12:17.092
So this robot is actually
equipped with a camera,

00:12:17.116 --> 00:12:19.489
and a laser rangefinder, laser scanner.

00:12:20.140 --> 00:12:24.060
And it uses these sensors
to build a map of the environment.

00:12:24.084 --> 00:12:27.370
What that map consists of are features --

00:12:27.394 --> 00:12:31.265
like doorways, windows,
people, furniture --

00:12:31.289 --> 00:12:33.432
and it then figures out
where its position is,

00:12:33.456 --> 00:12:34.857
with respect to the features.

00:12:34.881 --> 00:12:37.091
So there is no global coordinate system.

00:12:37.115 --> 00:12:39.621
The coordinate system
is defined based on the robot,

00:12:39.645 --> 00:12:41.702
where it is and what it's looking at.

00:12:42.575 --> 00:12:45.330
And it navigates with respect
to those features.

00:12:46.316 --> 00:12:47.736
So I want to show you a clip

00:12:47.760 --> 00:12:51.712
of algorithms developed by Frank Shen
and Professor Nathan Michael,

00:12:51.736 --> 00:12:55.505
that shows this robot entering
a building for the very first time,

00:12:55.529 --> 00:12:57.951
and creating this map on the fly.

00:12:58.642 --> 00:13:01.800
So the robot then figures out
what the features are,

00:13:01.824 --> 00:13:02.975
it builds the map,

00:13:02.999 --> 00:13:05.966
it figures out where it is
with respect to the features,

00:13:05.990 --> 00:13:09.938
and then estimates its position
100 times a second,

00:13:09.962 --> 00:13:13.780
allowing us to use the control algorithms
that I described to you earlier.

00:13:13.804 --> 00:13:18.237
So this robot is actually being
commanded remotely by Frank,

00:13:18.261 --> 00:13:21.800
but the robot can also figure out
where to go on its own.

00:13:22.125 --> 00:13:24.332
So suppose I were to send
this into a building,

00:13:24.356 --> 00:13:26.658
and I had no idea
what this building looked like.

00:13:26.682 --> 00:13:28.126
I can ask this robot to go in,

00:13:28.150 --> 00:13:30.054
create a map,

00:13:30.078 --> 00:13:32.943
and then come back and tell me
what the building looks like.

00:13:32.967 --> 00:13:36.135
So here, the robot is not
only solving the problem

00:13:36.159 --> 00:13:38.793
of how to go from point A
to point B in this map,

00:13:38.817 --> 00:13:43.216
but it's figuring out what the best
point B is at every time.

00:13:43.240 --> 00:13:45.294
So essentially it knows where to go

00:13:45.318 --> 00:13:48.103
to look for places that have
the least information,

00:13:48.127 --> 00:13:50.095
and that's how it populates this map.

00:13:50.944 --> 00:13:53.942
So I want to leave you
with one last application.

00:13:54.982 --> 00:13:57.506
And there are many applications
of this technology.

00:13:57.823 --> 00:14:00.371
I'm a professor, and we're
passionate about education.

00:14:00.395 --> 00:14:04.331
Robots like this can really change
the way we do K-12 education.

00:14:04.355 --> 00:14:06.180
But we're in Southern California,

00:14:06.204 --> 00:14:08.037
close to Los Angeles,

00:14:08.061 --> 00:14:11.311
so I have to conclude with something
focused on entertainment.

00:14:12.407 --> 00:14:14.241
I want to conclude with a music video.

00:14:14.265 --> 00:14:18.979
I want to introduce the creators,
Alex and Daniel, who created this video.

00:14:19.003 --> 00:14:25.881
(Applause)

00:14:25.905 --> 00:14:27.339
So before I play this video,

00:14:27.363 --> 00:14:30.560
I want to tell you that they created it
in the last three days,

00:14:30.584 --> 00:14:32.236
after getting a call from Chris.

00:14:32.743 --> 00:14:36.560
And the robots that play in the video
are completely autonomous.

00:14:36.584 --> 00:14:40.086
You will see nine robots
play six different instruments.

00:14:40.697 --> 00:14:43.668
And of course, it's made
exclusively for TED 2012.

00:14:44.533 --> 00:14:45.685
Let's watch.

00:14:46.824 --> 00:14:51.228
(Sound of air escaping from valve)

00:14:53.547 --> 00:14:56.883
(Music)

00:14:56.907 --> 00:15:02.427
(Whirring sound)

00:15:19.442 --> 00:15:26.071
(Music)

00:16:24.029 --> 00:16:30.013
(Applause) (Cheers)

