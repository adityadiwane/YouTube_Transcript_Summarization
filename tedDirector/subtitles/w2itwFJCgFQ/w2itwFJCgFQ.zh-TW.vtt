WEBVTT
Kind: captions
Language: zh-TW

00:00:00.000 --> 00:00:07.000
譯者: Allen Li
審譯者: NAN-KUN WU

00:00:23.307 --> 00:00:26.491
機器的運動能力好是什麼意思？

00:00:26.491 --> 00:00:29.908
我們將展示機器運動能力的概念

00:00:29.908 --> 00:00:31.628
以及為了實現而進行的研究

00:00:31.628 --> 00:00:34.139
靠的是這些飛行機器，叫做
「四軸飛行器」 (quadrocopters)

00:00:34.139 --> 00:00:36.026
簡稱為「四軸」

00:00:38.034 --> 00:00:40.563
四軸已經存在很久了

00:00:40.563 --> 00:00:42.162
最近很受歡迎的原因

00:00:42.162 --> 00:00:44.127
是因為在機械方面很簡單

00:00:44.127 --> 00:00:46.235
只要控制這四個螺旋槳的速度

00:00:46.235 --> 00:00:49.283
這些機器可以側滾，俯仰，偏擺

00:00:49.283 --> 00:00:52.108
以及沿著共同方向加速

00:00:52.108 --> 00:00:55.179
上面還有電池及一台電腦

00:00:55.179 --> 00:00:59.133
各種感測器和無線收發器

00:00:59.133 --> 00:01:03.762
四軸極為靈活，但要付出代價

00:01:03.762 --> 00:01:06.754
它本質上不穩定，需要某種形式的

00:01:06.754 --> 00:01:10.726
自動回饋控制，才可能飛行

00:01:16.259 --> 00:01:19.497
要怎麼做到這點呢？

00:01:19.497 --> 00:01:21.315
天花板上的攝影機
和一台筆記型電腦

00:01:21.315 --> 00:01:23.891
就像是室內的全球定位系統

00:01:23.891 --> 00:01:26.076
用來為物體在空間中定位

00:01:26.076 --> 00:01:28.603
物體上有這些反光標記

00:01:28.603 --> 00:01:30.664
定位資料送到另一台筆記型電腦

00:01:30.664 --> 00:01:32.875
執行估計與控制的演算法

00:01:32.875 --> 00:01:34.761
再反過來把命令送到四軸

00:01:34.761 --> 00:01:38.246
四軸本身也在執行
估計與控制的演算法

00:01:41.620 --> 00:01:44.130
我們的研究大部分都是演算法

00:01:44.130 --> 00:01:48.291
演算法是使這些機器活過來的魔法

00:01:48.291 --> 00:01:50.334
要怎麼設計演算法

00:01:50.334 --> 00:01:52.611
才能創造出機器運動員？

00:01:52.611 --> 00:01:55.491
我們使用的方法
泛稱為模型化基礎設計

00:01:55.491 --> 00:01:58.645
我們首先用數學模型捕捉

00:01:58.645 --> 00:02:00.779
機器行為的物理法則

00:02:00.779 --> 00:02:03.076
然後用數學的一個分支—

00:02:03.076 --> 00:02:05.907
「控制理論」來分析這些模型

00:02:05.907 --> 00:02:09.820
並合成控制的演算法

00:02:09.820 --> 00:02:12.868
例如我們想讓四軸原地懸停

00:02:12.868 --> 00:02:14.276
我們首先捕捉動態

00:02:14.276 --> 00:02:16.182
是一組微分方程式

00:02:16.182 --> 00:02:18.531
然後操縱這些方程式

00:02:18.531 --> 00:02:23.171
在控制理論建立的演算法幫忙下
讓四軸得以穩定

00:02:23.171 --> 00:02:26.117
讓我展示這種方法的優點

00:02:29.198 --> 00:02:31.747
假設我們希望四軸不止是懸停

00:02:31.747 --> 00:02:34.529
還要讓桿子平衡

00:02:34.529 --> 00:02:36.373
經過一些練習

00:02:36.373 --> 00:02:38.764
人類很容易可以做到

00:02:38.764 --> 00:02:40.519
雖然我們有優勢

00:02:40.519 --> 00:02:41.847
雙腳可以著地

00:02:41.847 --> 00:02:44.804
還有極為靈活的手

00:02:44.804 --> 00:02:47.273
像這樣就有點困難：

00:02:47.273 --> 00:02:49.569
如果只有一腳著地

00:02:49.569 --> 00:02:52.368
而且不准用手

00:02:52.368 --> 00:02:55.319
請注意，桿子頂上有反光標記

00:02:55.319 --> 00:02:59.213
表示可在空間中定到它的位置

00:03:04.971 --> 00:03:10.947
（掌聲）

00:03:10.947 --> 00:03:13.773
你可以看到，這架四軸正進行微調

00:03:13.773 --> 00:03:15.968
以讓桿子保持平衡

00:03:15.968 --> 00:03:19.027
我們是怎麼設計演算法來做到的？

00:03:19.027 --> 00:03:21.132
我們加入了桿子的數學模型

00:03:21.132 --> 00:03:22.651
到四軸中

00:03:22.651 --> 00:03:25.605
一旦我們有了
結合四軸與桿子的模型

00:03:25.605 --> 00:03:30.538
就可以用控制理論
建立控制的演算法

00:03:30.538 --> 00:03:32.126
這裡，你看，很穩定

00:03:32.126 --> 00:03:34.819
就算我輕輕推一下

00:03:34.819 --> 00:03:40.222
它仍可回到完全平衡的位置

00:03:40.222 --> 00:03:41.885
我們還可以加強模型，以包括

00:03:41.885 --> 00:03:44.326
我們希望四軸在空間的位置

00:03:44.326 --> 00:03:47.395
用這根有反光標記的指示棒

00:03:47.395 --> 00:03:49.619
可以指出我要四軸到的位置

00:03:49.619 --> 00:03:52.986
和我保持固定的距離

00:04:07.763 --> 00:04:10.665
這些特技動作的關鍵是演算法

00:04:10.665 --> 00:04:13.091
它的設計要靠數學模型

00:04:13.091 --> 00:04:15.041
與控制理論

00:04:15.041 --> 00:04:17.255
我要告訴四軸回來這裡

00:04:17.255 --> 00:04:19.074
並讓桿子倒下來

00:04:19.074 --> 00:04:20.992
接下來我要展示

00:04:20.992 --> 00:04:23.111
了解物理模型、

00:04:23.111 --> 00:04:27.231
以及實體世界運作的重要性

00:04:37.462 --> 00:04:39.232
注意四軸的高度降低了

00:04:39.232 --> 00:04:41.314
我把這杯水放上去

00:04:41.314 --> 00:04:44.115
不像平衡桿，我並未把玻璃杯

00:04:44.115 --> 00:04:46.699
的數學模型加到系統裡

00:04:46.699 --> 00:04:49.618
事實上，系統根本不知道有杯水

00:04:49.618 --> 00:04:52.910
我一樣可以用指示棒來告訴四軸

00:04:52.910 --> 00:04:55.499
我希望它在空間中的位置

00:04:55.499 --> 00:05:05.096
（掌聲）

00:05:05.096 --> 00:05:07.206
好吧，你應該問自己

00:05:07.206 --> 00:05:09.715
為什麼杯中的水不會灑出來？

00:05:09.715 --> 00:05:12.926
兩個事實：第一點是重力

00:05:12.926 --> 00:05:15.051
對所有的物體作用相同

00:05:15.051 --> 00:05:17.515
第二點是，推進器都指向

00:05:17.515 --> 00:05:20.642
和杯子相同的方向，也就是向上

00:05:20.642 --> 00:05:23.019
兩個原因加在一起，最終結果是

00:05:23.019 --> 00:05:25.306
玻璃杯各方向的側向力都很小

00:05:25.306 --> 00:05:28.091
還是以空氣動力學效應為主

00:05:28.091 --> 00:05:31.932
因此這些速度是微不足道的

00:05:35.336 --> 00:05:37.407
這就是為什麼不需要杯子的模型

00:05:37.407 --> 00:05:41.255
水自然不會灑出來
不管四軸怎麼動

00:05:50.651 --> 00:05:57.702
（掌聲）

00:05:57.702 --> 00:06:01.718
這裡學到的是，有些高性能任務

00:06:01.718 --> 00:06:03.115
比其他的容易

00:06:03.115 --> 00:06:05.411
還有，理解問題背後的物理

00:06:05.411 --> 00:06:08.027
可告訴我們哪些容易、哪些困難

00:06:08.027 --> 00:06:10.386
以此為例，載運水很容易

00:06:10.386 --> 00:06:14.171
平衡桿子則很困難

00:06:14.171 --> 00:06:15.973
我們都聽過運動員的故事

00:06:15.973 --> 00:06:18.466
雖然身體受傷，仍然完成壯舉

00:06:18.466 --> 00:06:19.985
機器可以在

00:06:19.985 --> 00:06:22.636
受重傷的情況下運作嗎？

00:06:22.636 --> 00:06:24.362
傳統觀念認為，你需要

00:06:24.362 --> 00:06:28.052
至少四個固定的馬達螺旋槳才能飛

00:06:28.052 --> 00:06:30.164
因為有四個自由度要控制：

00:06:30.164 --> 00:06:33.192
側滾、俯仰、偏擺、加速

00:06:33.192 --> 00:06:36.437
六軸和八軸分別有六和八個螺旋槳

00:06:36.437 --> 00:06:37.920
可提供冗餘

00:06:37.920 --> 00:06:39.909
但四軸則普及多了

00:06:39.909 --> 00:06:41.724
因為它具有最小數目的

00:06:41.724 --> 00:06:44.200
固定馬達螺旋槳：四個

00:06:44.200 --> 00:06:46.165
是這樣嗎？

00:07:01.476 --> 00:07:04.076
我們分析這台機器的數學模型

00:07:04.076 --> 00:07:06.252
如果只有兩個螺旋槳可運作

00:07:06.252 --> 00:07:13.008
我們發現有種非傳統的方式可飛行

00:07:19.980 --> 00:07:21.686
我們放棄控制偏擺

00:07:21.686 --> 00:07:24.756
仍然可以控制側滾、俯仰、加速

00:07:24.756 --> 00:07:30.208
只要演算法能處理這種新配置

00:07:33.668 --> 00:07:36.100
數學模型告訴我們何時

00:07:36.100 --> 00:07:38.172
和為何這是可能的

00:07:38.172 --> 00:07:40.540
此例中，這種知識讓我們能設計出

00:07:40.540 --> 00:07:42.796
新穎的機器架構

00:07:42.796 --> 00:07:46.972
或優雅應對損害的巧妙演算法

00:07:46.972 --> 00:07:48.696
就像人類運動員

00:07:48.696 --> 00:07:52.519
而不必建構具有冗餘的機器

00:07:52.519 --> 00:07:54.631
我們不禁屏住呼吸

00:07:54.631 --> 00:07:57.068
當我們看到跳水選手
翻個筋斗入水、

00:07:57.068 --> 00:07:58.858
或撐竿跳選手在空中扭轉、

00:07:58.858 --> 00:08:00.576
同時快速接近地面

00:08:00.576 --> 00:08:03.144
跳水選手入水時能否成功壓水花？

00:08:03.144 --> 00:08:05.144
撐竿跳選手能否完美著地？

00:08:05.144 --> 00:08:06.812
假設我們希望四軸

00:08:06.812 --> 00:08:09.263
表演三轉空翻，並結束在

00:08:09.263 --> 00:08:11.532
開始的同一地點

00:08:11.532 --> 00:08:13.879
這個動作太快了

00:08:13.879 --> 00:08:17.508
無法用位置回饋信號
糾正執行過程中的動作

00:08:17.508 --> 00:08:19.782
時間根本不夠

00:08:19.782 --> 00:08:23.476
相反的，四軸只能盲目進行動作

00:08:23.476 --> 00:08:25.708
觀察四軸如何完成動作

00:08:25.708 --> 00:08:28.132
再用這些資訊來修改行為

00:08:28.132 --> 00:08:30.421
讓下次空翻更進步

00:08:30.421 --> 00:08:32.233
就像跳水選手和撐竿跳選手

00:08:32.233 --> 00:08:34.152
只有通過反覆練習

00:08:34.152 --> 00:08:36.077
才能學會動作

00:08:36.077 --> 00:08:38.210
並達到最完美的境界

00:08:46.412 --> 00:08:51.164
（掌聲）

00:08:51.164 --> 00:08:54.636
打擊移動中的球
對許多運動是必要技能

00:08:54.636 --> 00:08:56.431
我們如何讓一台機器做出

00:08:56.431 --> 00:09:00.184
對運動員看似毫不費力的動作？

00:09:15.943 --> 00:09:22.542
（掌聲）

00:09:22.542 --> 00:09:25.192
這架四軸頂部綁了個球拍

00:09:25.192 --> 00:09:28.679
甜蜜點大約一個蘋果大小
所以不會太大

00:09:28.679 --> 00:09:31.846
以下的計算每二十毫秒執行一次

00:09:31.846 --> 00:09:33.602
也就是每秒執行五十次

00:09:33.602 --> 00:09:36.414
我們首先弄清楚球會飛到哪裡

00:09:36.414 --> 00:09:38.851
然後計算四軸如何擊中球

00:09:38.851 --> 00:09:41.950
四軸飛到球丟出的附近

00:09:41.950 --> 00:09:46.406
第三，規劃出四軸由目前位置

00:09:46.406 --> 00:09:49.430
到擊球位置的軌道

00:09:49.430 --> 00:09:53.239
第四，只需執行這戰略二十毫秒

00:09:53.239 --> 00:09:56.046
二十毫秒過後，再重複整個過程

00:09:56.046 --> 00:09:58.289
直到四軸擊中球

00:10:07.560 --> 00:10:10.206
（掌聲）

00:10:10.206 --> 00:10:13.578
機器不僅可以自主執行動態操作

00:10:13.578 --> 00:10:15.441
還可以互相合作

00:10:15.441 --> 00:10:19.028
這三架四軸合作張開網子

00:10:28.574 --> 00:10:33.985
（掌聲）

00:10:33.985 --> 00:10:36.182
它們執行的，是非常動態

00:10:36.182 --> 00:10:38.350
且需要合作的動作

00:10:38.350 --> 00:10:40.042
把球丟回給我

00:10:40.042 --> 00:10:43.553
請注意的，在完全伸展時
這些四軸是垂直的

00:10:48.486 --> 00:10:50.258
（掌聲）

00:10:50.258 --> 00:10:52.545
事實上，在完全伸展時

00:10:52.545 --> 00:10:55.230
大約產生五倍於高空彈跳

00:10:55.230 --> 00:10:59.818
最低點的力量

00:11:03.009 --> 00:11:05.686
做到這點的演算法非常相似於

00:11:05.686 --> 00:11:09.070
單一四軸把球打回我身邊

00:11:09.070 --> 00:11:11.934
使用數學模型不斷重新規劃

00:11:11.934 --> 00:11:16.449
合作策略，每秒五十次

00:11:16.449 --> 00:11:18.326
到目前為止，我們看到的一切

00:11:18.326 --> 00:11:20.789
都是關於機器及其功能

00:11:20.789 --> 00:11:23.804
我們若把這台機器的運動能力

00:11:23.804 --> 00:11:25.580
和人結合，會發生什麼事？

00:11:25.580 --> 00:11:29.385
在我面前的是一具
商業的人體動作感測器

00:11:29.385 --> 00:11:30.694
主要用於遊戲
(Kinect)

00:11:30.694 --> 00:11:32.498
可以即時識別我身體

00:11:32.498 --> 00:11:34.546
各部位的動作

00:11:34.546 --> 00:11:36.662
就像剛才我用指示棒

00:11:36.662 --> 00:11:39.454
我們可用這個作為系統的輸入

00:11:39.454 --> 00:11:41.850
我們就有了自然的互動方式

00:11:41.850 --> 00:11:46.794
用我的手勢和四軸的
原始運動能力互動

00:12:22.453 --> 00:12:26.853
（掌聲）

00:12:35.982 --> 00:12:39.989
互動不一定是虛擬
也可以是實體的

00:12:39.989 --> 00:12:41.714
以此四軸為例

00:12:41.714 --> 00:12:44.342
它試著要待在空間裡固定的一點

00:12:44.342 --> 00:12:48.179
如果我試著將它移開，它會抵抗

00:12:48.179 --> 00:12:52.334
並移回它想待的地方

00:12:52.334 --> 00:12:55.373
但我們可以改變這種行為

00:12:55.373 --> 00:12:57.072
我們可以用數學模型

00:12:57.072 --> 00:13:00.205
估算出我對四軸施力的大小

00:13:00.205 --> 00:13:03.443
一旦知道了力量大小
我們也可以改變物理規則

00:13:03.443 --> 00:13:07.942
當然是對四軸而言

00:13:07.942 --> 00:13:10.205
這架四軸的行為就好像它

00:13:10.205 --> 00:13:14.570
在黏性流體中一樣

00:13:14.570 --> 00:13:16.744
我們現在有了親密的方式

00:13:16.744 --> 00:13:18.593
可與機器互動

00:13:18.593 --> 00:13:21.099
我要用這新功能
把載著相機的四軸

00:13:21.099 --> 00:13:23.676
定位到適當位置

00:13:23.676 --> 00:13:26.862
以拍攝接下來的示範

00:13:36.222 --> 00:13:38.990
我們可以與四軸進行實體互動

00:13:38.990 --> 00:13:41.393
我們也可以改變物理定律

00:13:41.393 --> 00:13:43.706
讓我們來玩一下

00:13:43.706 --> 00:13:45.410
接下來你會看到這些四軸

00:13:45.410 --> 00:13:48.906
一開始像是在冥王星的引力

00:13:48.906 --> 00:13:51.218
隨著時間過去，重力逐漸增加

00:13:51.218 --> 00:13:53.338
直到全都回到地球的引力

00:13:53.338 --> 00:13:55.057
但我保證不會發生

00:13:55.057 --> 00:13:58.558
好的，開始

00:14:05.667 --> 00:14:09.079
（笑聲）

00:14:34.778 --> 00:14:37.986
（笑聲）

00:14:37.986 --> 00:14:41.372
（掌聲）

00:14:41.372 --> 00:14:42.579
呼！

00:14:46.779 --> 00:14:48.296
各位現在可能在想

00:14:48.296 --> 00:14:50.271
這些傢伙也太愛玩了吧

00:14:50.271 --> 00:14:52.350
你可能也在問自己

00:14:52.350 --> 00:14:56.286
他們到底為何要建造機械運動員？

00:14:56.286 --> 00:14:58.938
一個推測是，就像動物王國中
遊戲的作用

00:14:58.938 --> 00:15:01.690
可以磨練技能和發展能力

00:15:01.690 --> 00:15:03.756
其他人則認為
這有更多的社會角色

00:15:03.756 --> 00:15:05.430
可讓團體聚在一起

00:15:05.430 --> 00:15:08.963
同樣，我們用運動和運動能力類比

00:15:08.963 --> 00:15:11.042
來建立機器的新演算法

00:15:11.042 --> 00:15:13.189
將其能力推昇到極限

00:15:13.189 --> 00:15:16.866
機器的速度會對我們的生活方式
產生什麼影響？

00:15:16.866 --> 00:15:19.255
就像我們過去的各種創作及創新

00:15:19.255 --> 00:15:22.082
它們可能被用來改善人類生活條件

00:15:22.082 --> 00:15:24.583
也可能會被誤用和濫用

00:15:24.583 --> 00:15:26.506
我們面臨的，不是技術選擇

00:15:26.506 --> 00:15:28.261
而是社會選擇

00:15:28.261 --> 00:15:29.651
讓我們做出正確的選擇

00:15:29.651 --> 00:15:32.056
最能發揮未來機器優點的選擇

00:15:32.056 --> 00:15:33.868
就像運動的能力

00:15:33.868 --> 00:15:36.029
能讓人類發揮出最好的部分

00:15:36.029 --> 00:15:39.479
讓我來介紹
綠色布幕後面的魔法師

00:15:39.479 --> 00:15:42.379
他們是飛行機器競技場
研究團隊的現任成員

00:15:42.379 --> 00:15:47.148
（掌聲）

00:15:47.148 --> 00:15:50.194
Federico Augugliaro,
Dario Brescianini, Markus Hehn,

00:15:50.194 --> 00:15:53.018
Sergei Lupashin, Mark Muller
和 Robin Ritz

00:15:53.018 --> 00:15:54.950
注意他們，他們將會有偉大成就

00:15:54.950 --> 00:15:56.128
謝謝

00:15:56.128 --> 00:16:02.482
（掌聲）

