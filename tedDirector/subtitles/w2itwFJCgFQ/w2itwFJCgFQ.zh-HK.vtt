WEBVTT
Kind: captions
Language: zh-HK

00:00:00.000 --> 00:00:07.000
Translator: Changbin Lin
Reviewer: Bighead Ge

00:00:23.307 --> 00:00:25.891
如果呢台機器可以做運動
意味著乜嘢？

00:00:27.031 --> 00:00:29.908
我哋會借助四旋翼飛行器（四旋翼）

00:00:29.908 --> 00:00:31.888
去展示機器運動嘅概念

00:00:31.888 --> 00:00:35.225
同埋我哋喺機器運動方面嘅研究

00:00:38.034 --> 00:00:39.963
四旋翼已經面世好耐

00:00:40.483 --> 00:00:44.172
佢哋最近大熱嘅原因
係因為佢哋嘅機械原理簡單

00:00:44.172 --> 00:00:46.235
只要控制呢四個螺旋槳嘅轉速

00:00:46.235 --> 00:00:49.283
呢部機器就可以翻側、俯仰、偏航

00:00:49.283 --> 00:00:52.108
仲可以向任何一個方向加速

00:00:52.108 --> 00:00:57.739
呢部機器有電池、微型電腦
各種傳感器同無線電收發器

00:00:59.149 --> 00:01:02.722
四旋翼靈活係有代價嘅

00:01:03.762 --> 00:01:06.024
佢天生唔夠穩定

00:01:06.024 --> 00:01:09.916
所以需要自動反饋控制
至保證可以飛得到

00:01:16.259 --> 00:01:18.447
咁點樣做到自動反饋呢？

00:01:19.497 --> 00:01:21.805
天花板嘅攝像鏡頭同呢部手提電腦

00:01:21.805 --> 00:01:23.891
形成咗室內嘅定位系統

00:01:23.891 --> 00:01:26.076
用嚟定位空間入面嘅物件

00:01:26.076 --> 00:01:28.513
每件物件都有呢種反光標記

00:01:28.513 --> 00:01:31.064
收集到嘅定位數據會發送去
另一部手提電腦

00:01:31.064 --> 00:01:32.875
執行估算同控制算法

00:01:32.875 --> 00:01:34.891
跟住電腦會發送控制指令畀四旋翼

00:01:34.891 --> 00:01:37.496
四旋翼亦都會執行計算同控制算法

00:01:41.620 --> 00:01:44.130
我哋研究嘅重點就係算法

00:01:44.130 --> 00:01:46.761
算法賦予呢啲機器活力

00:01:48.291 --> 00:01:52.634
咁係點樣設計出算法
令機器可以郁嘅呢？

00:01:52.634 --> 00:01:55.491
我哋利用廣義稱為
「以模型為基礎嘅設計方法」

00:01:55.491 --> 00:02:00.625
我哋首先利用數學模型
掌握機器運動嘅物理數據

00:02:00.625 --> 00:02:03.076
然後用數學嘅一個細分學科

00:02:03.076 --> 00:02:08.097
叫做控制理論，分析模型同合成算法

00:02:08.097 --> 00:02:09.680
從而控制四旋翼

00:02:09.680 --> 00:02:12.868
例如，我哋係咁樣控制四旋翼︰

00:02:12.868 --> 00:02:16.196
首先，用一系列微分方程
掌握佢嘅運動數據

00:02:16.196 --> 00:02:19.631
藉著控制理論，我哋修改呢啲方程式

00:02:19.631 --> 00:02:22.321
得出一啲算法嚟穩定四旋翼

00:02:23.171 --> 00:02:25.630
等我示範下呢種方法有幾厲害啦

00:02:29.198 --> 00:02:31.747
假設我哋想四旋翼停喺空中之外

00:02:31.747 --> 00:02:34.529
仲要穩定一轆棍

00:02:34.529 --> 00:02:38.783
經過簡單練習
人類已經可以做到呢個動作

00:02:38.783 --> 00:02:40.519
雖然我哋比四旋翼有優勢

00:02:40.519 --> 00:02:42.087
我哋可以雙腿掂地

00:02:42.087 --> 00:02:44.804
有好靈活嘅雙手輔助

00:02:44.804 --> 00:02:50.823
但如果我金雞獨立嘅話，咁就有啲難

00:02:52.708 --> 00:02:58.259
注意轆棍頂部有反光標記
用嚟判斷轆棍嘅空間座標

00:03:04.231 --> 00:03:05.201
（觀眾）哦！

00:03:05.201 --> 00:03:10.947
（掌聲）

00:03:10.947 --> 00:03:13.773
大家可以睇到部四旋翼一直喺度微調

00:03:13.773 --> 00:03:15.538
令轆棍平衡

00:03:16.408 --> 00:03:19.027
我哋係點樣設計算法搞掂嘅呢？

00:03:19.027 --> 00:03:22.652
我哋將轆棍嘅數學模型輸入到四旋翼

00:03:22.652 --> 00:03:25.605
只要我哋個模型有齊
四旋翼同轆棍嘅資料

00:03:25.605 --> 00:03:29.748
我哋就可以利用控制理論
建立控制算法去控制四旋翼

00:03:30.538 --> 00:03:32.126
睇下，就算我郁佢一下

00:03:32.126 --> 00:03:39.269
佢都穩如泰山，都會返到去平衡點

00:03:40.222 --> 00:03:44.315
我哋仲可以修改模型
加入四旋翼預定嘅空間座標

00:03:44.326 --> 00:03:47.395
用著呢條有反光標記嘅指揮棒

00:03:47.395 --> 00:03:49.619
就可以點四旋翼去任何我想嘅位置

00:03:49.619 --> 00:03:51.806
而且同我保持特定嘅距離

00:03:58.642 --> 00:04:01.642
（笑聲）

00:04:07.753 --> 00:04:10.665
呢啲特技動作嘅關鍵係算法

00:04:10.665 --> 00:04:14.631
算法依賴數學模型同控制理論

00:04:15.331 --> 00:04:17.255
等我指部四旋翼返嚟先

00:04:17.255 --> 00:04:19.074
畀四旋翼放低轆棍

00:04:19.074 --> 00:04:20.992
宜家我會講解

00:04:20.992 --> 00:04:24.841
理解物理模型
同現實世界運作規律嘅重要

00:04:37.462 --> 00:04:39.682
留意喺我放杯水上去嘅時候

00:04:39.682 --> 00:04:41.314
四旋翼嘅高度下降咗

00:04:41.314 --> 00:04:42.635
唔似轆棍咁樣

00:04:42.635 --> 00:04:46.699
我無喺四旋翼系統度
加入杯水嘅數學模型

00:04:46.699 --> 00:04:49.618
事實上，系統根本唔知道杯水喺度

00:04:49.618 --> 00:04:54.450
同之前一樣，我可以用指揮棒
指揮四旋翼嘅走向

00:04:56.969 --> 00:05:05.096
（掌聲）

00:05:05.096 --> 00:05:09.756
大家可能會問
點解玻璃杯嘅水唔會倒出嚟？

00:05:09.756 --> 00:05:10.766
原因有兩個：

00:05:10.766 --> 00:05:15.051
第一，重力對所有物體嘅作用都係一樣

00:05:15.051 --> 00:05:20.482
第二，所有螺旋槳都指向
同玻璃杯一樣嘅方向︰指向上

00:05:20.482 --> 00:05:23.019
呢兩點加埋，結果就係

00:05:23.019 --> 00:05:25.306
杯水打側方向嘅作用力太細

00:05:25.306 --> 00:05:28.361
四旋翼亦因此主要受到空氣動力控制

00:05:28.361 --> 00:05:30.622
所以向側邊嘅力都可以忽略

00:05:35.336 --> 00:05:38.137
亦因為咁，你無需為玻璃杯整數學模型

00:05:38.137 --> 00:05:41.215
因為無論四旋翼做咩，水都唔會漏出嚟

00:05:50.651 --> 00:05:57.702
（掌聲）

00:05:57.702 --> 00:05:59.158
喺度想講嘅係

00:05:59.158 --> 00:06:03.115
某啲高性能任務簡單過其他任務

00:06:03.115 --> 00:06:05.411
同埋，理解問题背後嘅物理

00:06:05.411 --> 00:06:08.197
你就可以知道邊樣簡單、邊樣難

00:06:08.197 --> 00:06:10.736
呢個例子裏面
四旋翼頂住杯水飛就簡單

00:06:10.736 --> 00:06:12.641
平衡轆棍就難

00:06:14.171 --> 00:06:18.453
我哋都聽過運動員受傷都可以完成壯舉

00:06:18.466 --> 00:06:21.825
咁機器可唔可以
喺極度損壞嘅情況下運作？

00:06:22.655 --> 00:06:24.362
傳統科學認為，你要飛

00:06:24.362 --> 00:06:28.052
起碼要四塊固定螺旋槳

00:06:28.052 --> 00:06:33.194
因為要控制四範嘢︰
滾轉、俯仰、偏航同加速

00:06:33.194 --> 00:06:36.437
六旋同八旋飛行器
分別有六同八塊螺旋槳

00:06:36.437 --> 00:06:37.920
佢哋嘅螺旋槳足以應付所需

00:06:37.920 --> 00:06:39.909
但係四旋更加受歡迎

00:06:39.909 --> 00:06:44.074
因為佢有最少嘅螺旋槳：四套

00:06:44.074 --> 00:06:45.045
係咪？

00:07:01.476 --> 00:07:06.266
如果我哋分析呢台
只用兩個螺旋槳嘅機器嘅數學模型

00:07:06.266 --> 00:07:09.578
我哋發現有種新嘅方式可以令佢飛起嚟

00:07:19.980 --> 00:07:21.686
就係只要算法容許嘅話

00:07:21.686 --> 00:07:23.666
我哋放棄控制偏航

00:07:23.666 --> 00:07:27.978
但係我哋仍然控制滾轉、俯仰同加速

00:07:33.668 --> 00:07:35.822
數學模型精確咁話畀我哋知

00:07:35.822 --> 00:07:38.172
幾時同點解呢種配置係有可能

00:07:38.172 --> 00:07:40.540
喺呢個例子，數學模型嘅知識

00:07:40.540 --> 00:07:42.796
令我哋設計出全新嘅機器結構

00:07:42.796 --> 00:07:48.742
或者好似人類運動員一樣聰明
應對損害嘅算法

00:07:48.742 --> 00:07:50.979
而無需整多餘嘅部件

00:07:52.551 --> 00:07:54.918
當我哋睇到跳水運動員空翻入水

00:07:54.918 --> 00:07:57.388
或者撐杆跳運動員喺空中翻轉

00:07:57.388 --> 00:08:00.576
然後快速著地，我哋一定會屏息以待

00:08:00.576 --> 00:08:03.144
睇下究竟跳水嘅可唔可以壓住水花

00:08:03.144 --> 00:08:05.144
撐杆跳嘅可唔可以站立著地

00:08:05.144 --> 00:08:08.432
假設我哋希望呢台四旋翼表演三個空翻

00:08:08.432 --> 00:08:11.533
然後停喺佢原來嘅位置

00:08:11.533 --> 00:08:13.349
但呢個動作快到

00:08:13.349 --> 00:08:17.508
我哋用唔到定位反饋信息
糾正執行過程嘅動作

00:08:17.508 --> 00:08:19.782
時間根本唔夠

00:08:19.782 --> 00:08:23.476
所以四旋翼只能夠盲目執行動作

00:08:23.476 --> 00:08:25.708
執行完之後
睇下自己點樣完成呢個動作

00:08:25.708 --> 00:08:28.132
然後修改自己嘅動作

00:08:28.132 --> 00:08:30.421
令到下一個翻轉好啲

00:08:30.421 --> 00:08:32.233
呢個類似跳水同撐杆跳運動員

00:08:32.233 --> 00:08:34.152
只有通過反覆練習

00:08:34.152 --> 00:08:37.095
先可以學好動作，做到最好

00:08:46.412 --> 00:08:51.164
（笑聲）
（掌聲）

00:08:51.164 --> 00:08:54.926
好多運動入面，擊球係一項必須嘅技能

00:08:54.926 --> 00:08:59.261
我哋點樣令機器做到
運動員隨便就做到嘅動作？

00:09:15.943 --> 00:09:22.542
（笑聲）
（掌聲）

00:09:22.542 --> 00:09:25.192
呢部四旋翼個頭綁咗塊球拍

00:09:25.192 --> 00:09:27.512
而最有效擊球點同蘋果差唔多大

00:09:27.512 --> 00:09:28.939
所以唔係好大

00:09:28.939 --> 00:09:31.846
部機嘅計算頻率係 20 毫秒一次

00:09:31.846 --> 00:09:33.602
亦即係每秒 50 次

00:09:33.602 --> 00:09:36.414
我哋第一步睇下個波飛去邊

00:09:36.414 --> 00:09:38.851
第二步計算出四旋翼要點樣打波

00:09:38.851 --> 00:09:41.950
四旋翼收到指令後
就飛去個波飛出嘅位置

00:09:41.950 --> 00:09:49.446
第三步，計算出一條從四旋翼
到擊球點嘅飛行軌跡

00:09:49.446 --> 00:09:53.239
第四步，我哋只執行
上幾個程序 20 毫秒

00:09:53.239 --> 00:09:56.046
20 毫秒過去，重複以上成個程序

00:09:56.046 --> 00:09:58.289
直到四旋翼打到個波

00:10:07.560 --> 00:10:10.206
（掌聲）

00:10:10.206 --> 00:10:13.578
機器唔單止可以獨立運動

00:10:13.578 --> 00:10:15.441
佢哋仲可以一齊嚟

00:10:15.441 --> 00:10:19.028
呢三部四旋翼就一齊帶住個球網飛

00:10:28.574 --> 00:10:33.985
（掌聲）

00:10:33.985 --> 00:10:38.352
佢哋做咗個非常有動態
非常合作嘅操作

00:10:38.352 --> 00:10:40.042
嚟丟返個波畀我

00:10:40.042 --> 00:10:41.937
注意囉，個網全部打開個陣

00:10:41.937 --> 00:10:44.377
呢啲四旋翼全部打側九十度

00:10:48.486 --> 00:10:50.258
（掌聲）

00:10:50.258 --> 00:10:52.545
實際上，當個網全部打開

00:10:52.545 --> 00:10:57.940
會產生相當於笨豬跳嘅人
跌到最低時五倍嘅力

00:11:03.279 --> 00:11:05.686
做一齊打波動作嘅算法好簡單

00:11:05.686 --> 00:11:09.070
類似一部四旋翼打返個波畀我嘅算式

00:11:09.070 --> 00:11:13.544
都係利用數學模型持續計算合作策略

00:11:13.544 --> 00:11:14.959
每秒計算 50 次

00:11:16.449 --> 00:11:20.806
我哋目前睇到嘅所有嘢
都同機器同埋佢哋能力有關

00:11:20.806 --> 00:11:25.114
如果我哋將機器嘅運動能力
同人類結合，會點呢？

00:11:25.670 --> 00:11:29.385
喺我面前嘅係一部商業用姿勢感應器

00:11:29.385 --> 00:11:30.694
主要用喺遊戲

00:11:30.694 --> 00:11:34.568
佢可以實時識別我身體唔同部位嘅動作

00:11:34.568 --> 00:11:36.662
而同我之前用嘅指揮棒相似

00:11:36.662 --> 00:11:39.454
我可以用呢個感應器
當成系統嘅輸入裝置

00:11:39.454 --> 00:11:45.420
我哋宜家可以用身體姿勢
自然咁同四旋翼互動

00:12:22.503 --> 00:12:26.903
（掌聲）

00:12:36.232 --> 00:12:39.949
互動唔一定係虛擬，可以係現實嘅

00:12:39.949 --> 00:12:41.714
以呢部四旋翼為例

00:12:41.714 --> 00:12:44.342
佢想停喺空間嘅一個固定位置

00:12:44.342 --> 00:12:48.179
如果我要擁開佢，佢會抵抗我

00:12:48.179 --> 00:12:51.104
佢始終會返去佢想要嘅位置度

00:12:52.334 --> 00:12:54.553
但係，我哋可以改變呢種行為

00:12:55.223 --> 00:13:00.212
我哋可以用數學模型
估算我用喺四旋翼上面嘅力

00:13:00.212 --> 00:13:01.575
只要我哋知道呢個力

00:13:01.575 --> 00:13:05.265
我哋就可以改變四旋翼嘅物理定律

00:13:07.942 --> 00:13:11.435
依家四旋翼就好似喺粘性流體度

00:13:14.530 --> 00:13:18.614
而我哋依家可以好親密咁同機器互動

00:13:18.614 --> 00:13:20.379
我會用呢種新技術

00:13:20.379 --> 00:13:23.436
將帶住攝像頭嘅四旋翼放喺適當位置

00:13:23.436 --> 00:13:25.906
去錄低餘下嘅示範

00:13:36.222 --> 00:13:38.990
正如頭先所講
我哋可以同四旋翼有實體互動

00:13:38.990 --> 00:13:41.393
亦可以改變佢哋嘅物理定律

00:13:41.393 --> 00:13:43.076
等我哋嚟玩下呢樣

00:13:43.606 --> 00:13:44.850
接著落嚟

00:13:44.850 --> 00:13:48.906
你會睇到四旋翼
一開始好似喺太空咁輕飄飄

00:13:48.906 --> 00:13:51.218
隨住時間增加，引力亦都加大

00:13:51.218 --> 00:13:53.338
直到恢復地球引力為止

00:13:53.338 --> 00:13:55.227
但係我保證你同我唔會有事

00:13:55.227 --> 00:13:56.308
好，開始

00:14:05.667 --> 00:14:09.079
（笑聲）

00:14:34.778 --> 00:14:37.986
（笑聲）

00:14:37.986 --> 00:14:41.772
（掌聲）

00:14:41.772 --> 00:14:42.489
呼！

00:14:46.779 --> 00:14:50.306
你哋一定諗緊四旋翼嘅
開發人員有太多娛樂

00:14:50.306 --> 00:14:52.350
你都可能會問自己

00:14:52.350 --> 00:14:55.246
點解佢哋要整運動機械人？

00:14:56.286 --> 00:14:57.558
有人一口咬定話

00:14:57.558 --> 00:15:01.690
「玩」嘅功能就係磨練
包括人在內嘅動物嘅技藝同埋能力

00:15:01.690 --> 00:15:04.116
其他人就諗，四旋翼更加有社會功能

00:15:04.116 --> 00:15:05.430
可以用嚟聚合群體

00:15:05.430 --> 00:15:06.743
對我哋嚟講

00:15:06.743 --> 00:15:11.042
我哋用運動同崇尚運動嘅精神
創造咗新嘅機器算法

00:15:11.042 --> 00:15:12.409
將機器嘅潛能發揮到極致

00:15:13.189 --> 00:15:16.866
機器嘅速度
對我哋嘅生活方式有咩影響？

00:15:16.866 --> 00:15:19.255
同我哋以前所有嘅創造發明一樣

00:15:19.255 --> 00:15:22.082
佢哋可能用嚟改善人類嘅生活條件

00:15:22.082 --> 00:15:24.583
亦都可能俾人誤用或者濫用

00:15:24.583 --> 00:15:28.290
我哋面對嘅，唔係技術決定
而係社會決定

00:15:28.290 --> 00:15:29.936
等我哋做個正確決定

00:15:29.936 --> 00:15:32.201
令最好嘅機器可以喺將來問世

00:15:32.201 --> 00:15:36.078
就好似崇向運動嘅精神
發掘到運動潛能最勁嘅人咁

00:15:36.078 --> 00:15:39.479
等我介紹你哋四旋翼項目
背後勞苦功高嘅人

00:15:39.479 --> 00:15:42.379
佢哋係飛行器競技場
研究小組嘅現任成員

00:15:42.379 --> 00:15:47.148
（掌聲）

00:15:47.148 --> 00:15:49.584
Federico Augugliaro, 
Dario Brescianini

00:15:49.584 --> 00:15:51.194
Markus Hehn, Sergei Lupashin

00:15:51.194 --> 00:15:53.018
Mark Muller 同 Robin Ritz

00:15:53.018 --> 00:15:55.324
請留意佢哋
佢哋日後一定會有偉大嘅成就

00:15:55.324 --> 00:15:56.128
多謝大家

00:15:56.128 --> 00:16:01.132
（掌聲）

