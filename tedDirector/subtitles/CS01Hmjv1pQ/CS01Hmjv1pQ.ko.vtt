WEBVTT
Kind: captions
Language: ko

00:00:00.000 --> 00:00:07.000
번역: J J LEE
검토: JY Kang

00:00:15.260 --> 00:00:18.260
'스턱스넷(Stuxnet)' 컴퓨터 웜의 개념은

00:00:18.260 --> 00:00:20.260
사실 아주 단순합니다.

00:00:20.260 --> 00:00:23.260
다들 이란이 원자폭탄을 보유하는 걸 원치 않습니다.

00:00:23.260 --> 00:00:26.260
핵무기 개발을 위한 그들의 중요한 자산은

00:00:26.260 --> 00:00:30.260
나탄즈 우라늄 농축시설입니다.

00:00:30.260 --> 00:00:32.260
여러분이 보는 회색 상자들은

00:00:32.260 --> 00:00:35.260
실시간 제어 시스템입니다.

00:00:35.260 --> 00:00:38.260
구동 속도와 밸브를 제어하는 이 시스템을

00:00:38.260 --> 00:00:41.260
어떻게든 해서 위태롭게 한다면,

00:00:41.260 --> 00:00:44.260
원심분리기에 많은 문제를

00:00:44.260 --> 00:00:46.260
유발시킬 수 있을 것입니다.

00:00:46.260 --> 00:00:48.260
이 제어 시스템에서 윈도우즈 소프트웨어는 작동하지 않습니다.

00:00:48.260 --> 00:00:51.260
이 시스템은 완전히 다른 기술이죠.

00:00:51.260 --> 00:00:53.260
하지만 어떻게 해서든

00:00:53.260 --> 00:00:56.260
장비 관리자의 노트북에

00:00:56.260 --> 00:00:58.260
시스템 설정을 위한

00:00:58.260 --> 00:01:00.260
쓸만한 윈도우즈 바이러스를

00:01:00.260 --> 00:01:03.260
심어 놓기만 한다면

00:01:03.260 --> 00:01:05.260
준비는 끝난 셈이죠.

00:01:05.260 --> 00:01:08.260
스턱스넷에 감춰진 계획은 이렇습니다.

00:01:08.260 --> 00:01:13.260
자, 윈도우즈 드로퍼 웜에서부터 시작해보죠.

00:01:13.260 --> 00:01:16.260
웜에서 만들어진 데이터는 제어 시스템으로 보내지고,

00:01:16.260 --> 00:01:18.260
원심 분리기에 손상을 일으키면,

00:01:18.260 --> 00:01:20.260
이란의 핵개발 프로그램은 지연됩니다.

00:01:20.260 --> 00:01:22.260
그러면 임무가 완수되는 것이죠.

00:01:22.260 --> 00:01:24.260
쉽죠, 그렇죠?

00:01:24.260 --> 00:01:27.260
어떻게 그걸 알아냈는지 말씀드리겠습니다.

00:01:27.260 --> 00:01:30.260
6개월 전, 우리가 스턱스넷에 대한 연구를 시작했을 때

00:01:30.260 --> 00:01:33.260
그 목적이 무엇인지 전혀 알 수 없었습니다.

00:01:33.260 --> 00:01:35.260
알아낸 것이라고는

00:01:35.260 --> 00:01:38.260
그 매우 복잡한 윈도우즈 드로퍼 웜이 여러가지

00:01:38.260 --> 00:01:41.260
제로데이 취약점을 이용하고 있다는 것이었습니다. (주:제로데이 취약점 : 대응책이 아직 발표되지 않은 보안 취약점)

00:01:41.260 --> 00:01:44.260
그리고 그것은 이 회색 상자들,

00:01:44.260 --> 00:01:46.260
실시간 제어 시스템에 뭔가를 하고자 하는 것 같았습니다.

00:01:46.260 --> 00:01:48.260
우리는 그 점에 주목했고,

00:01:48.260 --> 00:01:50.260
우리 시스템 환경을 스턱스넷으로

00:01:50.260 --> 00:01:54.260
감염시킨 후에, 연구 프로젝트를 시작했습니다.

00:01:54.260 --> 00:01:56.260
그리고 이것을 조사했죠.

00:01:56.260 --> 00:01:59.260
그리고 나서 아주 재미있는 일이 벌어졌습니다.

00:01:59.260 --> 00:02:02.260
스턱스넷은 치즈를 좋아하지 않는

00:02:02.260 --> 00:02:05.260
실험실 쥐처럼 동작했습니다.

00:02:05.260 --> 00:02:07.260
냄새는 맡지만 먹지는 않죠.

00:02:07.260 --> 00:02:09.260
저는 이해가 되지 않았습니다.

00:02:09.260 --> 00:02:12.260
다른 종류의 먹잇감으로 실험을 해 본 후에야,

00:02:12.260 --> 00:02:16.260
이것이 목표가 정해진 유도공격이라는 것을 알았습니다.

00:02:16.260 --> 00:02:18.260
확실한 공격목표가 있었습니다. .

00:02:18.260 --> 00:02:20.260
그 드로퍼 웜은 제어시스템이

00:02:20.260 --> 00:02:22.260
특정한 환경설정에 있을 때만

00:02:22.260 --> 00:02:25.260
활발히 활동했습니다.

00:02:25.260 --> 00:02:29.260
게다가 감염시키고자 하는 대상 프로그램이

00:02:29.260 --> 00:02:31.260
실제로 구동되고 있을 때만 공격을 합니다.

00:02:31.260 --> 00:02:34.260
그렇지 않다면, 스턱스넷은 아무것도 하지 않습니다.

00:02:34.260 --> 00:02:36.260
그것이 제 주의를 끌었고,

00:02:36.260 --> 00:02:38.260
우리는 여기에 거의 24시간 내내

00:02:38.260 --> 00:02:40.260
매달리기 시작했습니다.

00:02:40.260 --> 00:02:43.260
그 공격 대상이 무엇인지 몰랐기 때문입니다.

00:02:43.260 --> 00:02:45.260
공격목표가, 예를 들자면,

00:02:45.260 --> 00:02:47.260
미국 발전소나

00:02:47.260 --> 00:02:49.260
독일의 화학 공장이 될 수도 있기 때문이었죠.

00:02:49.260 --> 00:02:52.260
그래서 빨리 그 공격 대상을 찾아야 했습니다.

00:02:52.260 --> 00:02:54.260
우리는 공격 코드를 추출해서

00:02:54.260 --> 00:02:56.260
역해석을 했고,

00:02:56.260 --> 00:02:59.260
그것이 작은 것과 큰 것, 두 개의 디지털 폭탄으로

00:02:59.260 --> 00:03:02.260
구성되어 있다는 것을 알아냈습니다.

00:03:02.260 --> 00:03:06.260
또한 명백히 모든 내부 정보를 가지고 있는 사람이

00:03:06.260 --> 00:03:10.260
아주 전문적으로 제작했다는 것도 알아냈습니다.

00:03:10.260 --> 00:03:12.260
그들은 공격해야 할 대상의

00:03:12.260 --> 00:03:14.260
모든 것을 알고 있었습니다.

00:03:14.260 --> 00:03:17.260
어쩌면 시스템 운영자의 신발 사이즈 까지 알고 있을지도 모르죠.

00:03:17.260 --> 00:03:19.260
어쨌든 그들은 모든 것을 알고 있습니다.

00:03:19.260 --> 00:03:22.260
스턱스넷이라는 드로퍼 웜이

00:03:22.260 --> 00:03:24.260
복잡한 첨단기술이라고 알고 계시다면,

00:03:24.260 --> 00:03:26.260
이거 하나만 말씀드리죠.

00:03:26.260 --> 00:03:28.260
그것의 공격용 데이터는 정말 어렵습니다.

00:03:28.260 --> 00:03:30.260
지금껏 봐 왔던 모든 것을

00:03:30.260 --> 00:03:33.260
뛰어 넘을 정도입니다.

00:03:33.260 --> 00:03:36.260
여기 실제 공격 코드의 샘플을 보세요.

00:03:36.260 --> 00:03:38.260
약 15,000줄의 코드에 대해서

00:03:38.260 --> 00:03:41.260
말씀드리고 있는 것입니다.

00:03:41.260 --> 00:03:44.260
구식의 어셈블리 언어와 매우 유사하게 보입니다.

00:03:44.260 --> 00:03:46.260
그럼 이 코드를 어떻게 해석할 수 있었는지

00:03:46.260 --> 00:03:48.260
여러분께 말씀드리겠습니다.

00:03:48.260 --> 00:03:51.260
우리가 찾던 것은 무엇보다도 시스템 함수 호출 부분이었습니다.

00:03:51.260 --> 00:03:53.260
그것이 어떤 역할을 할지 알고 있었기 때문이죠.

00:03:53.260 --> 00:03:57.260
다음으로 우리는 타이머와 데이터 구조를 찾았고,

00:03:57.260 --> 00:03:59.260
그것들을 실제 공격목표가 될 가능성이 있는 것들과

00:03:59.260 --> 00:04:01.260
연관시켜 보았습니다.

00:04:01.260 --> 00:04:04.260
우리는 증명하거나 반증할 수 있는

00:04:04.260 --> 00:04:07.260
표적 이론이 필요했죠.

00:04:07.260 --> 00:04:09.260
표적 이론을 세울 때,

00:04:09.260 --> 00:04:11.260
우리가 유념했던 것은

00:04:11.260 --> 00:04:13.260
강력한 파괴행위가 목적이라는 점,

00:04:13.260 --> 00:04:15.260
중요시설이 대상이어야 한다는 점이었고,

00:04:15.260 --> 00:04:18.260
틀림없이 이란에 위치한 것이리라 생각했습니다.

00:04:18.260 --> 00:04:22.260
왜냐하면 바이러스 감염의 대부분은 이란에서 보고되기 때문이죠.

00:04:22.260 --> 00:04:25.260
이제 그 지역에서 수 천개의 표적을 찾을 필요는 없죠.

00:04:25.260 --> 00:04:27.260
기본적으로 부시르 핵발전소와

00:04:27.260 --> 00:04:29.260
나탄즈 연료 농축 공장으로

00:04:29.260 --> 00:04:31.260
압축시킬 수 있습니다.

00:04:31.260 --> 00:04:33.260
저는 조수에게 말했습니다.

00:04:33.260 --> 00:04:36.260
"우리 고객중에서 원심분리기와 발전소에 관한 전문가 명단을 가져다주게."

00:04:36.260 --> 00:04:38.260
그리고 그들에게 전화를 걸어

00:04:38.260 --> 00:04:40.260
그들의 전문적 의견들을

00:04:40.260 --> 00:04:43.260
코드와 데이터에서 찾아낸 것들과 맞춰 봤습니다.

00:04:43.260 --> 00:04:45.260
그것은 아주 효과가 있었습니다.

00:04:45.260 --> 00:04:47.260
결국 우리는 그 '작은 디지털 무기'가

00:04:47.260 --> 00:04:49.260
핵시설의 회전자 제어기와

00:04:49.260 --> 00:04:51.260
관련있음을 알 수 있었습니다.

00:04:51.260 --> 00:04:54.260
회전자는 원심분리기를 구동시키는 부품으로,

00:04:54.260 --> 00:04:56.260
여러분이 보시는 검은 물체입니다.

00:04:56.260 --> 00:04:59.260
이 회전자의 속도를 조절한다면,

00:04:59.260 --> 00:05:01.260
회전자를 망가트릴 수 있고,

00:05:01.260 --> 00:05:05.260
결국 원심분리기가 폭발하도록 할 수 있습니다.

00:05:05.260 --> 00:05:07.260
또한 우리가 알아낸 것은

00:05:07.260 --> 00:05:09.260
그 공격 목적이 회전자를

00:05:09.260 --> 00:05:12.260
정말 더디고 느리게 회전하게 만들어서

00:05:12.260 --> 00:05:14.260
정비 엔지니어들이

00:05:14.260 --> 00:05:17.260
정신없도록 만들고,

00:05:17.260 --> 00:05:20.260
빨리 알아채지 못하도록 한다는 것입니다.

00:05:20.260 --> 00:05:23.260
다음은 '큰 디지털 무기'입니다.

00:05:23.260 --> 00:05:25.260
우리는 데이터와 데이터 구조를

00:05:25.260 --> 00:05:27.260
아주 면밀하게 관찰했습니다.

00:05:27.260 --> 00:05:29.260
예를 들어, 164라는 숫자가

00:05:29.260 --> 00:05:31.260
코드에서 특히 눈에 띄는데요.

00:05:31.260 --> 00:05:33.260
간과할 수가 없죠.

00:05:33.260 --> 00:05:35.260
저는 이 원심분리기가 나탄즈에서

00:05:35.260 --> 00:05:37.260
실제로 어떻게 건설되었나

00:05:37.260 --> 00:05:39.260
과학 문헌을 찾기 시작했고,

00:05:39.260 --> 00:05:41.260
그것이 '케스케이드'라는 다층 구조로 되어 있으며,

00:05:41.260 --> 00:05:43.260
각 층에는 164개의 원심분리기가

00:05:43.260 --> 00:05:47.260
설치되어 있다는 것을 알아냈습니다.

00:05:47.260 --> 00:05:49.260
앞 뒤가 딱 맞아 떨어졌죠.

00:05:49.260 --> 00:05:51.260
그리고 더욱 진전이 있었습니다.

00:05:51.260 --> 00:05:53.260
이란에 있는 이 원심분리기들은

00:05:53.260 --> 00:05:57.260
15개의 단계로 나뉘어 있습니다.

00:05:57.260 --> 00:05:59.260
그럼 우리가 공격 코드에서 무엇을 찾았을까요?

00:05:59.260 --> 00:06:01.260
거의 동일한 구조입니다.

00:06:01.260 --> 00:06:04.260
또 다시 정확히 맞아 떨어졌죠.

00:06:04.260 --> 00:06:07.260
이것이 우리에게 확실한 자신감을 심어줬습니다.

00:06:07.260 --> 00:06:10.260
오해하지는 마세요. 말처럼 쉽게 풀린 것은 아닙니다.

00:06:10.260 --> 00:06:13.260
이것은 몇 주간의 정말 고된 작업 끝에

00:06:13.260 --> 00:06:16.260
얻어진 결과입니다.

00:06:16.260 --> 00:06:19.260
우리는 종종 막다른 길에 부딪혔고,

00:06:19.260 --> 00:06:21.260
처음부터 다시 시작해야 했습니다.

00:06:21.260 --> 00:06:23.260
어쨌든, 우리는 실제로

00:06:23.260 --> 00:06:25.260
하나의 공격목표를 두고

00:06:25.260 --> 00:06:27.260
다른 각도로 접근하는 두 개의 디지털 무기를

00:06:27.260 --> 00:06:29.260
찾아낸 것입니다.

00:06:29.260 --> 00:06:32.260
'작은 무기'는 한 단계를 대상으로

00:06:32.260 --> 00:06:35.260
회전자의 회전속도를 느리게 만듭니다.

00:06:35.260 --> 00:06:37.260
그리고 '큰 무기'는

00:06:37.260 --> 00:06:39.260
6단계에 걸쳐서

00:06:39.260 --> 00:06:41.260
밸브들을 조작하는 것이죠.

00:06:41.260 --> 00:06:43.260
결과적으로 공격목표가 무엇인지

00:06:43.260 --> 00:06:45.260
실제로 알아냈다고 확신했습니다.

00:06:45.260 --> 00:06:48.260
나탄즈입니다. 나탄즈 뿐이죠.

00:06:48.260 --> 00:06:50.260
그래서 스턱스넷의 목표가 될만한

00:06:50.260 --> 00:06:52.260
다른 대상들에 대해서는

00:06:52.260 --> 00:06:54.260
걱정할 필요가 없어졌습니다.

00:06:54.260 --> 00:06:57.260
여기에서 아주 멋진 걸 하나 발견했는데요.

00:06:57.260 --> 00:06:59.260
정말 저를 깜짝 놀라게 한 것이죠.

00:06:59.260 --> 00:07:01.260
아래 쪽에 회색 상자가 있고,

00:07:01.260 --> 00:07:04.260
그 위에 있는 것이 원심분리기입니다.

00:07:04.260 --> 00:07:06.260
이것이 하는 일은

00:07:06.260 --> 00:07:09.260
감지기로부터의 입력값을 가로채는 것입니다.

00:07:09.260 --> 00:07:11.260
예를 들면, 압력 감지기와

00:07:11.260 --> 00:07:13.260
진동 감지기의 입력값을 가로채고,

00:07:13.260 --> 00:07:16.260
거짓 입력 데이터로 이루어진

00:07:16.260 --> 00:07:18.260
적절한 코드를 건내주면 공격받는 중에도

00:07:18.260 --> 00:07:20.260
계속 작동하게 되죠.

00:07:20.260 --> 00:07:22.260
그리고 사실, 이 거짓 입력 데이터는

00:07:22.260 --> 00:07:25.260
스턱스넷이 미리 기록해 둔 것입니다.

00:07:25.260 --> 00:07:27.260
그건 마치 헐리우드 영화에서처럼

00:07:27.260 --> 00:07:29.260
은행을 터는 동안에

00:07:29.260 --> 00:07:32.260
미리 녹화해둔 영상을 감시카메라로 보내는 것과 같은 거죠.

00:07:32.260 --> 00:07:34.260
멋지죠? 안그런가요?

00:07:35.260 --> 00:07:37.260
이런 개념은 명백히

00:07:37.260 --> 00:07:40.260
제어실 운영자만을 바보로 만드는 것이 아닙니다.

00:07:40.260 --> 00:07:44.260
실제로 훨씬 더 위험하고 공격적입니다.

00:07:44.260 --> 00:07:46.260
그 기본개념은

00:07:46.260 --> 00:07:49.260
디지털 안전 시스템을 회피하는 것입니다.

00:07:50.260 --> 00:07:52.260
운영자가 충분히 빠르게 반응할 수 없는 곳에는

00:07:52.260 --> 00:07:55.260
디지털 안전 시스템이 필요합니다.

00:07:55.260 --> 00:07:57.260
예를 들면, 발전소에서

00:07:57.260 --> 00:08:00.260
큰 규모의 증기 터빈이 너무 빠른 속도로 돌면,

00:08:00.260 --> 00:08:03.260
100분의 1초 내로 완화 밸브를 열어줘야만 합니다.

00:08:03.260 --> 00:08:06.260
절대로, 사람이 할 수 없습니다.

00:08:06.260 --> 00:08:08.260
이런 곳에는 디지털 안전 시스템이 필요하죠.

00:08:08.260 --> 00:08:10.260
그런 상황에 잘 대처하지 못하면

00:08:10.260 --> 00:08:13.260
정말 안좋은 일이 벌어질 수 있습니다.

00:08:13.260 --> 00:08:15.260
공장이 날아가버릴 수 있죠.

00:08:15.260 --> 00:08:18.260
운영자나 안전 시스템, 그 어느것도 알아채지 못한다면,

00:08:18.260 --> 00:08:20.260
무서운 일이 일어나겠죠.

00:08:20.260 --> 00:08:22.260
하지만 더 나쁜 상황도 있습니다.

00:08:22.260 --> 00:08:25.260
지금부터 말씀드리려는 것이 아주 중요합니다.

00:08:25.260 --> 00:08:27.260
이것을 생각해보세요.

00:08:27.260 --> 00:08:30.260
이런 공격은 일반적입니다.

00:08:30.260 --> 00:08:34.260
원심분리기나 우라늄 농축 시설같은

00:08:34.260 --> 00:08:36.260
특정한 대상에만

00:08:36.260 --> 00:08:39.260
관계된 것은 아닙니다.

00:08:39.260 --> 00:08:42.260
예를 들면 그것은 발전소나

00:08:42.260 --> 00:08:44.260
자동차 공장도

00:08:44.260 --> 00:08:47.260
공격할 수 있습니다.

00:08:47.260 --> 00:08:49.260
모든 것이 공격대상이죠.

00:08:49.260 --> 00:08:51.260
스턱스넷의 경우에서 보았듯이,

00:08:51.260 --> 00:08:54.260
공격자는 반드시

00:08:54.260 --> 00:08:56.260
USB 메모리 스틱으로

00:08:56.260 --> 00:08:58.260
웜을 옮기지 않아도 됩니다.

00:08:58.260 --> 00:09:01.260
퍼뜨리기 위해서 상투적인 웜 기술을 사용할 수도 있습니다.

00:09:01.260 --> 00:09:04.260
그냥 가능한 넓게 퍼트리는 것입니다.

00:09:04.260 --> 00:09:06.260
그렇게만 된다면,

00:09:06.260 --> 00:09:08.260
대량파괴 사이버 무기가

00:09:08.260 --> 00:09:13.260
나타나게 되는 것입니다.

00:09:14.260 --> 00:09:16.260
그것이 우리가 직면하게 될

00:09:16.260 --> 00:09:19.260
결과입니다.

00:09:19.260 --> 00:09:22.260
그리고 불행한 사실은

00:09:22.260 --> 00:09:25.260
그런 공격 대상의 대부분은

00:09:25.260 --> 00:09:27.260
중동에 있지 않습니다.

00:09:27.260 --> 00:09:30.260
공격 대상의 대부분은 미국, 유럽, 일본에 있죠.

00:09:30.260 --> 00:09:32.260
그래서 모든 녹색 표시 지역들은

00:09:32.260 --> 00:09:35.260
공격대상이 풍부한 환경을 갖춘 곳입니다.

00:09:35.260 --> 00:09:38.260
우리는 그 결과에 직면해야만 하고,

00:09:38.260 --> 00:09:41.260
지금 당장 그 대비를 시작해야 합니다.

00:09:41.260 --> 00:09:43.260
감사합니다.

00:09:43.260 --> 00:09:49.260
(박수)

00:09:49.260 --> 00:09:51.260
크리스 앤더슨: 질문이 있습니다.

00:09:53.260 --> 00:09:55.260
랄프, 사람들이 모사드가

00:09:55.260 --> 00:09:57.260
이 일의 배후에 있다고 예상한다는 것은

00:09:57.260 --> 00:09:59.260
꽤나 알려진 사실입니다.

00:09:59.260 --> 00:10:02.260
당신의 의견도 그런가요?

00:10:02.260 --> 00:10:04.260
랄프 랭그너: 좋습니다. 정말 제 생각을 듣고 싶으신가요?

00:10:04.260 --> 00:10:06.260
네, 좋습니다.

00:10:06.260 --> 00:10:09.260
제 생각에는 모사드가 연루되어 있습니다.

00:10:09.260 --> 00:10:12.260
하지만 주도세력은 이스라엘이 아닙니다.

00:10:12.260 --> 00:10:14.260
그 배후의 주도 세력은

00:10:14.260 --> 00:10:17.260
사이버 초강대국입니다.

00:10:17.260 --> 00:10:19.260
그 유일한 나라가

00:10:19.260 --> 00:10:21.260
바로 미국입니다.

00:10:21.260 --> 00:10:23.260
다행스런 일이죠. 다행이에요.

00:10:23.260 --> 00:10:25.260
그렇지 않았더라면

00:10:25.260 --> 00:10:28.260
문제가 더 심각했을 테니까요.

00:10:28.260 --> 00:10:32.260
CA: 우리 모두를 겁나게 해주셔서 감사합니다. 감사해요 랄프.

00:10:32.260 --> 00:10:34.260
(박수)

