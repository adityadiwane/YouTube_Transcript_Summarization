WEBVTT
Kind: captions
Language: cs

00:00:00.000 --> 00:00:07.000
Překladatel: Filip Konig
Korektor: Jan Kadlec

00:00:15.260 --> 00:00:17.260
Dnes bych vám rád ukázal

00:00:17.260 --> 00:00:19.260
budoucnost toho, jak se tvoří věci.

00:00:19.260 --> 00:00:21.260
Věřím, že brzy se budou budovy a stroje

00:00:21.260 --> 00:00:23.260
vytvářet, množit

00:00:23.260 --> 00:00:25.260
a opravovat samy.

00:00:25.260 --> 00:00:27.260
Ukáži vám,

00:00:27.260 --> 00:00:29.260
jak dnes vypadá průmyslová výroba,

00:00:29.260 --> 00:00:32.260
a poté ji porovnám s přírodními systémy.

00:00:32.260 --> 00:00:35.260
Dnes máme mrakodrapy --

00:00:35.260 --> 00:00:37.260
dva a půl roku,

00:00:37.260 --> 00:00:39.260
500 000 až milion součástek,

00:00:39.260 --> 00:00:41.260
dosti složité,

00:00:41.260 --> 00:00:44.260
máme zajímavé nové technologie zpracování oceli, betonu a skla.

00:00:44.260 --> 00:00:46.260
Máme velice zajímavé stroje,

00:00:46.260 --> 00:00:48.260
které nás dostanou do vesmíru --

00:00:48.260 --> 00:00:51.260
5 let, 2,5 milionu součástek.

00:00:51.260 --> 00:00:54.260
Na druhou stranu, když se podíváme na přírodní systémy,

00:00:54.260 --> 00:00:56.260
máme proteiny,

00:00:56.260 --> 00:00:58.260
kterých jsou 2 milionů typů

00:00:58.260 --> 00:01:00.260
a rozmnoží se za 10 000 nanosekund.

00:01:00.260 --> 00:01:02.260
Dále tu je DNA s 3 miliardami párů bází,

00:01:02.260 --> 00:01:05.260
které se zdvojnásobí za přibližně hodinu.

00:01:05.260 --> 00:01:07.260
Přírodní systémy jsou tedy

00:01:07.260 --> 00:01:09.260
velice složité,

00:01:09.260 --> 00:01:11.260
ale zároveň vysoce účinné,

00:01:11.260 --> 00:01:13.260
mnohem účinnější

00:01:13.260 --> 00:01:15.260
a mnohem složitější než cokoliv, co jsme schopni postavit.

00:01:15.260 --> 00:01:17.260
Jsou mnohem účinnější energeticky.

00:01:17.260 --> 00:01:20.260
Málokdy chybují.

00:01:20.260 --> 00:01:22.260
A účinně se spravují po dlouhou dobu.

00:01:22.260 --> 00:01:25.260
Přírodní systémy jsou tedy velice zajímavé.

00:01:25.260 --> 00:01:27.260
A pokud bychom byli schopni si z nich vzít to nejlepší

00:01:27.260 --> 00:01:29.260
a použít to v našem světě,

00:01:29.260 --> 00:01:31.260
pak pro nás skrývají obrovský potenciál ve způsobu, jakým tvoříme věci.

00:01:31.260 --> 00:01:34.260
A to si myslím, že je klíčem k sebekonstrukci.

00:01:34.260 --> 00:01:37.260
Pokud tedy chceme využít sebekonstrukce v našem fyzickém prostředí,

00:01:37.260 --> 00:01:39.260
musíme počítat se 4 klíčovými faktory.

00:01:39.260 --> 00:01:41.260
Zaprvé potřebujeme rozluštit

00:01:41.260 --> 00:01:43.260
komplexitu toho, co chceme vytvořit --

00:01:43.260 --> 00:01:45.260
budovy a stroje.

00:01:45.260 --> 00:01:47.260
A potřebujeme je rozdělit do jednoduchých částí --

00:01:47.260 --> 00:01:49.260
v podstatě DNA toho, jak budovy fungují.

00:01:49.260 --> 00:01:51.260
Dále potřebujeme programovatelné součástky,

00:01:51.260 --> 00:01:53.260
které mohou použít ony části

00:01:53.260 --> 00:01:56.260
k vytvoření něčeho nového nebo k přeměně.

00:01:56.260 --> 00:01:59.260
Potřebujeme energii, která nám dovolí vše aktivovat

00:01:59.260 --> 00:02:02.260
a dovolí sestavení podle programu.

00:02:02.260 --> 00:02:04.260
A nakonec potřebujeme něco, co se bude zabývat chybami,

00:02:04.260 --> 00:02:07.260
abychom se ujistili, že se tvoří to, co chceme.

00:02:07.260 --> 00:02:09.260
Nyní vám ukáži několik projektů,

00:02:09.260 --> 00:02:11.260
na kterých se svými kolegy z MIT pracuji

00:02:11.260 --> 00:02:13.260
v rámci sebekonstrukce.

00:02:13.260 --> 00:02:16.260
První dva projekty jsou MacroBot a DeciBot.

00:02:16.260 --> 00:02:20.260
Jsou to velcí programovatelní roboti --

00:02:20.260 --> 00:02:23.260
250 až 350 cm dlouhé proteiny.

00:02:23.260 --> 00:02:26.260
Je v nich zabudovaná elektronika, senzory.

00:02:26.260 --> 00:02:28.260
Vy naprogramujete, do čeho chcete aby se seskládali,

00:02:28.260 --> 00:02:30.260
do řady úhlů --

00:02:30.260 --> 00:02:32.260
takže -120°, -120°, 0, 0,

00:02:32.260 --> 00:02:35.260
120°, -120° -- něco podobného.

00:02:35.260 --> 00:02:37.260
Tedy řadu úhlů či záhybů.

00:02:37.260 --> 00:02:40.260
Tu pošlete celým řetězcem.

00:02:40.260 --> 00:02:43.260
Každá jednotka obdrží svou informaci -- tedy -120°.

00:02:43.260 --> 00:02:45.260
Jednotka se podle toho otočí a zkontroluje pozici

00:02:45.260 --> 00:02:48.260
a poté pošle informace dál.

00:02:48.260 --> 00:02:50.260
Na tomto projektu pracovali špičkoví

00:02:50.260 --> 00:02:52.260
vědci, inženýři a projektanti.

00:02:52.260 --> 00:02:54.260
A myslím, že nás to nutí se ptát:

00:02:54.260 --> 00:02:56.260
Je to realizovatelné?

00:02:56.260 --> 00:02:58.260
Myslím tím, tisíce dolarů, mnoho hodin práce

00:02:58.260 --> 00:03:01.260
vedlo k vytvoření tohoto 250 cm velkého robota.

00:03:01.260 --> 00:03:04.260
Jsme schopni to přenést na větší věci? Můžeme zakomponovat robotiku do každé součástky?

00:03:04.260 --> 00:03:06.260
Další věcí je

00:03:06.260 --> 00:03:08.260
pasivní charakter,

00:03:08.260 --> 00:03:11.260
neboli pokus o programovatelnost rekonfigurace.

00:03:11.260 --> 00:03:13.260
Ale jde to ještě dál

00:03:13.260 --> 00:03:15.260
a jsou zde pokusy o počty.

00:03:15.260 --> 00:03:17.260
V podstatě to zahrnuje nejzákladnější pilíř programování,

00:03:17.260 --> 00:03:19.260
digitální logický člen,

00:03:19.260 --> 00:03:21.260
přímo do součástek.

00:03:21.260 --> 00:03:23.260
Toto je tedy NAND logický člen.

00:03:23.260 --> 00:03:25.260
Tento čtyřstěn je logickým členem,

00:03:25.260 --> 00:03:27.260
který provádí výpočty,

00:03:27.260 --> 00:03:29.260
a vy máte dva čtyřstěny jako vstupní zdroje.

00:03:29.260 --> 00:03:32.260
Jeden z nich představuje vstup od uživatele, když jej skládáte.

00:03:32.260 --> 00:03:35.260
Druhý je předchozí díl, který jste zasadili.

00:03:35.260 --> 00:03:38.260
Výstup máte ve 3D.

00:03:38.260 --> 00:03:40.260
To znamená,

00:03:40.260 --> 00:03:43.260
že uživatel může naprogramovat, co chce, aby se ze součástek utvořilo.

00:03:43.260 --> 00:03:45.260
Výpočty jsou založeny na minulých procesech

00:03:45.260 --> 00:03:47.260
a na tom, co chcete, aby vzniklo.

00:03:47.260 --> 00:03:49.260
A poté se to začne pohybovat ve třech dimenzích --

00:03:49.260 --> 00:03:51.260
nahoru a dolů.

00:03:51.260 --> 00:03:54.260
Takže nalevo -- vstup [1,1] znamená výstup 0, tedy dolů.

00:03:54.260 --> 00:03:56.260
Napravo --

00:03:56.260 --> 00:03:59.260
vstup [0,0] je výstup 1, takže nahoru.

00:03:59.260 --> 00:04:01.260
To znamená,

00:04:01.260 --> 00:04:03.260
že tyto konstrukce nyní obsahují plány toho,

00:04:03.260 --> 00:04:05.260
co má být postaveno.

00:04:05.260 --> 00:04:08.260
Takže obsahují informaci o tom, co bylo postaveno.

00:04:08.260 --> 00:04:11.260
To umožní autonomní replikaci.

00:04:11.260 --> 00:04:14.260
V tomto případě tomu říkám autonomně řízená duplikace,

00:04:14.260 --> 00:04:16.260
protože konstrukce samotná obsahuje přesné plány.

00:04:16.260 --> 00:04:18.260
Když dojde k chybě, část vyměníte.

00:04:18.260 --> 00:04:21.260
Všechny informace o tom, jak chybu opravit, jsou zahrnuty.

00:04:21.260 --> 00:04:23.260
Takže byste mohli mít něco, co v průběhu čte

00:04:23.260 --> 00:04:25.260
a přímo tvoří výstup.

00:04:25.260 --> 00:04:27.260
Vše je uvnitř, nejsou zde externí pokyny.

00:04:27.260 --> 00:04:30.260
Poslední projekt, který vám ukážu, je Biased Chains.

00:04:30.260 --> 00:04:33.260
Je to asi to nejvíce strhující, co zatím

00:04:33.260 --> 00:04:35.260
v oblasti sebekonstrukce existuje.

00:04:35.260 --> 00:04:37.260
Využívá to rekonfigurace

00:04:37.260 --> 00:04:39.260
a programovatelnosti

00:04:39.260 --> 00:04:42.260
a tvoří to zcela pasivní systém.

00:04:43.260 --> 00:04:45.260
Takže máte řetězec prvků.

00:04:45.260 --> 00:04:47.260
Prvky jsou stejné

00:04:47.260 --> 00:04:49.260
a závislé.

00:04:49.260 --> 00:04:52.260
Každý řetězec, nebo každý prvek, se chce otočit buď doleva nebo doprava.

00:04:52.260 --> 00:04:55.260
Vy tedy utvoříte řetězec, vlastně ho naprogramujete.

00:04:55.260 --> 00:04:58.260
Každému prvku řeknete, jak se má natočit.

00:04:58.260 --> 00:05:01.260
Když řetězcem trhnete,

00:05:01.260 --> 00:05:03.260
uspořádá se

00:05:03.260 --> 00:05:06.260
do podoby, kterou jste předprogramovali --

00:05:06.260 --> 00:05:08.260
v tomto případě do spirály

00:05:08.260 --> 00:05:11.260
nebo v tomto případě

00:05:11.260 --> 00:05:14.260
do dvou krychlí vedle sebe.

00:05:14.260 --> 00:05:16.260
Můžete tedy naprogramovat

00:05:16.260 --> 00:05:18.260
libovolný trojrozměrný tvar --

00:05:18.260 --> 00:05:21.260
jednorozměrný či dvourozměrný -- to vše pasivně.

00:05:21.260 --> 00:05:23.260
Takže co nám toto vše napovídá o budoucnosti?

00:05:23.260 --> 00:05:25.260
Myslím, že nám to naznačuje,

00:05:25.260 --> 00:05:28.260
že zde jsou nové možnosti sebekonstrukce, replikace a oprav

00:05:28.260 --> 00:05:31.260
v budovách, strojích a dalších konstrukcích.

00:05:31.260 --> 00:05:33.260
Jedná se o nový typ programovatelnosti.

00:05:33.260 --> 00:05:35.260
Z toho jsou odvozeny nové možnosti pro počítače.

00:05:35.260 --> 00:05:37.260
Bude existovat prostorové programování.

00:05:37.260 --> 00:05:39.260
Představte si, že by budovy, mosty, stroje

00:05:39.260 --> 00:05:41.260
a všechny jejich součásti mohly samostatně pracovat.

00:05:41.260 --> 00:05:43.260
Je to úžasná paralelní distribuovaná výpočetní síla.

00:05:43.260 --> 00:05:45.260
Tolik nových možností.

00:05:45.260 --> 00:05:47.260
Má to úžasný potenciál.

00:05:47.260 --> 00:05:49.260
To, co jsem vám ukázal,

00:05:49.260 --> 00:05:51.260
jsou pouze malé krůčky vstříc této budoucnosti,

00:05:51.260 --> 00:05:53.260
pokud zavedeme tyto nové technologie

00:05:53.260 --> 00:05:55.260
světa sebekonstrukce.

00:05:55.260 --> 00:05:57.260
Děkuji.

00:05:57.260 --> 00:05:59.260
(Potlesk)

