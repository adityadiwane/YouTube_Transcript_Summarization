WEBVTT
Kind: captions
Language: id

00:00:00.000 --> 00:00:07.000
Translator: Antonius Yudi Sendjaja
Reviewer: Ade Indarta

00:00:15.260 --> 00:00:17.260
Hari ini saya ingin menunjukkan

00:00:17.260 --> 00:00:19.260
masa depan cara kita membuat sesuatu.

00:00:19.260 --> 00:00:21.260
Saya percaya sebentar lagi gedung-gedung dan mesin-mesin

00:00:21.260 --> 00:00:23.260
akan merakit diri sendiri,

00:00:23.260 --> 00:00:25.260
bereplikasi dan memperbaiki sendiri secara mandiri.

00:00:25.260 --> 00:00:27.260
Jadi saya akan menunjukkan

00:00:27.260 --> 00:00:29.260
apa yang menurut saya kondisi perakitan saat ini,

00:00:29.260 --> 00:00:32.260
lalu membandingkannya dengan beberapa sistem alami.

00:00:32.260 --> 00:00:35.260
Kondisi perakitan saat ini, gedung pencakar langit --

00:00:35.260 --> 00:00:37.260
dua setengah tahun,

00:00:37.260 --> 00:00:39.260
500.000 sampai 1.000.000 bagian,

00:00:39.260 --> 00:00:41.260
cukup kompleks,

00:00:41.260 --> 00:00:44.260
teknologi baru yang menarik di bidang baja, beton, kaca.

00:00:44.260 --> 00:00:46.260
Kita punya mesin-mesin hebat

00:00:46.260 --> 00:00:48.260
yang dapat membawa kita ke luar angkasa --

00:00:48.260 --> 00:00:51.260
lima tahun, 2,5 juta bagian.

00:00:51.260 --> 00:00:54.260
Namun di sisi lain, jika Anda melihat sistem alami,

00:00:54.260 --> 00:00:56.260
ada protein

00:00:56.260 --> 00:00:58.260
yang memiliki 2 juta jenis,

00:00:58.260 --> 00:01:00.260
dapat terbentuk dalam 10.000 nanodetik,

00:01:00.260 --> 00:01:02.260
atau DNA dengan tiga juta pasangan basa

00:01:02.260 --> 00:01:05.260
yang dapat bereplikasi dalam waktu 1 jam.

00:01:05.260 --> 00:01:07.260
Jadi ada kompleksitas semacam ini

00:01:07.260 --> 00:01:09.260
dalam sistem alami kita,

00:01:09.260 --> 00:01:11.260
namun juga sangat efisien,

00:01:11.260 --> 00:01:13.260
jauh lebih efisien daripada apapun yang dapat kita buat,

00:01:13.260 --> 00:01:15.260
jauh lebih kompleks daripada apapun yang dapat kita buat.

00:01:15.260 --> 00:01:17.260
Jauh lebih efisien dalam hal pemakaian energi.

00:01:17.260 --> 00:01:20.260
Hampir tidak pernah membuat kesalahan.

00:01:20.260 --> 00:01:22.260
Serta dapat memperbaiki secara mandiri.

00:01:22.260 --> 00:01:25.260
Jadi ada sesuatu yang sangat menarik dari sistem alami kita.

00:01:25.260 --> 00:01:27.260
Jika kita dapat menerjemahkannya

00:01:27.260 --> 00:01:29.260
ke dalam lingkungan pembangunan kita,

00:01:29.260 --> 00:01:31.260
ada potensi yang sangat menarik bagi kita dalam membuat sesuatu.

00:01:31.260 --> 00:01:34.260
Saya rasa kunci dari itu adalah perakitan mandiri.

00:01:34.260 --> 00:01:37.260
Jadi jika kita ingin memanfaatkan perakitan mandiri pada lingkungan fisik kita,

00:01:37.260 --> 00:01:39.260
saya pikir ada empat faktor kunci.

00:01:39.260 --> 00:01:41.260
Yang pertama, kita harus menguraikan

00:01:41.260 --> 00:01:43.260
semua kompleksitas dari apa yang ingin kita bangun --

00:01:43.260 --> 00:01:45.260
gedung-gedung dan mesin-mesin.

00:01:45.260 --> 00:01:47.260
Kita harus menguraikannya menjadi urutan sederhana --

00:01:47.260 --> 00:01:49.260
pada dasarnya DNA dari cara kerja gedung itu.

00:01:49.260 --> 00:01:51.260
Lalu kita memerlukan bagian yang bisa diprogram

00:01:51.260 --> 00:01:53.260
yang dapat mengambil urutan itu

00:01:53.260 --> 00:01:56.260
dan menggunakannya untuk membentuk atau membangun.

00:01:56.260 --> 00:01:59.260
Kita perlu energi yang memungkinkannya menjadi aktif,

00:01:59.260 --> 00:02:02.260
memungkinkan bagian-bagiannya terbentuk sendiri dengan program itu.

00:02:02.260 --> 00:02:04.260
Kita perlu pengoreksi kesalahan

00:02:04.260 --> 00:02:07.260
untuk menjamin kita membangun apa yang kita inginkan.

00:02:07.260 --> 00:02:09.260
Saya ingin menunjukkan beberapa proyek

00:02:09.260 --> 00:02:11.260
yang sedang saya kerjakan bersama beberapa rekan di MIT

00:02:11.260 --> 00:02:13.260
untuk mencapai masa depan perakitan mandiri ini.

00:02:13.260 --> 00:02:16.260
Dua hal yang pertama adalah MacroBot dan DeciBot.

00:02:16.260 --> 00:02:20.260
Proyek ini adalah robot berukuran besar yang dapat dibangun ulang --

00:02:20.260 --> 00:02:23.260
protein sepanjang 8-12 kaki.

00:02:23.260 --> 00:02:26.260
Dilengkapi dengan peralatan elektronik dan mekanik, sensor.

00:02:26.260 --> 00:02:28.260
Anda menguraikan apa yang ingin Anda bentuk,

00:02:28.260 --> 00:02:30.260
menjadi urutan-urutan sudut --

00:02:30.260 --> 00:02:32.260
negatif 120, negatif 120, 0, 0,

00:02:32.260 --> 00:02:35.260
120, negatif 120, -- seperti itu.

00:02:35.260 --> 00:02:37.260
jadi urutan sudut, atau lekukan ini,

00:02:37.260 --> 00:02:40.260
urutan ini dikirim melalui senar ini.

00:02:40.260 --> 00:02:43.260
Setiap bagian mengambil pesan itu -- negatif 120.

00:02:43.260 --> 00:02:45.260
Lalu memutarnya sejauh itu, memeriksa apakah sudah benar

00:02:45.260 --> 00:02:48.260
lalu meneruskan kepada tetangganya.

00:02:48.260 --> 00:02:50.260
Jadi para ilmuwan, para insinyur

00:02:50.260 --> 00:02:52.260
para perancang yang bekerja pada proyek ini sangatlah brilian.

00:02:52.260 --> 00:02:54.260
Saya pikir ini benar-benar mencerahkan:

00:02:54.260 --> 00:02:56.260
Apakah ini bisa dilipatgandakan?

00:02:56.260 --> 00:02:58.260
Maksud saya, ribuan dolar, banyak jam kerja

00:02:58.260 --> 00:03:01.260
untuk membuat robot 8 kaki ini.

00:03:01.260 --> 00:03:04.260
Dapatkah kita melipatgandakan ini? Dapatkah kita memasang robot pada setiap bagian?

00:03:04.260 --> 00:03:06.260
Pertanyaan selanjutnya,

00:03:06.260 --> 00:03:08.260
dengan mempertimbangkan sifat pasifnya,

00:03:08.260 --> 00:03:11.260
atau secara pasif mencoba memiliki kemampuan program perakitan ulang.

00:03:11.260 --> 00:03:13.260
Namun tidak hanya sampai di situ,

00:03:13.260 --> 00:03:15.260
mencoba memakai komputasi aktual.

00:03:15.260 --> 00:03:17.260
Yang pada dasarnya memuat komponen dasar dari komputasi,

00:03:17.260 --> 00:03:19.260
gerbang logika digital,

00:03:19.260 --> 00:03:21.260
langsung ke bagiannya.

00:03:21.260 --> 00:03:23.260
Jadi inilah gerbang NAND.

00:03:23.260 --> 00:03:25.260
Ada satu bentuk tetrahedral yang merupakan gerbangnya

00:03:25.260 --> 00:03:27.260
yang akan melakukan perhitungan

00:03:27.260 --> 00:03:29.260
dan ada dua masukan tetrahedral.

00:03:29.260 --> 00:03:32.260
Salah satunya adalah masukan dari pengguna, karena Anda yang membangun.

00:03:32.260 --> 00:03:35.260
Yang lain adalah dari komponen lain yang telah dipasang.

00:03:35.260 --> 00:03:38.260
Lalu program ini memberi keluaran dalam ruang 3 dimensi.

00:03:38.260 --> 00:03:40.260
Jadi maksudnya

00:03:40.260 --> 00:03:43.260
si pengguna dapat mulai menentukan apa yang mereka inginkan.

00:03:43.260 --> 00:03:45.260
Komponen ini menghitung apa yang dilakukan sebelumnya

00:03:45.260 --> 00:03:47.260
dan apa yang Anda tentukan harus dilakukan.

00:03:47.260 --> 00:03:49.260
Lalu komponen ini mulai bergerak dalam ruang tiga dimensi --

00:03:49.260 --> 00:03:51.260
ke atas dan ke bawah.

00:03:51.260 --> 00:03:54.260
Jadi di sisi sebelah kiri [1,1] masukan = 0 keluaran, berarti ke bawah.

00:03:54.260 --> 00:03:56.260
Di sebelah kanan

00:03:56.260 --> 00:03:59.260
[0,0] masukan = 1 keluaran, berarti ke atas.

00:03:59.260 --> 00:04:01.260
Sehingga maksud hal ini sebenarnya

00:04:01.260 --> 00:04:03.260
adalah struktur kita mengandung cetak biru

00:04:03.260 --> 00:04:05.260
dari apa yang ingin kita bangun.

00:04:05.260 --> 00:04:08.260
Mereka mendapat semua informasi tentang apa yang telah dibangun di dalamnya.

00:04:08.260 --> 00:04:11.260
Artinya kita bisa memiliki semacam replikasi mandiri.

00:04:11.260 --> 00:04:14.260
Saya menyebutnya "self-guided replication" (replikasi pandu mandiri)

00:04:14.260 --> 00:04:16.260
karena struktur Anda mengandung cetak biru sebenarnya.

00:04:16.260 --> 00:04:18.260
Jika ada kesalahan, Anda dapat mengganti satu bagian.

00:04:18.260 --> 00:04:21.260
Semua informasi lokal tertanam, bisa memberi tahu Anda cara memperbaikinya.

00:04:21.260 --> 00:04:23.260
Jadi mungkin ada sesuatu yang menaiki dan membacanya

00:04:23.260 --> 00:04:25.260
dan dapat mengeluarkannya satu per satu.

00:04:25.260 --> 00:04:27.260
Yang langsung terpasang, tanpa perintah dari luar.

00:04:27.260 --> 00:04:30.260
Lalu proyek terakhir yang ingin saya tunjukkan, "Biased Chains," (Rantai Kecenderungan)

00:04:30.260 --> 00:04:33.260
yang mungkin merupakan contoh yang paling menarik yang kami miliki

00:04:33.260 --> 00:04:35.260
tentang sistem perakitan mandiri pasif.

00:04:35.260 --> 00:04:37.260
Sistem ini menggunakan kemampuan penyusunan ulang

00:04:37.260 --> 00:04:39.260
dan kemampuan program

00:04:39.260 --> 00:04:42.260
yang membuatnya menjadi sistem pasif seutuhnya.

00:04:43.260 --> 00:04:45.260
Jadi Anda memiliki rantai elemen.

00:04:45.260 --> 00:04:47.260
Setiap elemennya benar-benar sama,

00:04:47.260 --> 00:04:49.260
dan memiliki kecenderungan.

00:04:49.260 --> 00:04:52.260
Setiap rantai, atau setiap elemen, cenderung ke kanan atau kiri.

00:04:52.260 --> 00:04:55.260
Lalu saat Anda merakit rantai ini, Anda memprogramnya.

00:04:55.260 --> 00:04:58.260
Anda memerintahkan setiap bagian untuk ke kanan atau kiri.

00:04:58.260 --> 00:05:01.260
Sehingga saat rantainya digoyangkan

00:05:01.260 --> 00:05:03.260
rantai ini akan terbentuk

00:05:03.260 --> 00:05:06.260
menjadi susunan yang telah Anda program --

00:05:06.260 --> 00:05:08.260
dalam contoh ini, bentuk spiral

00:05:08.260 --> 00:05:11.260
atau dalam contoh ini,

00:05:11.260 --> 00:05:14.260
dua kubus bersebelahan.

00:05:14.260 --> 00:05:16.260
Jadi Anda dapat memprogram

00:05:16.260 --> 00:05:18.260
bentuk tiga dimensi apapun --

00:05:18.260 --> 00:05:21.260
atau satu atau dua dimensi -- ke dalam rantai ini dengan pasif.

00:05:21.260 --> 00:05:23.260
Lalu apa artinya bagi masa depan?

00:05:23.260 --> 00:05:25.260
Saya rasa ini memberi tahu kita

00:05:25.260 --> 00:05:28.260
bahwa ada peluang baru untuk perakitan, replikasi, dan perbaikan mandiri

00:05:28.260 --> 00:05:31.260
pada struktur fisik kita, gedung-gedung, mesin-mesin.

00:05:31.260 --> 00:05:33.260
Ada kemampuan pemrograman baru pada bagian ini.

00:05:33.260 --> 00:05:35.260
Dari situ kita mendapat peluang komputasi baru.

00:05:35.260 --> 00:05:37.260
Kita memiliki komputasi tata ruang.

00:05:37.260 --> 00:05:39.260
Bayangkan jika gedung, jembatan, dan mesin-mesin kita

00:05:39.260 --> 00:05:41.260
semua komponennya dapat menghitung.

00:05:41.260 --> 00:05:43.260
Itulah kekuatan mengagumkan dari komputasi paralel dan terdistribusi,

00:05:43.260 --> 00:05:45.260
peluang rancangan baru.

00:05:45.260 --> 00:05:47.260
Jadi inilah potensi menarik dari hal ini.

00:05:47.260 --> 00:05:49.260
Jadi saya rasa proyek yang saya tunjukkan ini

00:05:49.260 --> 00:05:51.260
hanyalah langkah kecil menuju masa depan,

00:05:51.260 --> 00:05:53.260
jika kita menerapkan teknologi baru ini

00:05:53.260 --> 00:05:55.260
pada dunia perakitan mandiri yang baru.

00:05:55.260 --> 00:05:57.260
Terima kasih.

00:05:57.260 --> 00:05:59.260
(Tepuk tangan)

