WEBVTT
Kind: captions
Language: de

00:00:00.000 --> 00:00:07.000
Übersetzung: Jessica K.
Lektorat: Karin Friedli

00:00:15.260 --> 00:00:17.260
Ich möchte Ihnen heute zeigen,

00:00:17.260 --> 00:00:19.260
wie wir in Zukunft Dinge herstellen werden.

00:00:19.260 --> 00:00:21.260
Ich glaube, dass unsere Gebäude und Maschinen

00:00:21.260 --> 00:00:23.260
sich bald selbst zusammenbauen,

00:00:23.260 --> 00:00:25.260
vervielfältigen und reparieren werden.

00:00:25.260 --> 00:00:27.260
Ich werde Ihnen zeigen,

00:00:27.260 --> 00:00:29.260
was ich für die heutigen Produktionsmethoden halte,

00:00:29.260 --> 00:00:32.260
und diese dann mit einigen natürlichen Systemen vergleichen.

00:00:32.260 --> 00:00:35.260
In der gegenwärtigen Fertigungsindustrie haben wir Wolkenkratzer –

00:00:35.260 --> 00:00:37.260
zweieinhalb Jahre [Bauzeit],

00:00:37.260 --> 00:00:39.260
eine halbe bis eine Million Teile,

00:00:39.260 --> 00:00:41.260
ziemlich komplex,

00:00:41.260 --> 00:00:44.260
neue und aufregende Technologien aus Stahl, Beton, Glas.

00:00:44.260 --> 00:00:46.260
Wir haben aufregende Maschinen,

00:00:46.260 --> 00:00:48.260
die uns in den Weltraum bringen –

00:00:48.260 --> 00:00:51.260
fünf Jahre [Bauzeit], zweieinhalb Millionen Teile.

00:00:51.260 --> 00:00:54.260
Wenn man auf der anderen Seite natürliche Systeme betrachtet,

00:00:54.260 --> 00:00:56.260
findet man Proteine,

00:00:56.260 --> 00:00:58.260
die zwei Millionen Typen besitzen

00:00:58.260 --> 00:01:00.260
und sich in zehn Mikrosekunden falten können,

00:01:00.260 --> 00:01:02.260
oder DNA mit drei Milliarden Basenpaaren,

00:01:02.260 --> 00:01:05.260
die sich in etwa einer Stunde kopieren lassen.

00:01:05.260 --> 00:01:07.260
Da gibt es also diese ganze Komplexität

00:01:07.260 --> 00:01:09.260
in unseren natürlichen Systemen,

00:01:09.260 --> 00:01:11.260
aber sie sind extrem effizient,

00:01:11.260 --> 00:01:13.260
viel effizienter als alles, was wir herstellen können,

00:01:13.260 --> 00:01:15.260
weit komplexer als alles, was wir bauen können.

00:01:15.260 --> 00:01:17.260
Sie sind viel energieeffizienter.

00:01:17.260 --> 00:01:20.260
Sie machen fast nie Fehler.

00:01:20.260 --> 00:01:22.260
Und sie sind langlebig, da sie sich selbst reparieren können.

00:01:22.260 --> 00:01:25.260
Es gibt bei natürlichen Systemen also viel Interessantes zu entdecken.

00:01:25.260 --> 00:01:27.260
Und wenn wir es schaffen,

00:01:27.260 --> 00:01:29.260
das in unsere gebaute Umgebung einfließen zu lassen,

00:01:29.260 --> 00:01:31.260
dann haben wir ein aufregendes Potential für neue Bauweisen.

00:01:31.260 --> 00:01:34.260
Und ich glaube, dass der Schlüssel in Selbstmontage besteht.

00:01:34.260 --> 00:01:37.260
Wenn wir Selbstmontage in unserer physischen Umwelt nutzen wollen,

00:01:37.260 --> 00:01:39.260
gibt es meiner Meinung nach vier zentrale Faktoren.

00:01:39.260 --> 00:01:41.260
Der erste ist, das wir die ganze Komplexität

00:01:41.260 --> 00:01:43.260
der Dinge, die wir bauen wollen, entschlüsseln müssen –

00:01:43.260 --> 00:01:45.260
also unsere Gebäude und Maschinen.

00:01:45.260 --> 00:01:47.260
Und wir müssen das in einfache Sequenzen übersetzen –

00:01:47.260 --> 00:01:49.260
quasi die DNA davon, wie unsere Gebäude funktionieren.

00:01:49.260 --> 00:01:51.260
Dann brauchen wir programmierbare Teile,

00:01:51.260 --> 00:01:53.260
die diese Sequenz heranziehen

00:01:53.260 --> 00:01:56.260
und zum Zusammenfalten oder Rekonfigurieren verwenden können.

00:01:56.260 --> 00:01:59.260
Wir brauchen Aktivierungsenergie, damit unsere Teile

00:01:59.260 --> 00:02:02.260
aus dem Programm hochklappen können.

00:02:02.260 --> 00:02:04.260
Und wir brauchen eine Art Redundanz zur Fehlerkorrektur,

00:02:04.260 --> 00:02:07.260
damit auch wirklich das entsteht, was wir bauen wollen.

00:02:07.260 --> 00:02:09.260
Ich zeige Ihnen einige Projekte, an denen

00:02:09.260 --> 00:02:11.260
meine Kollegen und ich am MIT arbeiten,

00:02:11.260 --> 00:02:13.260
damit Selbstmontage in Zukunft realisiert werden kann.

00:02:13.260 --> 00:02:16.260
Die ersten beiden sind MacroBot und DeciBot.

00:02:16.260 --> 00:02:20.260
Diese Projekte sind großangelegte, rekonfigurierbare Roboter –

00:02:20.260 --> 00:02:23.260
zweieinhalb bis vier Meter lange Proteine.

00:02:23.260 --> 00:02:26.260
Sie sind mit elektromechanischen Geräten ausgestattet, Sensoren.

00:02:26.260 --> 00:02:28.260
Man dekodiert das, was man zusammenfalten will,

00:02:28.260 --> 00:02:30.260
in eine Sequenz von Winkeln –

00:02:30.260 --> 00:02:32.260
also minus 120, minus 120, 0, 0,

00:02:32.260 --> 00:02:35.260
120, minus 120 – etwas in der Art;

00:02:35.260 --> 00:02:37.260
eine Sequenz von Winkeln, oder Drehungen,

00:02:37.260 --> 00:02:40.260
und man sendet diese Sequenz durch die Kette.

00:02:40.260 --> 00:02:43.260
Jede Einheit greift ihre Nachricht auf – also minus 120 –

00:02:43.260 --> 00:02:45.260
sie rotiert entsprechend, prüft, ob sie angekommen ist,

00:02:45.260 --> 00:02:48.260
und leitet sie an die benachbarte Einheit weiter.

00:02:48.260 --> 00:02:50.260
Dies hier sind die brillanten Wissenschaftler,

00:02:50.260 --> 00:02:52.260
Ingenieure und Designer, die an diesem Projekt gearbeitet haben.

00:02:52.260 --> 00:02:54.260
Und ich denke, es macht eines wirklich klar:

00:02:54.260 --> 00:02:56.260
Ist dies wirklich skalierbar?

00:02:56.260 --> 00:02:58.260
Ich meine, Tausende von Dollar, viele Arbeitsstunden,

00:02:58.260 --> 00:03:01.260
um diesen zweieinhalb Meter hohen Roboter zu schaffen.

00:03:01.260 --> 00:03:04.260
Können wir das wirklich hochskalieren? Können wir Robotik wirklich in jedes Teil einbetten?

00:03:04.260 --> 00:03:06.260
Das nächste Projekt stellt das in Frage

00:03:06.260 --> 00:03:08.260
und betrachtet die passive Natur

00:03:08.260 --> 00:03:11.260
oder den passiven Versuch, Rekonfiguration programmierbar zu machen.

00:03:11.260 --> 00:03:13.260
Aber es geht einen Schritt weiter

00:03:13.260 --> 00:03:15.260
und versucht, tatsächliche Berechnungen möglich zu machen.

00:03:15.260 --> 00:03:17.260
Es integriert im Grunde den fundamentalsten Bestandteil von EDV,

00:03:17.260 --> 00:03:19.260
das digitale Logikgatter,

00:03:19.260 --> 00:03:21.260
direkt in die Teile.

00:03:21.260 --> 00:03:23.260
Dies ist ein NAND-Gatter.

00:03:23.260 --> 00:03:25.260
Man hat ein Tetraeder, welches das Gatter darstellt,

00:03:25.260 --> 00:03:27.260
das die Berechnungen durchführen wird,

00:03:27.260 --> 00:03:29.260
und man hat zwei Input-Tetraeder.

00:03:29.260 --> 00:03:32.260
Eines stellt die Eingabe des Benutzers dar, während man die Bausteine herstellt.

00:03:32.260 --> 00:03:35.260
Das andere stammt von dem vorangegangenen Bauteil, das angeordnet wurde.

00:03:35.260 --> 00:03:38.260
Und dann liefert es einen Output im dreidimensionalen Raum.

00:03:38.260 --> 00:03:40.260
Das bedeutet,

00:03:40.260 --> 00:03:43.260
dass der Benutzer eingeben kann, was die Bauteile tun sollen.

00:03:43.260 --> 00:03:45.260
Es führt Berechnungen durch auf Grundlage dessen, was es vorher getan hat,

00:03:45.260 --> 00:03:47.260
und was der Benutzer von ihm verlangt.

00:03:47.260 --> 00:03:49.260
Und nun beginnt es, sich im dreidimensionalen Raum zu bewegen –

00:03:49.260 --> 00:03:51.260
hoch und runter.

00:03:51.260 --> 00:03:54.260
Auf der linken Seite entspricht der Input [1,1] dem Output 0, der hinunter geht.

00:03:54.260 --> 00:03:56.260
Auf der rechten Seite

00:03:56.260 --> 00:03:59.260
entspricht der Input [0,0] dem Output 1, der hoch geht.

00:03:59.260 --> 00:04:01.260
Was das wirklich bedeutet, ist,

00:04:01.260 --> 00:04:03.260
dass unsere Strukturen nun die Pläne dessen enthalten,

00:04:03.260 --> 00:04:05.260
was wir bauen wollen.

00:04:05.260 --> 00:04:08.260
Sie besitzen also sämtliche Informationen darüber, was gebaut worden ist.

00:04:08.260 --> 00:04:11.260
Das bedeutet, wir können eine Form von Selbstreplikation erreichen.

00:04:11.260 --> 00:04:14.260
In diesem Fall nenne ich es selbstgeleitete Replikation,

00:04:14.260 --> 00:04:16.260
weil die Struktur die genauen Baupläne enthält.

00:04:16.260 --> 00:04:18.260
Tauchen Fehler auf, kann man einen Teil austauschen.

00:04:18.260 --> 00:04:21.260
Die ganzen lokalen Informationen sind integriert, um zu zeigen, wie man sie beheben kann.

00:04:21.260 --> 00:04:23.260
Man könnte also etwas haben, das mitklettert und abliest

00:04:23.260 --> 00:04:25.260
und einen Output von eins zu eins liefert.

00:04:25.260 --> 00:04:27.260
Es ist direkt integriert; es gibt keine Anweisungen von außen.

00:04:27.260 --> 00:04:30.260
Das letzte Projekt, was ich zeigen werde, nennt sich Biased Chains,

00:04:30.260 --> 00:04:33.260
und es stellt das wohl aufregendste Beispiel selbstmontierender Systeme dar,

00:04:33.260 --> 00:04:35.260
das wir im Moment haben.

00:04:35.260 --> 00:04:37.260
Es greift die Fähigkeit zur Rekonfiguration

00:04:37.260 --> 00:04:39.260
und zur Programmierung auf

00:04:39.260 --> 00:04:42.260
und schafft ein komplett passives System.

00:04:43.260 --> 00:04:45.260
Im Grunde hat man eine Kette von Elementen.

00:04:45.260 --> 00:04:47.260
Jedes Element ist vollkommen identisch

00:04:47.260 --> 00:04:49.260
und sie sind polarisiert.

00:04:49.260 --> 00:04:52.260
Jede Kette, oder jedes Element, will sich nach rechts oder nach links drehen.

00:04:52.260 --> 00:04:55.260
Während man also die Kette zusammensetzt, programmiert man sie im Grunde.

00:04:55.260 --> 00:04:58.260
Man sagt jeder Einheit, ob sie sich nach rechts oder nach links drehen soll.

00:04:58.260 --> 00:05:01.260
Wenn man die Kette schüttelt,

00:05:01.260 --> 00:05:03.260
faltet sie sich zusammen

00:05:03.260 --> 00:05:06.260
zu einer Konfiguration, die man einprogrammiert hat –

00:05:06.260 --> 00:05:08.260
in diesem Fall eine Spirale

00:05:08.260 --> 00:05:11.260
oder in diesem Fall

00:05:11.260 --> 00:05:14.260
zwei nebeneinander liegende Quadrate.

00:05:14.260 --> 00:05:16.260
Man kann also im Grund jede mögliche

00:05:16.260 --> 00:05:18.260
dreidimensionale Form –

00:05:18.260 --> 00:05:21.260
oder eindimensional, zweidimensional – völlig passiv in diese Kette einprogrammieren.

00:05:21.260 --> 00:05:23.260
Was sagt uns das über die Zukunft?

00:05:23.260 --> 00:05:25.260
Ich denke, dass es uns sagt,

00:05:25.260 --> 00:05:28.260
dass es Möglichkeiten der Selbstmontage, Replikation und Reparatur

00:05:28.260 --> 00:05:31.260
in unseren physischen Strukturen, unseren Gebäuden und Maschinen gibt.

00:05:31.260 --> 00:05:33.260
Es gibt neue Möglichkeiten zur Programmierung in diesen Teilen.

00:05:33.260 --> 00:05:35.260
Und daraus entstehen neue Möglichkeiten für die EDV.

00:05:35.260 --> 00:05:37.260
Wir werden räumliches Programmieren haben.

00:05:37.260 --> 00:05:39.260
Stellen Sie sich vor, unsere Gebäude, Brücken, Maschinen,

00:05:39.260 --> 00:05:41.260
all unsere Bauteile könnten Berechnungen durchführen.

00:05:41.260 --> 00:05:43.260
Das würde parallele und verteilte Rechenleistung,

00:05:43.260 --> 00:05:45.260
neue Designmöglichkeiten bedeuten.

00:05:45.260 --> 00:05:47.260
Es gibt also ein aufregendes Potential dafür.

00:05:47.260 --> 00:05:49.260
Ich denke, dass diese Projekte, die ich hier gezeigt habe,

00:05:49.260 --> 00:05:51.260
nur ein winziger Schritt in Richtung dieser Zukunft sind,

00:05:51.260 --> 00:05:53.260
wenn wir diese neuen Technologien

00:05:53.260 --> 00:05:55.260
für eine neue, sich selbst erschaffende Welt implementieren.

00:05:55.260 --> 00:05:57.260
Vielen Dank.

00:05:57.260 --> 00:05:59.260
(Applaus)

