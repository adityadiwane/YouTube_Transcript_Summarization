WEBVTT
Kind: captions
Language: vi

00:00:00.000 --> 00:00:07.000
Translator: Hoan Thanh Nguyen Mai
Reviewer: Thanh Pham

00:00:15.260 --> 00:00:17.260
Hôm nay tôi muốn giới thiệu với các bạn

00:00:17.260 --> 00:00:19.260
tương lai của cách mà chúng ta tạo nên đồ vật.

00:00:19.260 --> 00:00:21.260
Tôi tin rằng sớm thôi, nhà cửa và máy móc

00:00:21.260 --> 00:00:23.260
sẽ tự lắp ráp,

00:00:23.260 --> 00:00:25.260
sao chép và sửa chữa bản thân chúng,

00:00:25.260 --> 00:00:27.260
Nên tôi sẽ giới thiệu với các bạn

00:00:27.260 --> 00:00:29.260
điều mà tôi tin là tình trạng xây dựng hiện nay,

00:00:29.260 --> 00:00:32.260
và so sánh nó với một vài hệ thống tự nhiên.

00:00:32.260 --> 00:00:35.260
Trong tình trạng xây dựng hiện nay, chúng ta có những tòa nhà chọc trời --

00:00:35.260 --> 00:00:37.260
thời gian xây lắp là hai năm rưỡi,

00:00:37.260 --> 00:00:39.260
500,000 đến một triệu linh kiện,

00:00:39.260 --> 00:00:41.260
những công nghệ khá là phức tạp,

00:00:41.260 --> 00:00:44.260
mới mẻ, đầy hấp dẫn từ thép, bê tông, và thủy tinh.

00:00:44.260 --> 00:00:46.260
Chúng ta có những cỗ máy thú vị

00:00:46.260 --> 00:00:48.260
có thể đưa ta vào không gian --

00:00:48.260 --> 00:00:51.260
mất 5 năm lắp ráp, 2,5 triệu phần nhỏ.

00:00:51.260 --> 00:00:54.260
Nhưng mặt khác, nếu các bạn nhìn vào các hệ thống tự nhiên,

00:00:54.260 --> 00:00:56.260
+

00:00:56.260 --> 00:00:58.260
bao gồm hai triệu loại,

00:00:58.260 --> 00:01:00.260
có thể tự xoắn lại trong 10,000 phần tỉ giây,

00:01:00.260 --> 00:01:02.260
hoặc ADN với ba tỉ cặp bazơ nitơ

00:01:02.260 --> 00:01:05.260
mà chúng ta có thể sao chép trong vòng một giờ.

00:01:05.260 --> 00:01:07.260
Đó là toàn bộ sự phức tạp

00:01:07.260 --> 00:01:09.260
trong hệ thống tự nhiên của chúng ta,

00:01:09.260 --> 00:01:11.260
nhưng chúng cực kỳ hiệu quả,

00:01:11.260 --> 00:01:13.260
hiệu quả hơn rất nhiều so bất kỳ thứ gì ta có thể tạo ra,

00:01:13.260 --> 00:01:15.260
phức tạp hơn rất nhiều so với bất kỳ thứ gì ta có thể tạo ra.

00:01:15.260 --> 00:01:17.260
Chúng hiệu quả hơn nhiều về mặt năng lượng.

00:01:17.260 --> 00:01:20.260
Chúng hiếm khi mắc lỗi.

00:01:20.260 --> 00:01:22.260
Và chúng có thể tự sửa chữa để đảm bảo tuổi thọ.

00:01:22.260 --> 00:01:25.260
Vậy nên có điều gì đó cực kỳ thú vị về những hệ thống tự nhiên.

00:01:25.260 --> 00:01:27.260
Và nếu ta có thể giải mã được điều đó

00:01:27.260 --> 00:01:29.260
để đưa vào môi trường xây dựng của chúng ta,

00:01:29.260 --> 00:01:31.260
thì sẽ có nhiều tiềm năng hấp dẫn cho cách thức mà chúng ta xây dựng.

00:01:31.260 --> 00:01:34.260
Và tôi nghĩ chìa khóa ở đây chính là sự tự lắp ráp.

00:01:34.260 --> 00:01:37.260
Nếu chúng ta muốn áp dụng sự tự lắp ráp vào môi trường vật chất,

00:01:37.260 --> 00:01:39.260
thì tôi nghĩ có bốn điểm quan trọng.

00:01:39.260 --> 00:01:41.260
Thứ nhất là chúng ta cần giải mã

00:01:41.260 --> 00:01:43.260
mọi tính phức tạp của thứ mà chúng ta muốn xây dựng --

00:01:43.260 --> 00:01:45.260
bao gồm cả các tòa nhà và máy móc.

00:01:45.260 --> 00:01:47.260
Và chúng ta cần giải mã điều đó thành những chuỗi đơn giản --

00:01:47.260 --> 00:01:49.260
cơ bản đó chính là ADN về cách vận hành của những thứ mà ta tạo ra.

00:01:49.260 --> 00:01:51.260
Sau đó chúng ta cần những phần có thể lập trình được

00:01:51.260 --> 00:01:53.260
có khả năng nhận được chuỗi trình tự

00:01:53.260 --> 00:01:56.260
và sử dụng nó để tự xếp lại, hoặc cấu hình lại.

00:01:56.260 --> 00:01:59.260
Chúng ta cần một chút năng lượng để kích hoạt quá trình đó,

00:01:59.260 --> 00:02:02.260
redundan

00:02:02.260 --> 00:02:04.260
Và chúng ta cần một phương thức sửa lỗi dư thừa

00:02:04.260 --> 00:02:07.260
để đảm bảo rằng ta xây dựng thành công cái ta muốn.

00:02:07.260 --> 00:02:09.260
Vậy nên tôi sẽ giới thiệu với các bạn một số dự án

00:02:09.260 --> 00:02:11.260
mà tôi và các đồng nghiệp tại viện MIT đang thực hiện

00:02:11.260 --> 00:02:13.260
để đạt tới tương lai của sự tự lắp ráp.

00:02:13.260 --> 00:02:16.260
Hai dự án đầu tiên là MacroBot và DeciBot.

00:02:16.260 --> 00:02:20.260
Hai dự án này là những con rô bốt cỡ lớn có thể cấu hình lại --

00:02:20.260 --> 00:02:23.260
hững protein dài 2,4 mét, 3,7 mét.

00:02:23.260 --> 00:02:26.260
Chúng được gắn bằng những thiết bị cơ điện những bộ cảm biến.

00:02:26.260 --> 00:02:28.260
Bạn giải mã thứ bạn mà muốn chúng xếp nên,

00:02:28.260 --> 00:02:30.260
thành một chuỗi các góc --

00:02:30.260 --> 00:02:32.260
ở đây là âm 120, âm 120, 0, 0,

00:02:32.260 --> 00:02:35.260
120, âm 120 -- đại loại như vậy,

00:02:35.260 --> 00:02:37.260
một chuỗi các góc, hoặc các chiều,

00:02:37.260 --> 00:02:40.260
và bạn gửi chuỗi đó qua đường dây.

00:02:40.260 --> 00:02:43.260
Mỗi đơn vị nhận thông tin của nó -- âm 120.

00:02:43.260 --> 00:02:45.260
Nó sẽ quay tới góc đó, kiểm tra xem đã đúng chưa

00:02:45.260 --> 00:02:48.260
và rồi chuyển tiếp đến phần tiếp theo.

00:02:48.260 --> 00:02:50.260
Đây là những nhà khoa học ,

00:02:50.260 --> 00:02:52.260
các kĩ sư, nhà thiết kế xuất chúng đã thực hiện dự án này.

00:02:52.260 --> 00:02:54.260
Và tôi nghĩ rằng chúng ta cần làm sáng tỏ:

00:02:54.260 --> 00:02:56.260
Điều này thật sự có thể nhân rộng không?

00:02:56.260 --> 00:02:58.260
Ý tôi là, hàng ngàn đô la, rất nhiều giờ làm việc

00:02:58.260 --> 00:03:01.260
để làm nên con rô bốt dài 2,5 mét.

00:03:01.260 --> 00:03:04.260
Liệu chúng ta có thể thực sự nhân rộng nó lên? Liệu chúng ta có thể gắn robot vào từng phần hay không?

00:03:04.260 --> 00:03:06.260
Bước tiếp theo đưa ra câu hỏi

00:03:06.260 --> 00:03:08.260
và nhìn vào bản chất bị động,

00:03:08.260 --> 00:03:11.260
hoặc đang cố gắng cấu hình lại khả năng lập trình một cách bị động.

00:03:11.260 --> 00:03:13.260
Nhưng điều này đi đến một tầm cao hơn,

00:03:13.260 --> 00:03:15.260
và cố gắng để có sự ước tính thực sự.

00:03:15.260 --> 00:03:17.260
Về cơ bản ta sẽ gắn những khối xây dựng nền tảng có thể tính toán,

00:03:17.260 --> 00:03:19.260
được gọi là những cổng logic kĩ thuật số,

00:03:19.260 --> 00:03:21.260
trực tiếp vào từng mảnh nhỏ.

00:03:21.260 --> 00:03:23.260
Đây là cổng NAND.

00:03:23.260 --> 00:03:25.260
Bạn có một khối tứ diện, đó chính là cái cổng

00:03:25.260 --> 00:03:27.260
sẽ thực hiện phần tính toán cho bạn,

00:03:27.260 --> 00:03:29.260
và bạn có hai khối tứ diện đầu vào.

00:03:29.260 --> 00:03:32.260
Một trong số đầu vào đó là từ người dùng,giống như bạn đang xây những viên gạch.

00:03:32.260 --> 00:03:35.260
Đầu vào còn lại là từ viên gạch liền trước vừa xếp xong.

00:03:35.260 --> 00:03:38.260
Và rồi nó sẽ cho bạn một sản phẩm trong không gian 3D.

00:03:38.260 --> 00:03:40.260
Vậy nên, điều này có nghĩa là

00:03:40.260 --> 00:03:43.260
người dùng có thể bắt đầu khởi động bất cứ thứ gì họ muốn những viên gạch làm.

00:03:43.260 --> 00:03:45.260
Chúng sẽ ước tính trước đó chúng đã làm gì

00:03:45.260 --> 00:03:47.260
và những gì bạn muốn chúng làm.

00:03:47.260 --> 00:03:49.260
Và bây giờ chúng bắt đầu chuyển động trong không gian ba chiều --

00:03:49.260 --> 00:03:51.260
lên rồi xuống.

00:03:51.260 --> 00:03:54.260
Ở phía bên tay trái, đầu vào [1,1] tương đương kết quả đầu ra là 0, đi xuống.

00:03:54.260 --> 00:03:56.260
Ở phía tay phải,

00:03:56.260 --> 00:03:59.260
đầu vào [0,0] là kết quả đầu ra là 1, đi lên.

00:03:59.260 --> 00:04:01.260
Điều này thực sự có nghĩa là

00:04:01.260 --> 00:04:03.260
các cấu trúc của chúng ta bây giờ đã có những bản thiết kế

00:04:03.260 --> 00:04:05.260
của cái chúng ta định xây.

00:04:05.260 --> 00:04:08.260
Chúng có tất cả thông tin cần thiết của việc xây dựng.

00:04:08.260 --> 00:04:11.260
Điều này đồng nghĩa với việc chúng ta sẽ có vài hình thức tự sao chép.

00:04:11.260 --> 00:04:14.260
Trong trường hợp này tôi gọi nó là sao chép tự định hướng,

00:04:14.260 --> 00:04:16.260
bởi vì cấu trúc của bạn có những bản thiết kế chính xác rồi.

00:04:16.260 --> 00:04:18.260
Nếu bạn gặp lỗi, bạn có thể thay thế từng phần.

00:04:18.260 --> 00:04:21.260
Tất cả thông tin cục bộ được gắn vào để cho bạn biết làm thế nào để sửa chữa.

00:04:21.260 --> 00:04:23.260
Nên bạn có thể có một thứ gì đó chạy dọc theo và đọc nó

00:04:23.260 --> 00:04:25.260
và có thể xuất ra từng phần một.

00:04:25.260 --> 00:04:27.260
Nó đã được gắn vào trực tiếp nên không cần phải có những chỉ dẫn từ bên ngoài.

00:04:27.260 --> 00:04:30.260
Dự án cuối cùng mà tôi muốn giới thiệu có tên là Những Chuỗi Lệch.

00:04:30.260 --> 00:04:33.260
và đây có lẽ là ví dụ hấp dẫn nhất mà chúng ta có lúc này

00:04:33.260 --> 00:04:35.260
nói về những hệ thống tự lắp ráp bị động.

00:04:35.260 --> 00:04:37.260
Hệ thống sử dụng khả năng cấu hình

00:04:37.260 --> 00:04:39.260
và khả năng lập trình

00:04:39.260 --> 00:04:42.260
để tạo nên một hệ thống bị động hoàn chỉnh.

00:04:43.260 --> 00:04:45.260
Đơn giản là bạn có một chuỗi các nguyên tố,

00:04:45.260 --> 00:04:47.260
Mỗi nguyên tố hoàn toàn giống nhau,

00:04:47.260 --> 00:04:49.260
và chúng bị lệch.

00:04:49.260 --> 00:04:52.260
Mỗi chuỗi hay mỗi nguyên tố muốn quay sang phải hay trái.

00:04:52.260 --> 00:04:55.260
Nên khi bạn lắp ráp chuỗi thì bạn đang lập trình căn bản cho nó.

00:04:55.260 --> 00:04:58.260
Bạn đang yêu cầu mỗi đơn vị nên quay sang phải hay trái.

00:04:58.260 --> 00:05:01.260
Khi bạn lắc cái chuỗi,

00:05:01.260 --> 00:05:03.260
nó sẽ xoắn lại

00:05:03.260 --> 00:05:06.260
thành bất kỳ hình dạng nào mà bạn đã lập trình

00:05:06.260 --> 00:05:08.260
như trong trường hợp này là hình xoắn ốc,

00:05:08.260 --> 00:05:11.260
hay trong trường hợp này

00:05:11.260 --> 00:05:14.260
là hai khối hộp kề nhau.

00:05:14.260 --> 00:05:16.260
Bạn có thể lập trình căn bản

00:05:16.260 --> 00:05:18.260
bất kỳ hình dạng ba chiều nào --

00:05:18.260 --> 00:05:21.260
hay 1 chiều, 2 chiều nào thành chuỗi hoàn toàn bị động này.

00:05:21.260 --> 00:05:23.260
Vậy điều này nói gì với chúng ta về tương lai?

00:05:23.260 --> 00:05:25.260
Tôi nghĩ điều nó nói lên ở đây

00:05:25.260 --> 00:05:28.260
là có những khả năng mới cho việc tự lắp ráp, sao chép, sửa chữa

00:05:28.260 --> 00:05:31.260
trong những cấu trúc vật lý, những tòa nhà, máy móc.

00:05:31.260 --> 00:05:33.260
Những phần này sẽ có một khả năng lập trình mới.

00:05:33.260 --> 00:05:35.260
Và từ đó bạn sẽ có những khả năng tính toán mới.

00:05:35.260 --> 00:05:37.260
Chúng ta sẽ có sự tính toán không gian.

00:05:37.260 --> 00:05:39.260
Thử tưởng tượng nếu những tòa nhà, những cây cầu, máy móc,

00:05:39.260 --> 00:05:41.260
tất cả những viên gạch của chúng ta thật sự có thể tính toán.

00:05:41.260 --> 00:05:43.260
Đó là sự kỳ diệu của năng lực tính toán song song và phân phối,

00:05:43.260 --> 00:05:45.260
những khả năng thiết kế mới.

00:05:45.260 --> 00:05:47.260
Điều này thật sự rất có tiềm năng.

00:05:47.260 --> 00:05:49.260
Tôi nghĩ những dự án tôi vừa giới thiệu với các bạn

00:05:49.260 --> 00:05:51.260
chỉ là một bước nhỏ để đi đến tương lai

00:05:51.260 --> 00:05:53.260
của việc chúng ta sẽ sử dụng những công nghệ mới này

00:05:53.260 --> 00:05:55.260
để tạo ra một thế giới mới của sự tự lắp ráp hay không.

00:05:55.260 --> 00:05:57.260
Xin cảm ơn.

00:05:57.260 --> 00:05:59.260
(Vỗ tay)

