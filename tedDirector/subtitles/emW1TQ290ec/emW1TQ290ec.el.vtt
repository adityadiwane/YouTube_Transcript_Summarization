WEBVTT
Kind: captions
Language: el

00:00:00.000 --> 00:00:07.000
Μετάφραση: Nikolaos Benias
Επιμέλεια: Leonidas Argyros

00:00:15.260 --> 00:00:17.260
Σήμερα θα ήθελα να σας δείξω

00:00:17.260 --> 00:00:19.260
πως θα φτιάχνουμε αντικείμενα στο μέλλον.

00:00:19.260 --> 00:00:21.260
Πιστεύω ότι σύντομα τα κτίσματα και οι μηχανές μας

00:00:21.260 --> 00:00:23.260
θα είναι αυτοσυναρμολογούμενα,

00:00:23.260 --> 00:00:25.260
αντιγράφοντας και επισκευάζοντας τους εαυτούς τους.

00:00:25.260 --> 00:00:27.260
Θα σας δείξω λοιπόν

00:00:27.260 --> 00:00:29.260
ποια πιστεύω ότι είναι η σημερινή κατάσταση στις κατασκευές

00:00:29.260 --> 00:00:32.260
και μετά θα την συγκρίνω με μερικά φυσικά συστήματα.

00:00:32.260 --> 00:00:35.260
Έτσι, στην παρούσα φάση των κατασκευών, έχουμε ουρανοξύστες

00:00:35.260 --> 00:00:37.260
-- δυόμιση χρόνια για κατασκευή,

00:00:37.260 --> 00:00:39.260
500.000 έως ένα εκατομμύριο απάρτια, --

00:00:39.260 --> 00:00:41.260
αρκετά πολύπλοκο,

00:00:41.260 --> 00:00:44.260
νέες και συναρπαστικές τεχνολογίες στους τομείς του χάλυβα, του σκυροδέματος, του υάλου.

00:00:44.260 --> 00:00:46.260
Έχουμε συναρπαστικές μηχανές

00:00:46.260 --> 00:00:48.260
που μπορούν να μας πάνε στο διάστημα

00:00:48.260 --> 00:00:51.260
-- 5 χρόνια για κατασκευή και 2,5 εκατομμύρια απάρτια.

00:00:51.260 --> 00:00:54.260
Αλλά, από την άλλη μεριά, εάν δείτε τα φυσικά συστήματα,

00:00:54.260 --> 00:00:56.260
έχουμε πρωτεΐνες

00:00:56.260 --> 00:00:58.260
που έχουν δύο εκατομμύρια τύπους,

00:00:58.260 --> 00:01:00.260
μπορούν να αναδιπλωθούν σε 10.000 νανοδευτερόλεπτα

00:01:00.260 --> 00:01:02.260
ή το DNA με 3 δισεκατομμύρια ζεύγη βάσεων

00:01:02.260 --> 00:01:05.260
που μπορούμε να αντιγράψουμε το πολύ σε μια ώρα.

00:01:05.260 --> 00:01:07.260
Υπάρχει λοιπόν όλη αυτή η πολυπλοκότητα

00:01:07.260 --> 00:01:09.260
στα φυσικά μας συστήματα,

00:01:09.260 --> 00:01:11.260
αλλά είναι εξαιρετικά αποτελεσματική,

00:01:11.260 --> 00:01:13.260
πολύ πιο αποτελεσματική από οτιδήποτε μπορούμε να δημιουργήσουμε,

00:01:13.260 --> 00:01:15.260
πολύ πιο πολύπλοκη από οτιδήποτε μπορούμε να δημιουργήσουμε.

00:01:15.260 --> 00:01:17.260
Είναι μακράν πιο αποδοτικά από άποψη ενέργειας.

00:01:17.260 --> 00:01:20.260
Σπάνια κάνουν λάθη.

00:01:20.260 --> 00:01:22.260
Και μπορούν να επιδιορθώσουν τον εαυτό τους για μακροζωία.

00:01:22.260 --> 00:01:25.260
Υπάρχει λοιπόν, κάτι πολύ ενδιαφέρον στα φυσικά συστήματα.

00:01:25.260 --> 00:01:27.260
Και εάν το μεταφέρουμε αυτό

00:01:27.260 --> 00:01:29.260
στο δομημένο μας περιβάλλον,

00:01:29.260 --> 00:01:31.260
τότε υπάρχουν πολλές συναρπαστικές δυνατότητες για τον τρόπο που δημιουργούμε αντικείμενα.

00:01:31.260 --> 00:01:34.260
Και πιστεύω ότι το κλειδί σε αυτό είναι η αυτοσυναρμολόγηση.

00:01:34.260 --> 00:01:37.260
Εάν λοιπόν θέλουμε να την υλοποιήσουμε στο φυσικό μας περιβάλλον,

00:01:37.260 --> 00:01:39.260
πιστεύω ότι υπάρχουν τέσσερις βασικοί παράγοντες.

00:01:39.260 --> 00:01:41.260
Ο πρώτος είναι ότι πρέπει να αποκωδικοποιήσουμε

00:01:41.260 --> 00:01:43.260
όλη την πολυπλοκότητα αυτού που θέλουμε να δημιουργήσουμε

00:01:43.260 --> 00:01:45.260
-- κτίρια και μηχανές δηλαδή.

00:01:45.260 --> 00:01:47.260
Και πρέπει να κάνουμε την αποκωδικοποίηση σε απλές ακολουθίες

00:01:47.260 --> 00:01:49.260
-- βασικά το DNA για το πως λειτουργούν τα κτίριά μας.

00:01:49.260 --> 00:01:51.260
Μετά, χρειαζόμαστε προγραμματιζόμενα απάρτια

00:01:51.260 --> 00:01:53.260
που να μπορούν να πάρουν αυτές τις ακολουθίες

00:01:53.260 --> 00:01:56.260
και να τις χρησιμοποιήσουν για να αναδιπλωθούν ή να επαναρρυθμιστούν.

00:01:56.260 --> 00:01:59.260
Χρειαζόμαστε κάποιου είδους ενέργεια που θα τους επιτρέψει να ενεργοποιηθούν,

00:01:59.260 --> 00:02:02.260
επιτρέποντας στα απάρτια να αναδιπλωθούν με βάση το πρόγραμμα.

00:02:02.260 --> 00:02:04.260
Και χρειαζόμαστε κάποιου είδους ελέγχου και διόρθωσης σφαλμάτων

00:02:04.260 --> 00:02:07.260
που θα εγγυηθεί ότι έχουμε χτίσει με επιτυχία αυτό που θέλουμε.

00:02:07.260 --> 00:02:09.260
Θα σας δείξω λοιπόν, κάποια προγράμματα

00:02:09.260 --> 00:02:11.260
στα οποία οι συνάδελφοί μου και εγώ στο ΜΙΤ εργαζόμαστε

00:02:11.260 --> 00:02:13.260
για να πετύχουμε την αυτοσυναρμολόγηση στο μέλλον.

00:02:13.260 --> 00:02:16.260
Τα πρώτα δυο είναι τα MacroBot και DeciBot.

00:02:16.260 --> 00:02:20.260
Αυτά λοιπόν τα προγράμματα είναι αναδιαρθρώσιμα ρομπότ μεγάλης κλίμακας

00:02:20.260 --> 00:02:23.260
-- 2,5 μέτρα, 3,5 μέτρα μήκος πρωτεϊνών&lrm;.

00:02:23.260 --> 00:02:26.260
Είναι ενσωματωμένα με μηχανικές ηλεκτρικές συσκευές, αισθητήρες.

00:02:26.260 --> 00:02:28.260
Αποκωδικοποιούμε το πως θέλουμε να αναδιπλωθεί,

00:02:28.260 --> 00:02:30.260
σε μια ακολουθία από γωνίες

00:02:30.260 --> 00:02:32.260
-- όπως αρνητική 120 μοίρες, αρνητική 120 μοίρες, 0 μοίρες, 0 μοίρες,

00:02:32.260 --> 00:02:35.260
120 μοίρες, αρνητική 120 μοίρες -- κάπως έτσι,

00:02:35.260 --> 00:02:37.260
μια ακολουθία από γωνίες ή στροφές,

00:02:37.260 --> 00:02:40.260
η οποία στέλνεται σε σειρά.

00:02:40.260 --> 00:02:43.260
Κάθε μονάδα λαμβάνει το μήνυμά της -- έστω αρνητική 120 μοίρες.

00:02:43.260 --> 00:02:45.260
Περιστρέφεται τόσο, ελέγχει εάν έφτασε εκεί

00:02:45.260 --> 00:02:48.260
και μετά το μεταφέρει στη γειτονική της μονάδα.

00:02:48.260 --> 00:02:50.260
Αυτοί είναι λοιπόν οι λαμπροί επιστήμονες,

00:02:50.260 --> 00:02:52.260
μηχανικοί, σχεδιαστές που δούλεψαν σε αυτό το πρόγραμμα.

00:02:52.260 --> 00:02:54.260
Και πιστεύω ότι πραγματικά αναδεικνύει το ερώτημα:

00:02:54.260 --> 00:02:56.260
Είναι αυτό πραγματικά κλιμακούμενο;

00:02:56.260 --> 00:02:58.260
Δηλαδή, χιλιάδες δολάρια, πάρα πολλές ανθρωποώρες

00:02:58.260 --> 00:03:01.260
χρειάστηκαν για να δημιουργηθεί αυτό το δυόμιση μέτρων ρομπότ.

00:03:01.260 --> 00:03:04.260
Μπορούμε να το κλιμακώσουμε; Μπορούμε πραγματικά να ενσωματώσουμε τη ρομποτική σε κάθε απάρτιο;

00:03:04.260 --> 00:03:06.260
Το επόμενο πρόγραμμα το αμφισβητεί αυτό

00:03:06.260 --> 00:03:08.260
και εξετάζει τον παθητικό χαρακτήρα

00:03:08.260 --> 00:03:11.260
ή παθητικά προσπαθεί να κάνει προγραμματιστική επανόρθωση.

00:03:11.260 --> 00:03:13.260
Αλλά πάει ένα βήμα παραπέρα

00:03:13.260 --> 00:03:15.260
και προσπαθεί να κάνει πραγματικούς υπολογισμούς.

00:03:15.260 --> 00:03:17.260
Βασικά ενσωματώνει το πιο θεμελιώδες δομικό στοιχείο της πληροφορικής,

00:03:17.260 --> 00:03:19.260
την ψηφιακή λογική πύλη,

00:03:19.260 --> 00:03:21.260
απευθείας στα απάρτια.

00:03:21.260 --> 00:03:23.260
Αυτή λοιπόν είναι μια πύλη NAND.

00:03:23.260 --> 00:03:25.260
Έχετε ένα τετράεδρο που είναι η πύλη

00:03:25.260 --> 00:03:27.260
και πρόκειται να κάνει τους υπολογισμούς

00:03:27.260 --> 00:03:29.260
και έχετε δυο τετράεδρα εισόδου.

00:03:29.260 --> 00:03:32.260
Το ένα είναι η είσοδος από το χρήστη, καθώς τοποθετούνται οι δομικές μονάδες.

00:03:32.260 --> 00:03:35.260
Το άλλο είναι από την προηγούμενη δομική μονάδα που τοποθετήθηκε.

00:03:35.260 --> 00:03:38.260
Και μετά μας δίνει το αποτέλεσμα στον τρισδιάστατο χώρο.

00:03:38.260 --> 00:03:40.260
Αυτό λοιπόν σημαίνει ότι

00:03:40.260 --> 00:03:43.260
ο χρήστης μπορεί να ξεκινήσει την εισαγωγή του τι θέλει να κάνουν οι δομικές μονάδες.

00:03:43.260 --> 00:03:45.260
Υπολογίζει αυτό που έκανε πριν

00:03:45.260 --> 00:03:47.260
και τι του είπατε να κάνει.

00:03:47.260 --> 00:03:49.260
Και τώρα αρχίζει και περιστρέφεται στο χώρο,

00:03:49.260 --> 00:03:51.260
πάνω ή κάτω.

00:03:51.260 --> 00:03:54.260
Έτσι, έχουμε στα αριστερά, η είσοδος [1,1] δίνει έξοδο 0, που πηγαίνει κάτω.

00:03:54.260 --> 00:03:56.260
Στη δεξιά πλευρά,

00:03:56.260 --> 00:03:59.260
η είσοδος [0,0] δίνει έξοδο 1, που πηγαίνει πάνω.

00:03:59.260 --> 00:04:01.260
Αυτό λοιπόν πραγματικά σημαίνει

00:04:01.260 --> 00:04:03.260
ότι οι δομές μας περιέχουν τα κατασκευαστικά σχέδια

00:04:03.260 --> 00:04:05.260
αυτού που θέλουμε να κατασκευάσουμε.

00:04:05.260 --> 00:04:08.260
Έχουν λοιπόν ενσωματωμένη όλη την πληροφορία του τι κατασκευάστηκε.

00:04:08.260 --> 00:04:11.260
Αυτό σημαίνει ότι μπορούμε να έχουμε κάποιου είδους αυτο-αντιγραφής.

00:04:11.260 --> 00:04:14.260
Σε αυτή την περίπτωση την ονομάζω αυτο-καθοδηγούμενη αντιγραφή,

00:04:14.260 --> 00:04:16.260
επειδή η δομή περιέχει τα ακριβή κατασκευαστικά σχέδια.

00:04:16.260 --> 00:04:18.260
Εάν υπάρχουν σφάλματα, μπορείτε να αντικαταστήσετε τη δομική μονάδα.

00:04:18.260 --> 00:04:21.260
Όλη η τοπική πληροφορία είναι ενσωματωμένη και θα σας πει πως να το επιδιορθώσετε.

00:04:21.260 --> 00:04:23.260
Θα μπορούσατε δηλαδή να έχετε κάτι που καθώς ανεβαίνει την διαβάζει

00:04:23.260 --> 00:04:25.260
και μπορεί να την εξάγει μία προς μία.

00:04:25.260 --> 00:04:27.260
Είναι πλήρως ενσωματωμένη, δεν υπάρχουν εξωτερικές οδηγίες.

00:04:27.260 --> 00:04:30.260
Το τελευταίο πρόγραμμα που θα σας δείξω ονομάζεται Biased Chains

00:04:30.260 --> 00:04:33.260
και πιθανότατα είναι το πιο συναρπαστικό παράδειγμα που έχουμε αυτή τη στιγμή

00:04:33.260 --> 00:04:35.260
για τα παθητικά αυτοσυναρμολογούμενα συστήματα.

00:04:35.260 --> 00:04:37.260
Παίρνει την επαναρρύθμιση

00:04:37.260 --> 00:04:39.260
και τον προγραμματισμό

00:04:39.260 --> 00:04:42.260
και τα καθιστά ένα πλήρες παθητικό σύστημα.

00:04:43.260 --> 00:04:45.260
Βασικά, έχουμε μια αλυσίδα από στοιχεία.

00:04:45.260 --> 00:04:47.260
Κάθε στοιχείο είναι ολόιδιο

00:04:47.260 --> 00:04:49.260
και είναι πολωμένα.

00:04:49.260 --> 00:04:52.260
Έτσι, κάθε αλυσίδα ή κάθε στοιχείο, θέλει να περιστραφεί αριστερά ή δεξιά.

00:04:52.260 --> 00:04:55.260
Όπως λοιπόν συναρμολογείτε την αλυσίδα, αυτό που κάνετε βασικά είναι να την προγραμματίζετε.

00:04:55.260 --> 00:04:58.260
Λέτε σε κάθε δομική μονάδα εάν πρέπει να περιστραφεί δεξιά ή αριστερά.

00:04:58.260 --> 00:05:01.260
Όταν λοιπόν ανακινείτε την αλυσίδα,

00:05:01.260 --> 00:05:03.260
αυτή αναδιπλώνεται

00:05:03.260 --> 00:05:06.260
στο σχήμα που την έχετε προγραμματίσει --

00:05:06.260 --> 00:05:08.260
όπως σε αυτή την περίπτωση μια σπείρα

00:05:08.260 --> 00:05:11.260
ή σε αυτή την περίπτωση,

00:05:11.260 --> 00:05:14.260
δύο κύβοι ο ένας δίπλα στον άλλον.

00:05:14.260 --> 00:05:16.260
Μπορείτε λοιπόν να προγραμματίσετε

00:05:16.260 --> 00:05:18.260
οποιοδήποτε τρισδιάστατο σχήμα

00:05:18.260 --> 00:05:21.260
ή μονοδιάστατο, δισδιάστατο -- επάνω σε αυτή την αλυσίδα τελείως παθητικά.

00:05:21.260 --> 00:05:23.260
Τι μας λέει αυτό για το μέλλον;

00:05:23.260 --> 00:05:25.260
Πιστεύω ότι μας δείχνει

00:05:25.260 --> 00:05:28.260
ότι υπάρχουν νέες δυνατότητες για αυτοσυναρμολόγηση, αντιγραφή, επισκευή

00:05:28.260 --> 00:05:31.260
στις φυσικές μας δομές, τα κτίρια, τις μηχανές.

00:05:31.260 --> 00:05:33.260
Υπάρχει νέα δυνατότητα προγραμματισμού σε αυτές τις περιοχές.

00:05:33.260 --> 00:05:35.260
Και λόγω αυτού έχουμε νέες δυνατότητες για την πληροφορική.

00:05:35.260 --> 00:05:37.260
Θα έχουμε χωρικούς υπολογιστές.

00:05:37.260 --> 00:05:39.260
Φανταστείτε τα κτίριά μας, γέφυρες, μηχανές,

00:05:39.260 --> 00:05:41.260
όλα μας τα δομικά υλικά να μπορούν να κάνουν υπολογισμούς.

00:05:41.260 --> 00:05:43.260
Αυτή είναι καταπληκτική παράλληλη και κατανεμημένη υπολογιστική ισχύς,

00:05:43.260 --> 00:05:45.260
νέες δυνατότητες σχεδιασμού.

00:05:45.260 --> 00:05:47.260
Υπάρχουν λοιπόν εξαιρετικές προοπτικές γι' αυτό.

00:05:47.260 --> 00:05:49.260
Πιστεύω λοιπόν ότι τα προγράμματα που σας παρουσίασα

00:05:49.260 --> 00:05:51.260
είναι ένα μικρό βήμα προς το μέλλον,

00:05:51.260 --> 00:05:53.260
εάν εφαρμόσουμε αυτές τις νέες τεχνολογίες

00:05:53.260 --> 00:05:55.260
για ένα νέο αυτοσυναρμολογούμενο κόσμο.

00:05:55.260 --> 00:05:57.260
Σας ευχαριστώ.

00:05:57.260 --> 00:05:59.260
(Χειροκρότημα)

