WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:07.000
翻译人员: Felix Chen
校对人员: Chunxiang Qian

00:00:15.260 --> 00:00:17.260
今天我想向各位展示

00:00:17.260 --> 00:00:19.260
未来我们制作东西的方式。

00:00:19.260 --> 00:00:21.260
我相信很快我们的建筑和机器

00:00:21.260 --> 00:00:23.260
将能自我组装，

00:00:23.260 --> 00:00:25.260
自我复制和自我修复。

00:00:25.260 --> 00:00:27.260
因此我要向各位展示

00:00:27.260 --> 00:00:29.260
我所认为的制造业的当前状况，

00:00:29.260 --> 00:00:32.260
接着再将其与一些自然系统比较。

00:00:32.260 --> 00:00:35.260
那么在当前的制造业中，我们有摩天大楼 ——

00:00:35.260 --> 00:00:37.260
两年半的时间，

00:00:37.260 --> 00:00:39.260
50万至上百万个部分，

00:00:39.260 --> 00:00:41.260
非常复杂，

00:00:41.260 --> 00:00:44.260
使用了在钢铁，混凝土和玻璃方面的新技术。

00:00:44.260 --> 00:00:46.260
我们有令人激动的机器，

00:00:46.260 --> 00:00:48.260
可以带我们进入太空——

00:00:48.260 --> 00:00:51.260
五年时间，两百五十万个部分。

00:00:51.260 --> 00:00:54.260
但另一方面，如果看看自然系统，

00:00:54.260 --> 00:00:56.260
我们有拥有两百万种类型的

00:00:56.260 --> 00:00:58.260
蛋白质，

00:00:58.260 --> 00:01:00.260
能在一万纳秒内折叠起来，

00:01:00.260 --> 00:01:02.260
我们能在大约一小时内

00:01:02.260 --> 00:01:05.260
对带有三十亿碱基对的DNA进行复制。

00:01:05.260 --> 00:01:07.260
这就是我们

00:01:07.260 --> 00:01:09.260
自然系统的复杂性，

00:01:09.260 --> 00:01:11.260
但它们非常高效，

00:01:11.260 --> 00:01:13.260
比我们建造的任何东西都要高效，

00:01:13.260 --> 00:01:15.260
比我们能建造的任何东西都要复杂。

00:01:15.260 --> 00:01:17.260
它们在能源方面更加高效。

00:01:17.260 --> 00:01:20.260
它们很少犯错。

00:01:20.260 --> 00:01:22.260
他们能自我修复保持长寿。

00:01:22.260 --> 00:01:25.260
关于自然系统有件超级有意思的事情。

00:01:25.260 --> 00:01:27.260
如果我们能将其

00:01:27.260 --> 00:01:29.260
转换为我们的建筑环境，

00:01:29.260 --> 00:01:31.260
那么我们构建事物的方式就会有很大的潜力。

00:01:31.260 --> 00:01:34.260
我认为关键是自我组装。

00:01:34.260 --> 00:01:37.260
如果我们想要在自身的身体环境中利用自我组装，

00:01:37.260 --> 00:01:39.260
我认为有四个关键因素。

00:01:39.260 --> 00:01:41.260
第一个是，我们需要解码

00:01:41.260 --> 00:01:43.260
我们所要建造的东西的所有的复杂度 ——

00:01:43.260 --> 00:01:45.260
也就是我们的建筑和机器。

00:01:45.260 --> 00:01:47.260
我们需要把它们解码成简单的序列 ——

00:01:47.260 --> 00:01:49.260
基本上就是我们的建筑运作的DNA。

00:01:49.260 --> 00:01:51.260
接着我们需要可编程的部分

00:01:51.260 --> 00:01:53.260
这部分能接受这一序列

00:01:53.260 --> 00:01:56.260
并用于折叠或是重塑。

00:01:56.260 --> 00:01:59.260
我们需要一些能量来进行激活，

00:01:59.260 --> 00:02:02.260
使我们的这些部分能够依照程序折叠起来。

00:02:02.260 --> 00:02:04.260
我们需要一些类型的纠错冗余

00:02:04.260 --> 00:02:07.260
以保证我们成功建造的就是我们想要的。

00:02:07.260 --> 00:02:09.260
因此，我要向各位展示一些

00:02:09.260 --> 00:02:11.260
我和我的同事正在进行的

00:02:11.260 --> 00:02:13.260
要实现这种自我组装的未来的项目。

00:02:13.260 --> 00:02:16.260
头两个项目是MacroBot和DeciBot。

00:02:16.260 --> 00:02:20.260
这些项目都是大规模可重构机器人 ——

00:02:20.260 --> 00:02:23.260
8英尺，12英尺长的蛋白质。

00:02:23.260 --> 00:02:26.260
它们嵌入机电设备，传感器。

00:02:26.260 --> 00:02:28.260
你需要把想要折叠的方式解码成，

00:02:28.260 --> 00:02:30.260
解码成一系列角度 ——

00:02:30.260 --> 00:02:32.260
负120度，负120度，0度，0度，

00:02:32.260 --> 00:02:35.260
120度，负120度，——这类的东西；

00:02:35.260 --> 00:02:37.260
一系列角度，或转向，

00:02:37.260 --> 00:02:40.260
可以用电线把这个次序传过去。

00:02:40.260 --> 00:02:43.260
每个单元获取自己的消息 —— 比如负120.

00:02:43.260 --> 00:02:45.260
它进行旋转，检查是否旋转到位

00:02:45.260 --> 00:02:48.260
然后把序列传给它的邻居。

00:02:48.260 --> 00:02:50.260
有许多杰出的科学家，

00:02:50.260 --> 00:02:52.260
工程师，设计师为这个项目工作。

00:02:52.260 --> 00:02:54.260
我认为这一项目真的揭示出：

00:02:54.260 --> 00:02:56.260
这真的可扩展么？

00:02:56.260 --> 00:02:58.260
我是说，花费数千美元许多人时

00:02:58.260 --> 00:03:01.260
来制造这个八英尺的机器人。

00:03:01.260 --> 00:03:04.260
我们真的能扩大它么？我们真的能在每个部分中都嵌入机器人么？

00:03:04.260 --> 00:03:06.260
下一个问题是

00:03:06.260 --> 00:03:08.260
看看被动性，

00:03:08.260 --> 00:03:11.260
或被动地尝试让重组具有可编程性。

00:03:11.260 --> 00:03:13.260
但它更进了一步，

00:03:13.260 --> 00:03:15.260
它尝试进行实际计算。

00:03:15.260 --> 00:03:17.260
基本上嵌入了多数计算的基础构建模块，

00:03:17.260 --> 00:03:19.260
数字逻辑门，

00:03:19.260 --> 00:03:21.260
直接进入各个部分。

00:03:21.260 --> 00:03:23.260
这是与非门。

00:03:23.260 --> 00:03:25.260
每个要用于计算的门上

00:03:25.260 --> 00:03:27.260
都有一个四面体，

00:03:27.260 --> 00:03:29.260
有两个输入四面体。

00:03:29.260 --> 00:03:32.260
其中一个是来自用户的输入，就像你在构建砖块。

00:03:32.260 --> 00:03:35.260
另一个是来之前前放好的一块砖的输入。

00:03:35.260 --> 00:03:38.260
接着它会给出三维空间的输出。

00:03:38.260 --> 00:03:40.260
这意味着

00:03:40.260 --> 00:03:43.260
用户以他们想要的方式堆砌砖块。

00:03:43.260 --> 00:03:45.260
它依据之前所做的

00:03:45.260 --> 00:03:47.260
和你的指令进行计算。

00:03:47.260 --> 00:03:49.260
现在它开始在三维空间内移动 ——

00:03:49.260 --> 00:03:51.260
上或者下。

00:03:51.260 --> 00:03:54.260
看左面，[1,1] 的输入等于0输出，表示向下。

00:03:54.260 --> 00:03:56.260
在右边，

00:03:56.260 --> 00:03:59.260
[0,0] 的输入是1输出，表示向上。

00:03:59.260 --> 00:04:01.260
因此这真正的的意味是

00:04:01.260 --> 00:04:03.260
我们的结构中现在包含了

00:04:03.260 --> 00:04:05.260
我们想要构建的蓝图。

00:04:05.260 --> 00:04:08.260
因此关于想要构建的事物的信息已经全部嵌入其中。

00:04:08.260 --> 00:04:11.260
这意味着我们有了某种形式的自我复制。

00:04:11.260 --> 00:04:14.260
对这种情况，我称之为自我导向复制，

00:04:14.260 --> 00:04:16.260
因为你的结构中包含了精确的蓝图。

00:04:16.260 --> 00:04:18.260
如果遇到错误，你可以替换一个部分。

00:04:18.260 --> 00:04:21.260
所有的本地信息都嵌入其中，告诉你如何修复它。

00:04:21.260 --> 00:04:23.260
因此你有个可以攀爬的东西，能读出它

00:04:23.260 --> 00:04:25.260
并一个一个的输出。

00:04:25.260 --> 00:04:27.260
它是直接嵌入的；没有外部指令输入。

00:04:27.260 --> 00:04:30.260
我要展示的最后一个项目名为偏心链条，

00:04:30.260 --> 00:04:33.260
它可能是我们现在看到的被动自我装配系统中

00:04:33.260 --> 00:04:35.260
最令人激动的例子。

00:04:35.260 --> 00:04:37.260
它具有可重构性

00:04:37.260 --> 00:04:39.260
和可编程性

00:04:39.260 --> 00:04:42.260
使它成了为了一个完全地被动系统。

00:04:43.260 --> 00:04:45.260
基本上就是你有了一连串的元素。

00:04:45.260 --> 00:04:47.260
每个元素都是完全相同的，

00:04:47.260 --> 00:04:49.260
且它们是偏心的。

00:04:49.260 --> 00:04:52.260
每个链条，或每个元素想要向右转或是向左转。

00:04:52.260 --> 00:04:55.260
如果你要装配链条，需要为它编程。

00:04:55.260 --> 00:04:58.260
要告诉每个单元是要左转还是右转。

00:04:58.260 --> 00:05:01.260
当你摇动这个链条时，

00:05:01.260 --> 00:05:03.260
它就折叠起来

00:05:03.260 --> 00:05:06.260
编程你所为它编码的任何结构 ——

00:05:06.260 --> 00:05:08.260
因此这种情况下，一个螺旋体，

00:05:08.260 --> 00:05:11.260
火这种情况，

00:05:11.260 --> 00:05:14.260
两个相连的立方体。

00:05:14.260 --> 00:05:16.260
基本上你可以在

00:05:16.260 --> 00:05:18.260
三维空间内编程 ——

00:05:18.260 --> 00:05:21.260
或是一维、二维 —— 这链条是完全被动的。

00:05:21.260 --> 00:05:23.260
这向我们预示了怎样的未来呢？

00:05:23.260 --> 00:05:25.260
我认为这告诉我们

00:05:25.260 --> 00:05:28.260
这些在我们的身体结构、我们的建筑和机器中

00:05:28.260 --> 00:05:31.260
这种自我装配、自我复制和自我修复的可能性。

00:05:31.260 --> 00:05:33.260
在这些部分中有新的可编程性。

00:05:33.260 --> 00:05:35.260
从中你能获得计算的新可能性。

00:05:35.260 --> 00:05:37.260
我们将有空间计算。

00:05:37.260 --> 00:05:39.260
想象一下我们的建筑、桥梁、机器，

00:05:39.260 --> 00:05:41.260
所有的砖块都能进行实际计算。

00:05:41.260 --> 00:05:43.260
多么令人惊奇的并行计算和分布式计算能力和

00:05:43.260 --> 00:05:45.260
新的设计可能性啊。

00:05:45.260 --> 00:05:47.260
这是项令人激动的潜力。

00:05:47.260 --> 00:05:49.260
我认为这些我向各位展示的项目

00:05:49.260 --> 00:05:51.260
仅仅是迈向未来的一小步，

00:05:51.260 --> 00:05:53.260
如果我们为一个新的自我组装的世界

00:05:53.260 --> 00:05:55.260
实现了这些新技术的话。

00:05:55.260 --> 00:05:57.260
谢谢。

00:05:57.260 --> 00:05:59.260
（掌声）

