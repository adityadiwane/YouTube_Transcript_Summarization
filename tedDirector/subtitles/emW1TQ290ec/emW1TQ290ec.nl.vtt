WEBVTT
Kind: captions
Language: nl

00:00:00.000 --> 00:00:07.000
Vertaald door: Els De Keyser
Nagekeken door: Matthias Valvekens

00:00:15.260 --> 00:00:17.260
Vandaag wil ik jullie

00:00:17.260 --> 00:00:19.260
de toekomst tonen van de manier waarop we dingen maken.

00:00:19.260 --> 00:00:21.260
Ik geloof dat onze gebouwen en machines

00:00:21.260 --> 00:00:23.260
zichzelf binnenkort zullen assembleren,

00:00:23.260 --> 00:00:25.260
repliceren en repareren.

00:00:25.260 --> 00:00:27.260
Dus ik ga je laten zien

00:00:27.260 --> 00:00:29.260
wat volgens mij de huidige stand van de productie is,

00:00:29.260 --> 00:00:32.260
en die dan vergelijken met een aantal natuurlijke systemen.

00:00:32.260 --> 00:00:35.260
In de huidige stand van de productie hebben we wolkenkrabbers.

00:00:35.260 --> 00:00:37.260
Twee en een half jaar,

00:00:37.260 --> 00:00:39.260
500.000 tot een miljoen onderdelen,

00:00:39.260 --> 00:00:41.260
vrij complexe,

00:00:41.260 --> 00:00:44.260
nieuwe en spannende technologieën in staal, beton, glas.

00:00:44.260 --> 00:00:46.260
We hebben spannende machines

00:00:46.260 --> 00:00:48.260
die ons naar de ruimte kunnen brengen -

00:00:48.260 --> 00:00:51.260
vijf jaar, 2,5 miljoen onderdelen.

00:00:51.260 --> 00:00:54.260
Maar aan de andere kant, als je kijkt naar de natuurlijke systemen,

00:00:54.260 --> 00:00:56.260
hebben we eiwitten

00:00:56.260 --> 00:00:58.260
die twee miljoen soorten tellen,

00:00:58.260 --> 00:01:00.260
en die zich ontvouwen in 10.000 nanoseconden,

00:01:00.260 --> 00:01:02.260
of DNA met drie miljard basenparen

00:01:02.260 --> 00:01:05.260
die we kunnen repliceren in ongeveer een uur.

00:01:05.260 --> 00:01:07.260
Dus er zit een hoop complexiteit

00:01:07.260 --> 00:01:09.260
in onze natuurlijke systemen,

00:01:09.260 --> 00:01:11.260
maar ze zijn zeer efficiënt,

00:01:11.260 --> 00:01:13.260
veel efficiënter dan wat we kunnen bouwen,

00:01:13.260 --> 00:01:15.260
veel complexer dan alles wat we kunnen bouwen.

00:01:15.260 --> 00:01:17.260
Ze zijn veel efficiënter in termen van energie.

00:01:17.260 --> 00:01:20.260
Ze maken bijna nooit fouten.

00:01:20.260 --> 00:01:22.260
En ze kunnen zichzelf herstellen om lang mee te gaan.

00:01:22.260 --> 00:01:25.260
Er is dus iets super-interessants aan natuurlijke systemen.

00:01:25.260 --> 00:01:27.260
Als we dat kunnen vertalen

00:01:27.260 --> 00:01:29.260
naar onze gebouwde omgeving,

00:01:29.260 --> 00:01:31.260
dan zijn er nog een aantal interessante mogelijkheden voor de manier waarop we dingen bouwen.

00:01:31.260 --> 00:01:34.260
Ik denk dat de sleutel daartoe zelfassemblage is.

00:01:34.260 --> 00:01:37.260
Als we zelfassemblage willen gebruiken in onze fysieke omgeving,

00:01:37.260 --> 00:01:39.260
zijn er volgens mij vier belangrijke factoren.

00:01:39.260 --> 00:01:41.260
De eerste is dat we de volledige complexiteit

00:01:41.260 --> 00:01:43.260
van wat we willen bouwen, moeten ontcijferen -

00:01:43.260 --> 00:01:45.260
dat wil zeggen onze gebouwen en machines.

00:01:45.260 --> 00:01:47.260
We moeten ze ontcijferen in eenvoudige sequenties -

00:01:47.260 --> 00:01:49.260
zowat het DNA van hoe onze gebouwen werken.

00:01:49.260 --> 00:01:51.260
Dan hebben we programmeerbare onderdelen nodig

00:01:51.260 --> 00:01:53.260
die deze sequenties kunnen gebruiken om

00:01:53.260 --> 00:01:56.260
zich op te vouwen, of opnieuw te configureren.

00:01:56.260 --> 00:01:59.260
We hebben wat energie om ​​dat te activeren,

00:01:59.260 --> 00:02:02.260
om onze delen te doen opvouwen volgens het programma.

00:02:02.260 --> 00:02:04.260
En we hebben een soort van foutcorrectie-redundantie

00:02:04.260 --> 00:02:07.260
om te garanderen dat we met succes hebben gebouwd wat we willen.

00:02:07.260 --> 00:02:09.260
Ik zal een aantal projecten laten zien

00:02:09.260 --> 00:02:11.260
waar mijn collega's en ik aan het MIT aan werken

00:02:11.260 --> 00:02:13.260
om deze toekomst van zelfassemblage te bereiken.

00:02:13.260 --> 00:02:16.260
De eerste twee zijn de MacroBot en DeciBot.

00:02:16.260 --> 00:02:20.260
Deze projecten zijn grootschalige herconfigureerbare robots -

00:02:20.260 --> 00:02:23.260
eiwitten van 2,5 à 3,5 meter.

00:02:23.260 --> 00:02:26.260
Ze zijn volgestouwd met mechanische elektrische apparaten, sensoren.

00:02:26.260 --> 00:02:28.260
Je ontcijfert waarin je je wil opvouwen,

00:02:28.260 --> 00:02:30.260
in een opeenvolging van hoeken -

00:02:30.260 --> 00:02:32.260
dus min 120, min 120, 0, 0,

00:02:32.260 --> 00:02:35.260
120, 120 negatief - zoiets;

00:02:35.260 --> 00:02:37.260
dus een opeenvolging van hoeken of bochten,

00:02:37.260 --> 00:02:40.260
en je stuurt die volgorde door de string.

00:02:40.260 --> 00:02:43.260
Elke unit neemt zijn boodschap - dus min 120.

00:02:43.260 --> 00:02:45.260
Het roteert daarheen, controleert of het er is geraakt,

00:02:45.260 --> 00:02:48.260
en dan geeft het door aan zijn buurman.

00:02:48.260 --> 00:02:50.260
Dit zijn de briljante wetenschappers,

00:02:50.260 --> 00:02:52.260
ingenieurs, ontwerpers die aan dit project hebben gewerkt.

00:02:52.260 --> 00:02:54.260
Volgens mij wijst dit erop:

00:02:54.260 --> 00:02:56.260
is dit echt schaalbaar?

00:02:56.260 --> 00:02:58.260
Ik bedoel, duizenden dollars, vele manuren

00:02:58.260 --> 00:03:01.260
zijn gepresteerd om deze robot van acht meter te maken.

00:03:01.260 --> 00:03:04.260
Kunnen we dit opschalen? Kunnen we echt robotica inbouwen in elk deel?

00:03:04.260 --> 00:03:06.260
Het volgende stelt dat in vraag

00:03:06.260 --> 00:03:08.260
en kijkt naar de passieve natuur,

00:03:08.260 --> 00:03:11.260
of passief proberen om programmeerbaarheid van herconfiguratie te bereiken.

00:03:11.260 --> 00:03:13.260
Maar het gaat een stap verder,

00:03:13.260 --> 00:03:15.260
en het probeert daadwerkelijke berekening te bereiken.

00:03:15.260 --> 00:03:17.260
Het omvat de meest fundamentele bouwsteen van computers,

00:03:17.260 --> 00:03:19.260
de digitale logische poort,

00:03:19.260 --> 00:03:21.260
rechtstreeks in je onderdelen.

00:03:21.260 --> 00:03:23.260
Dus dit is een NAND-poort.

00:03:23.260 --> 00:03:25.260
Je hebt een tetraëder, de poort

00:03:25.260 --> 00:03:27.260
die je berekening gaat doen,

00:03:27.260 --> 00:03:29.260
en je hebt twee input-tetraëders.

00:03:29.260 --> 00:03:32.260
Een van hen is de input van de gebruiker, terwijl je je bakstenen bouwt.

00:03:32.260 --> 00:03:35.260
De andere is van de vorige steen die was geplaatst.

00:03:35.260 --> 00:03:38.260
En dan geeft het je een resultaat in een 3D-ruimte.

00:03:38.260 --> 00:03:40.260
Dus wat dit betekent,

00:03:40.260 --> 00:03:43.260
is dat de gebruiker opdrachten voor de bakstenen kan beginnen aansluiten.

00:03:43.260 --> 00:03:45.260
Het berekent op basis van wat het voordien aan het doen was

00:03:45.260 --> 00:03:47.260
en van jouw opdracht.

00:03:47.260 --> 00:03:49.260
En nu begint het te bewegen in een drie-dimensionale ruimte -

00:03:49.260 --> 00:03:51.260
dus omhoog of omlaag.

00:03:51.260 --> 00:03:54.260
Aan de linkerkant is de [1,1]-ingang gelijk aan de 0-uitgang, die naar beneden gaat.

00:03:54.260 --> 00:03:56.260
Aan de rechterkant

00:03:56.260 --> 00:03:59.260
is [0,0]-ingang is een 1-uitgang, die omhoog gaat.

00:03:59.260 --> 00:04:01.260
Dus wat dat echt betekent,

00:04:01.260 --> 00:04:03.260
is dat onze structuren nu de blauwdrukken bevatten

00:04:03.260 --> 00:04:05.260
van wat we willen bouwen.

00:04:05.260 --> 00:04:08.260
Alle informatie over wat er gebouwd is, zit ingebouwd.

00:04:08.260 --> 00:04:11.260
Dus dat betekent dat we een bepaalde vorm van zelf-replicatie hebben.

00:04:11.260 --> 00:04:14.260
In dit geval noem ik het zelf-geleide replicatie,

00:04:14.260 --> 00:04:16.260
omdat je structuur de exacte blauwdrukken bevat.

00:04:16.260 --> 00:04:18.260
In geval van fouten, kan je een onderdeel vervangen.

00:04:18.260 --> 00:04:21.260
Alle lokale informatie is ingebed om je te vertellen hoe dit te verhelpen.

00:04:21.260 --> 00:04:23.260
Je zou dus iets kunnen hebben dat erlangs klimt en het afleest,

00:04:23.260 --> 00:04:25.260
en een één-op-één-resultaat aflevert

00:04:25.260 --> 00:04:27.260
Het is rechtstreeks ingebouwd, er zijn geen externe instructies.

00:04:27.260 --> 00:04:30.260
Het laatste project dat ik zal je laten zien, heet Bevooroordeelde Ketens,

00:04:30.260 --> 00:04:33.260
en het is waarschijnlijk het meest opwindende voorbeeld dat op dit moment hebben

00:04:33.260 --> 00:04:35.260
van passieve zelfassemblagesystemen.

00:04:35.260 --> 00:04:37.260
Het neemt de herconfigureerbaarheid

00:04:37.260 --> 00:04:39.260
en de programmeerbaarheid

00:04:39.260 --> 00:04:42.260
en maakt er een volledig passief systeem van.

00:04:43.260 --> 00:04:45.260
Dus eigenlijk heb je een keten van elementen.

00:04:45.260 --> 00:04:47.260
Elk element is volledig identiek,

00:04:47.260 --> 00:04:49.260
en ze zijn bevooroordeeld.

00:04:49.260 --> 00:04:52.260
Dus elke keten, of elk element, wil rechts of links.

00:04:52.260 --> 00:04:55.260
Als je de ketting monteert, ben je eigenlijk aan het programmeren.

00:04:55.260 --> 00:04:58.260
Je vertelt elke eenheid of ze naar rechts of naar links moet draaien.

00:04:58.260 --> 00:05:01.260
Dus als je de ketting te schudt,

00:05:01.260 --> 00:05:03.260
vouwt ze zich op

00:05:03.260 --> 00:05:06.260
in elke configuratie die je erin hebt geprogrammeerd -

00:05:06.260 --> 00:05:08.260
dus in dit geval, een spiraal,

00:05:08.260 --> 00:05:11.260
of in dit geval,

00:05:11.260 --> 00:05:14.260
twee kubussen naast elkaar.

00:05:14.260 --> 00:05:16.260
Dus je kunt in principe

00:05:16.260 --> 00:05:18.260
een drie-dimensionale vorm programmeren -

00:05:18.260 --> 00:05:21.260
of een-dimensionaal, twee-dimensionale - in deze keten, volledig passief.

00:05:21.260 --> 00:05:23.260
Dus wat zegt dit ons over de toekomst?

00:05:23.260 --> 00:05:25.260
Ik denk dat het ons vertelt

00:05:25.260 --> 00:05:28.260
dat er nieuwe mogelijkheden voor zelfassemblage, replicatie, reparatie zitten

00:05:28.260 --> 00:05:31.260
in onze fysieke structuren, onze gebouwen, machines.

00:05:31.260 --> 00:05:33.260
Er zit nieuwe programmeerbaarheid in deze onderdelen.

00:05:33.260 --> 00:05:35.260
Daaruit volgen nieuwe mogelijkheden voor computergebruik.

00:05:35.260 --> 00:05:37.260
We zullen ruimtelijke berekening krijgen.

00:05:37.260 --> 00:05:39.260
Stel je voor dat onze gebouwen, onze bruggen, machines,

00:05:39.260 --> 00:05:41.260
al onze stenen eigenlijk konden rekenen.

00:05:41.260 --> 00:05:43.260
Dat is een verbazingwekkende parallelle en gedistribueerde rekenkracht,

00:05:43.260 --> 00:05:45.260
dat zijn nieuwe designmogelijkheden.

00:05:45.260 --> 00:05:47.260
Dit heeft dus veel spannende mogelijkheden.

00:05:47.260 --> 00:05:49.260
Volgens mij zijn deze projecten die ik je heb laten zien,

00:05:49.260 --> 00:05:51.260
slechts een kleine stap op weg naar deze toekomst,

00:05:51.260 --> 00:05:53.260
als we deze nieuwe technologieën implementeren,

00:05:53.260 --> 00:05:55.260
naar een nieuwe wereld die zichzelf assembleert.

00:05:55.260 --> 00:05:57.260
Dank u.

00:05:57.260 --> 00:05:59.260
(Applaus)

