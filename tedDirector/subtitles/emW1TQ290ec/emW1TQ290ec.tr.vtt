WEBVTT
Kind: captions
Language: tr

00:00:00.000 --> 00:00:07.000
Çeviri: YELDA ERISKEN
Gözden geçirme: Cevat Erisken

00:00:15.260 --> 00:00:17.260
Size bugün

00:00:17.260 --> 00:00:19.260
üretim sektörünün geleceğinden bahsetmek istiyorum.

00:00:19.260 --> 00:00:21.260
Ben, pek yakında binalar ve makinelerin

00:00:21.260 --> 00:00:23.260
kendiliğinden kurulup kopyalanacaklarına ve

00:00:23.260 --> 00:00:25.260
kendi kendilerini onaracaklarına inanıyorum.

00:00:25.260 --> 00:00:27.260
Şimdi size imalat sanayinin

00:00:27.260 --> 00:00:29.260
şu andaki durumunu anlatacağım.

00:00:29.260 --> 00:00:32.260
Daha sonra da bunun doğal sistemlerle karşılaştırmasını yapacağım.

00:00:32.260 --> 00:00:35.260
Sanayideki mevcut teknoloji ile gökdelenler yapıyoruz.

00:00:35.260 --> 00:00:37.260
Bu yapılar, yapımı iki buçuk yıl süren

00:00:37.260 --> 00:00:39.260
500.000 ile 1.000.000 arasında parçadan oluşan

00:00:39.260 --> 00:00:41.260
çelik, beton ve cam gibi oldukça karmaşık, yeni ve

00:00:41.260 --> 00:00:44.260
etkileyici teknolojileri içermektedir.

00:00:44.260 --> 00:00:46.260
Bizleri uzaya götürebilecek

00:00:46.260 --> 00:00:48.260
harika araçlar var.

00:00:48.260 --> 00:00:51.260
Bunların da yapımı yaklaşık beş yıl alıyor ve 2.5 milyon parçadan oluşuyorlar.

00:00:51.260 --> 00:00:54.260
Diğer taraftan doğal sistemlere bakacak olursak

00:00:54.260 --> 00:00:56.260
örneğin proteinlerin

00:00:56.260 --> 00:00:58.260
iki milyon çeşidinin olduğunu

00:00:58.260 --> 00:01:00.260
ve 10.000 nanosaniyede kıvrılabildiklerini görürüz.

00:01:00.260 --> 00:01:02.260
Aynı şekilde, yaklaşık bir saat içinde kopyalanabilecek,

00:01:02.260 --> 00:01:05.260
üç milyon temel baz çiftine sahip DNA örneği de var.

00:01:05.260 --> 00:01:07.260
Doğal sistemler işte bu örneklerde olduğu gibi

00:01:07.260 --> 00:01:09.260
karmaşık yapıda olmalarına rağmen

00:01:09.260 --> 00:01:11.260
oldukça verimli çalışmaktadırlar.

00:01:11.260 --> 00:01:13.260
Yani bizim yapabileceğimiz herhangi bir şeyden çok daha verimli çalışırlar

00:01:13.260 --> 00:01:15.260
ve çok daha karmaşık yapıdadırlar.

00:01:15.260 --> 00:01:17.260
Enerji bakımından kıyaslanmayacak derecede daha verimlidirler.

00:01:17.260 --> 00:01:20.260
Hemen hemen hiç hata yapma ihtimalleri yoktur.

00:01:20.260 --> 00:01:22.260
Yaşamlarının devamı için kendi kendilerini onarırlar.

00:01:22.260 --> 00:01:25.260
Görüldüğü gibi doğal sistemlerde olağanüstü ilginç bir durum söz konusudur.

00:01:25.260 --> 00:01:27.260
Eğer bu durumu bizim yapı sistemimize

00:01:27.260 --> 00:01:29.260
taşıma imkanımız olursa, yapı yöntemimiz ile ilgili

00:01:29.260 --> 00:01:31.260
heyecan verici gelişmeler söz konusu olabilir.

00:01:31.260 --> 00:01:34.260
Ve bence burada kilit nokta kendiliğinden kurulma işlemidir.

00:01:34.260 --> 00:01:37.260
Eğer kendiliğinden kurulma işlemini kendi yaşantımızda kullanmak istersek

00:01:37.260 --> 00:01:39.260
dört önemli faktörü göz önünde bulundurmamız gerekir.

00:01:39.260 --> 00:01:41.260
Bunlardan birincisi, yapmak istediğimiz şeylerin yani

00:01:41.260 --> 00:01:43.260
bina ve makinelerin

00:01:43.260 --> 00:01:45.260
karmaşık yapılarını çözümlemektir.

00:01:45.260 --> 00:01:47.260
Bu yapıları basit parçalara bölerek dizilimlerini çözümlemeliyiz.

00:01:47.260 --> 00:01:49.260
Yani bir anlamda binaların DNA'larını çıkarmalıyız.

00:01:49.260 --> 00:01:51.260
Daha sonra da bu dizilimleri alıp

00:01:51.260 --> 00:01:53.260
onları bükebilecek veya yeniden şekillendirebilecek

00:01:53.260 --> 00:01:56.260
programlanabilir parçalar yapmalıyız.

00:01:56.260 --> 00:01:59.260
Bunları aktif hale geçirecek yani program aracılığı ile

00:01:59.260 --> 00:02:02.260
bu parçaların kıvrılabilmesini sağlayacak enerjiye de ihtiyacımız olacak.

00:02:02.260 --> 00:02:04.260
Ve son olarak da, istediğimiz şeyi başarılı bir biçimde ürettiğimizden emin olmak için

00:02:04.260 --> 00:02:07.260
bir tür hata denetim mekanizmasına gereksinimimiz var.

00:02:07.260 --> 00:02:09.260
Şimdi sizlere bu kendiliğinden kurulma sürecinin gelecekte başarılı olabilmesi için

00:02:09.260 --> 00:02:11.260
benim ve diğer çalışma arkadaşlarımın MIT'de üzerinde çalıştığımız

00:02:11.260 --> 00:02:13.260
birkaç projeden bahsedeceğim.

00:02:13.260 --> 00:02:16.260
Bunlardan ilk ikisi Makrobot ve DeciBot projeleridir.

00:02:16.260 --> 00:02:20.260
Bu ikisi büyük ölçekli yeniden yapılandırılabilir robotlara yönelik projelerdir.

00:02:20.260 --> 00:02:23.260
Bu robotlar 8 fit ve 12 fit uzunluğunda proteinleri temsil etmektedir.

00:02:23.260 --> 00:02:26.260
İçlerine mekanik elektrik cihazlar yani sensörler yerleştirilmiştir.

00:02:26.260 --> 00:02:28.260
Önce ne derecede kıvrımlar istediğinizi hesaplıyorsunuz.

00:02:28.260 --> 00:02:30.260
Yani dizilimlerin kıvrım açılarını belirliyorsunuz.

00:02:30.260 --> 00:02:32.260
Bunlar, eksi 120, eksi 120, 0, 0,

00:02:32.260 --> 00:02:35.260
120, eksi 120 gibi

00:02:35.260 --> 00:02:37.260
açılar veya döngülerden oluşuyor

00:02:37.260 --> 00:02:40.260
ve bu dizilim bilgisini yaylar aracılığı ile iletiyorsunuz.

00:02:40.260 --> 00:02:43.260
Her birim kendine gelen mesajı algılıyor -- mesela eksi 120 olsun.

00:02:43.260 --> 00:02:45.260
O açı kadar dönüyor ve konumunu kontrol edip

00:02:45.260 --> 00:02:48.260
bilgilerini yanındaki diziye geçiriyor.

00:02:48.260 --> 00:02:50.260
Bu gördükleriniz bu proje için çalışan zeki araştırmacılar,

00:02:50.260 --> 00:02:52.260
mühendisler ve tasarımcılar.

00:02:52.260 --> 00:02:54.260
Ve sanırım bu örnekler şu soruyu gündeme getiriyor:

00:02:54.260 --> 00:02:56.260
Bu çalışmalar gerçek ölçeğe uyarlanabilir mi?

00:02:56.260 --> 00:02:58.260
Yani bu 8 fit büyüklüğündeki robotu yapmak için

00:02:58.260 --> 00:03:01.260
binlerce dolar ve yüklü işgücü harcandı.

00:03:01.260 --> 00:03:04.260
Bunu gerçek ölçeğe uygun yapabilir miyiz? Yani herbir parça içine de robotlar yerleştirebilir miyiz?

00:03:04.260 --> 00:03:06.260
Bahsettiğim ikinci robot buna cevap verir nitelikte olup

00:03:06.260 --> 00:03:08.260
pasif yapıyı örnek alıyor

00:03:08.260 --> 00:03:11.260
yani pasif biçimde programlama ile şekil değiştirebilme imkanı sağlıyor.

00:03:11.260 --> 00:03:13.260
Fakat bir aşama daha ileri gidip

00:03:13.260 --> 00:03:15.260
gerçek hesaplama yapmaya girişiyor.

00:03:15.260 --> 00:03:17.260
Esasen, burada hesaplamanın en temel yapı taşı olan

00:03:17.260 --> 00:03:19.260
dijital mantık kapısı

00:03:19.260 --> 00:03:21.260
parçalara yerleştirilmektedir.

00:03:21.260 --> 00:03:23.260
Örneğin bu bir 'Ve Değil Kapısı' (NAND) .

00:03:23.260 --> 00:03:25.260
Burada sizin hesaplarınızı yapacak kapı olan

00:03:25.260 --> 00:03:27.260
bir tetrahedron ve

00:03:27.260 --> 00:03:29.260
iki adet girdi tetrahedronu görüyorsunuz.

00:03:29.260 --> 00:03:32.260
Bunlardan birisi, parçalar imal edilirken kullanıcıdan gelen girdiler içindir.

00:03:32.260 --> 00:03:35.260
Diğeri ise daha önce yerleştirilmiş olan parçadan gelen girdidir.

00:03:35.260 --> 00:03:38.260
Böylece size üç boyutlu bir çıktı ulaşır.

00:03:38.260 --> 00:03:40.260
Bu, kullanıcının bu parçaları istediği biçimde yönlendirebilmesi

00:03:40.260 --> 00:03:43.260
anlamına gelmektedir.

00:03:43.260 --> 00:03:45.260
Kapı tetrahedron daha önce yapılanları ve

00:03:45.260 --> 00:03:47.260
şu anda yönlendirilen komutları hesaplar.

00:03:47.260 --> 00:03:49.260
Ve sonunda üç-boyutlu uzayda

00:03:49.260 --> 00:03:51.260
aşağıya ve yukarıya doğru hareket etmeye başlar.

00:03:51.260 --> 00:03:54.260
Mesela sol tarafta gördüğünüz [1,1] girdisi 0 çıktısına karşılık gelir ve aşağı doğru hareket ettirir.

00:03:54.260 --> 00:03:56.260
Sağ taraftaki şekilde de [0,0] girdisi 1 çıktısına karşılık gelir

00:03:56.260 --> 00:03:59.260
ve yukarı hareket ettirir.

00:03:59.260 --> 00:04:01.260
Aslında bütün bu örnekler

00:04:01.260 --> 00:04:03.260
ileride yapmak istediklerimizin

00:04:03.260 --> 00:04:05.260
bir prototipi niteliğindedir.

00:04:05.260 --> 00:04:08.260
Yani bunlar yüklendikleri bilgilerin tamamını muhafaza ediyorlar.

00:04:08.260 --> 00:04:11.260
Bu da bir anlamda bir tür kendini çoğaltma yöntemine sahip olduğumuzu gösteriyor.

00:04:11.260 --> 00:04:14.260
Ben bunu kendi kendine çoğalma diye adlandırıyorum

00:04:14.260 --> 00:04:16.260
çünkü yapı, ilki ile tamamen aynı özellikleri barındırıyor.

00:04:16.260 --> 00:04:18.260
Eğer hata olduğunu belirlerseniz parçalardan birini değiştirebilirsiniz.

00:04:18.260 --> 00:04:21.260
Bu hatayı nasıl onarabileceğiniz ile ilgili tüm bilgiler yüklenmiştir.

00:04:21.260 --> 00:04:23.260
Yani sistemde bunları okuyabilecek parçalar var

00:04:23.260 --> 00:04:25.260
ve bu bilgiler bire bir size sunulabilir.

00:04:25.260 --> 00:04:27.260
Bu sisteme doğrudan yerleştirilmiştir ve harici bir talimata gerek yoktur.

00:04:27.260 --> 00:04:30.260
Size göstereceğim son örnek 'Meyilli Zincirler' projesidir

00:04:30.260 --> 00:04:33.260
ve bu proje, pasif kendi-kurulabilen sistemlerle ilgili

00:04:33.260 --> 00:04:35.260
şu anda var olan en ilginç örnektir.

00:04:35.260 --> 00:04:37.260
Bu sistem yeniden ayarlanabilirlik ve

00:04:37.260 --> 00:04:39.260
programlanabilirlik özellikleriyle birlikte

00:04:39.260 --> 00:04:42.260
tamamen edilgen bir sistem haline getirilmiştir.

00:04:43.260 --> 00:04:45.260
Basit anlamda, bu sistem bir elemanlar zinciri gibidir.

00:04:45.260 --> 00:04:47.260
Herbir eleman tamamen birbiriyle aynı

00:04:47.260 --> 00:04:49.260
ve meyillidir.

00:04:49.260 --> 00:04:52.260
Yani her zincir veya her eleman sağa veya sola dönme eğilimindedir.

00:04:52.260 --> 00:04:55.260
Siz zinciri kurarken, aslında aynı zamanda onu programlıyorsunuz da.

00:04:55.260 --> 00:04:58.260
Bir anlamda, herbir birimin sağa veya sola döneceğini de tanımlamış oluyorsunuz.

00:04:58.260 --> 00:05:01.260
Bu sebeple,

00:05:01.260 --> 00:05:03.260
zinciri salladığınızda

00:05:03.260 --> 00:05:06.260
programlandığı biçimde kıvrılır ve katlanır.

00:05:06.260 --> 00:05:08.260
Mesela bu zincirde spiral bir şekil oluşurken

00:05:08.260 --> 00:05:11.260
buradakinde

00:05:11.260 --> 00:05:14.260
yan yana iki adet küp oluşur.

00:05:14.260 --> 00:05:16.260
Bu zincire pasif olarak

00:05:16.260 --> 00:05:18.260
üç boyutlu herhangi bir şekil programlayabilirsiniz.

00:05:18.260 --> 00:05:21.260
İki veya tek boyutlu da olabilir.

00:05:21.260 --> 00:05:23.260
Peki bu bize gelecekle ilgili ne fikir verir?

00:05:23.260 --> 00:05:25.260
Şahsen, bunun bize gelecekte

00:05:25.260 --> 00:05:28.260
fiziki yapıların, binaların ve makinelerin kendi kendine kurulumları, çoğalmaları ve onarımları ile ilgili

00:05:28.260 --> 00:05:31.260
yeni olanaklar sağlayacağını düşünüyorum.

00:05:31.260 --> 00:05:33.260
Bu parçalarda programlanabilir yeni özellikler mevcut.

00:05:33.260 --> 00:05:35.260
Bu sebeple, hesaplama açısından yeni firsatlar da sunuyor.

00:05:35.260 --> 00:05:37.260
Konumsal hesaplamalar olacak.

00:05:37.260 --> 00:05:39.260
Binaların, köprülerin, makinelerin

00:05:39.260 --> 00:05:41.260
yani her bir yapı taşının hesaplama yapabildiğini düşünün.

00:05:41.260 --> 00:05:43.260
Müthiş birşey. Paralel ve dağıtılmış hesaplama gücü ve

00:05:43.260 --> 00:05:45.260
yeni tasarım imkanları olacak.

00:05:45.260 --> 00:05:47.260
Oldukça heyecan verici bir potansiyele sahip.

00:05:47.260 --> 00:05:49.260
Öyle zannediyorum ki size tanıttığım bu projeler

00:05:49.260 --> 00:05:51.260
eğer bu teknolojileri hayata geçirebilirsek

00:05:51.260 --> 00:05:53.260
gelecekteki kendi kendine kurulan sistemler için

00:05:53.260 --> 00:05:55.260
sadece küçük birer adım niteliğinde kalacaktır.

00:05:55.260 --> 00:05:57.260
Teşekkürler.

00:05:57.260 --> 00:05:59.260
(Alkış)

