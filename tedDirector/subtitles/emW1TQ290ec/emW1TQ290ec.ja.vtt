WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:07.000
翻訳: Yuki Okada
校正: Hidetoshi Yamauchi

00:00:15.260 --> 00:00:17.260
今日は皆さんに

00:00:17.260 --> 00:00:19.260
物づくりの未来をお見せします

00:00:19.260 --> 00:00:21.260
私はやがて建物や機械が

00:00:21.260 --> 00:00:23.260
自己組織化するようになり 自ら複製や

00:00:23.260 --> 00:00:25.260
修復をするようになると信じています

00:00:25.260 --> 00:00:27.260
これから

00:00:27.260 --> 00:00:29.260
私が信じる 物づくりの現状と

00:00:29.260 --> 00:00:32.260
それらに対する自然界のシステムを比較します

00:00:32.260 --> 00:00:35.260
物づくりの現状として 高層ビルが例に挙げられます

00:00:35.260 --> 00:00:37.260
建築期間は２年半

00:00:37.260 --> 00:00:39.260
部品数は50万から100万個

00:00:39.260 --> 00:00:41.260
かなり複雑であり 鋼鉄やコンクリート

00:00:41.260 --> 00:00:44.260
ガラスにおける最新の素晴らしい技術でできています

00:00:44.260 --> 00:00:46.260
私たちが持つ宇宙に運ぶ

00:00:46.260 --> 00:00:48.260
素晴らしい機械は

00:00:48.260 --> 00:00:51.260
製造期間が５年 部品数は250万個です

00:00:51.260 --> 00:00:54.260
一方で 自然界のシステムに目を向けると

00:00:54.260 --> 00:00:56.260
200万種類もの

00:00:56.260 --> 00:00:58.260
タンパク質が

00:00:58.260 --> 00:01:00.260
1万ナノ秒のうちに折り畳んだり

00:01:00.260 --> 00:01:02.260
30億塩基対のDNAが

00:01:02.260 --> 00:01:05.260
およそ１時間以内に複製が出来たりします

00:01:05.260 --> 00:01:07.260
このように自然界のシステムには

00:01:07.260 --> 00:01:09.260
こんなに多くの複雑性が存在していますが

00:01:09.260 --> 00:01:11.260
これらは極めて効率が良く

00:01:11.260 --> 00:01:13.260
私たちがつくるものよりもはるかに

00:01:13.260 --> 00:01:15.260
効率的で複雑なのです

00:01:15.260 --> 00:01:17.260
エネルギーの観点からもずっと効率的です

00:01:17.260 --> 00:01:20.260
これらは滅多にミスをしません

00:01:20.260 --> 00:01:22.260
そして状態を保つ為に自己修復が可能です

00:01:22.260 --> 00:01:25.260
このように自然界のシステムには大変興味深い点があります

00:01:25.260 --> 00:01:27.260
そしてこれらを

00:01:27.260 --> 00:01:29.260
私たちの構築した環境に取り入れられれば

00:01:29.260 --> 00:01:31.260
物づくりに面白い可能性が備わります

00:01:31.260 --> 00:01:34.260
そしてその鍵となるのは自己組織化です

00:01:34.260 --> 00:01:37.260
物理環境において自己組織化を活用する場合

00:01:37.260 --> 00:01:39.260
４つの要素があると考えます

00:01:39.260 --> 00:01:41.260
１つは 建物や機械などといった

00:01:41.260 --> 00:01:43.260
私たちが作りたいあらゆる複雑なものを

00:01:43.260 --> 00:01:45.260
復元する必要があります

00:01:45.260 --> 00:01:47.260
そして簡単な配列に復元する必要があります

00:01:47.260 --> 00:01:49.260
つまり建物がどのように機能するかといったDNAです

00:01:49.260 --> 00:01:51.260
次にそれらの配列を用いて

00:01:51.260 --> 00:01:53.260
折り畳んだり 再構成するための

00:01:53.260 --> 00:01:56.260
プログラム可能な部品が必要です

00:01:56.260 --> 00:01:59.260
それらを稼働させ 部品をプログラムによって

00:01:59.260 --> 00:02:02.260
折り畳めるようにするためのエネルギーが必要です

00:02:02.260 --> 00:02:04.260
そして 一種の冗長なエラー修正機能によって

00:02:04.260 --> 00:02:07.260
望んだ物がうまく組み立てられたか保証するものが必要です

00:02:07.260 --> 00:02:09.260
それでは 私と私のMITの同僚たちが

00:02:09.260 --> 00:02:11.260
この自己組織化した未来を実現するために

00:02:11.260 --> 00:02:13.260
取り組んでいるプロジェクトを紹介します

00:02:13.260 --> 00:02:16.260
始めの２つはMacroBotとDeciBotです

00:02:16.260 --> 00:02:20.260
これらは大型の再構成可能ロボットで

00:02:20.260 --> 00:02:23.260
縦幅2.5メートル 横幅3.5メートルもの物体で構成されています

00:02:23.260 --> 00:02:26.260
機械電子機器やセンサーが内蔵されており

00:02:26.260 --> 00:02:28.260
実現したい折り畳み方法を

00:02:28.260 --> 00:02:30.260
角度を表す配列で復元します

00:02:30.260 --> 00:02:32.260
マイナス120度 マイナス120度 0度 0度

00:02:32.260 --> 00:02:35.260
120度 マイナス120度 といった感じです

00:02:35.260 --> 00:02:37.260
このような角度を表す配列に

00:02:37.260 --> 00:02:40.260
配線を通してこの配列を送信します

00:02:40.260 --> 00:02:43.260
それぞれのユニットがこのメッセージを受信し マイナス120度なら

00:02:43.260 --> 00:02:45.260
このように回転し 到達したか確認後

00:02:45.260 --> 00:02:48.260
次のユニットの入力待ちとなります

00:02:48.260 --> 00:02:50.260
彼らがこのプロジェクトに参加している

00:02:50.260 --> 00:02:52.260
素晴らしい科学者やエンジニア そしてデザイナーです

00:02:52.260 --> 00:02:54.260
私は本当に実現すると考えています

00:02:54.260 --> 00:02:56.260
これは本当に拡張性があるでしょうか？

00:02:56.260 --> 00:02:58.260
この2.5メートルものロボットの製作に

00:02:58.260 --> 00:03:01.260
膨大なお金と 手間がかかりました

00:03:01.260 --> 00:03:04.260
本当にこれが拡張し 全ての部品にロボット工学を組み込めるでしょうか？

00:03:04.260 --> 00:03:06.260
次のロボットでは それを命題に

00:03:06.260 --> 00:03:08.260
受動的な性質 もしくは

00:03:08.260 --> 00:03:11.260
受動的に再構成プログラミング能力を獲得させようとしています

00:03:11.260 --> 00:03:13.260
さらに一歩進んで

00:03:13.260 --> 00:03:15.260
実際に演算能力を持たせようとしています

00:03:15.260 --> 00:03:17.260
これにコンピューティングの最も基本的な

00:03:17.260 --> 00:03:19.260
要素であるデジタルロジックゲートを

00:03:19.260 --> 00:03:21.260
部品の中に直接組み込んでいます

00:03:21.260 --> 00:03:23.260
これがNANDゲートです

00:03:23.260 --> 00:03:25.260
コンピューティングを行うゲートである

00:03:25.260 --> 00:03:27.260
四面体が１つあり

00:03:27.260 --> 00:03:29.260
２つ入力用の四面体があります

00:03:29.260 --> 00:03:32.260
一方が部品を組み立てるユーザーの入力用に使われ

00:03:32.260 --> 00:03:35.260
もう一方が前に設置された部品の入力用です

00:03:35.260 --> 00:03:38.260
そして３次元空間上に出力を行います

00:03:38.260 --> 00:03:40.260
これが何を意味するかというと

00:03:40.260 --> 00:03:43.260
ユーザーが部品の動作を指示することができるということです

00:03:43.260 --> 00:03:45.260
これは前に行ったことと

00:03:45.260 --> 00:03:47.260
ユーザーの指示を演算します

00:03:47.260 --> 00:03:49.260
そしてこのように３次元空間を

00:03:49.260 --> 00:03:51.260
上下に動き始めます

00:03:51.260 --> 00:03:54.260
左側では 入力[１,１]は 出力０のため 下に向き

00:03:54.260 --> 00:03:56.260
右側では

00:03:56.260 --> 00:03:59.260
入力[０,０]は 出力１のため 上に向かいます

00:03:59.260 --> 00:04:01.260
これが本当に意味するのは

00:04:01.260 --> 00:04:03.260
この構造物には 今や私たちが作りたい物の

00:04:03.260 --> 00:04:05.260
設計図が含まれているということです

00:04:05.260 --> 00:04:08.260
作り上げられるべき物の全ての情報が組み込まれているのです

00:04:08.260 --> 00:04:11.260
これはつまり 自己複製のようなことが行えることを意味します

00:04:11.260 --> 00:04:14.260
このようなものを私は 自己誘導複製と呼んでいます

00:04:14.260 --> 00:04:16.260
これに完全な設計図が含まれているからです

00:04:16.260 --> 00:04:18.260
エラーがあれば 一部を取り替えることができます

00:04:18.260 --> 00:04:21.260
全ての局所情報は修復用に組み込まれています

00:04:21.260 --> 00:04:23.260
従って例えば 平行して動作し データを読み込み

00:04:23.260 --> 00:04:25.260
出力を行うようなことができるでしょう

00:04:25.260 --> 00:04:27.260
情報は直接組み込まれており 外部命令に依存しません

00:04:27.260 --> 00:04:30.260
最後にお見せするプロジェクトは Biased Chainsと呼びます

00:04:30.260 --> 00:04:33.260
これは おそらく受動的自己組織化システムにおける

00:04:33.260 --> 00:04:35.260
最も面白い例であるといえます

00:04:35.260 --> 00:04:37.260
再構築機能を持ち

00:04:37.260 --> 00:04:39.260
プログラミング要素があり

00:04:39.260 --> 00:04:42.260
完全に受動的なシステムです

00:04:43.260 --> 00:04:45.260
物体の鎖があるとします

00:04:45.260 --> 00:04:47.260
それぞれの物体は全く同一であり

00:04:47.260 --> 00:04:49.260
それらは偏っています

00:04:49.260 --> 00:04:52.260
それぞれの鎖 もしくは物体は 左右に動こうとします

00:04:52.260 --> 00:04:55.260
鎖の組み立ては 基本的にはプログラミングに相当します

00:04:55.260 --> 00:04:58.260
それぞれのユニットに左に曲がるか 右に曲がるか伝えているのです

00:04:58.260 --> 00:05:01.260
そして鎖を振ると

00:05:01.260 --> 00:05:03.260
プログラムした

00:05:03.260 --> 00:05:06.260
あらゆる構造に折り畳まれます

00:05:06.260 --> 00:05:08.260
この場合は 螺旋ですし

00:05:08.260 --> 00:05:11.260
この場合では

00:05:11.260 --> 00:05:14.260
２つの正四面体が重なっています

00:05:14.260 --> 00:05:16.260
このようにあらゆる

00:05:16.260 --> 00:05:18.260
３次元形状 もしくは１次元 ２次元のものを

00:05:18.260 --> 00:05:21.260
この鎖で受動的にプログラムすることができます

00:05:21.260 --> 00:05:23.260
では これが示す未来とは何でしょうか？

00:05:23.260 --> 00:05:25.260
私が思うに これによって

00:05:25.260 --> 00:05:28.260
物理的構造や建築 機械に対し自己組織化や

00:05:28.260 --> 00:05:31.260
複製 修復といった新たな可能性をもたらすと考えます

00:05:31.260 --> 00:05:33.260
これらに新しくプログラミング要素が付与され

00:05:33.260 --> 00:05:35.260
コンピューティングの新しい可能性が生まれるのです

00:05:35.260 --> 00:05:37.260
空間コンピューティングが可能です

00:05:37.260 --> 00:05:39.260
建築や橋 機械などあらゆる部品が

00:05:39.260 --> 00:05:41.260
演算能力を持つことを想像してください

00:05:41.260 --> 00:05:43.260
並列で分散的な驚くべき演算能力であり

00:05:43.260 --> 00:05:45.260
新しいデザインの可能性が広がります

00:05:45.260 --> 00:05:47.260
このようにこれは素晴らしい潜在能力を持っています

00:05:47.260 --> 00:05:49.260
ご紹介したこれらのプロジェクトは

00:05:49.260 --> 00:05:51.260
そんな未来に向けてのほんの小さな一歩です

00:05:51.260 --> 00:05:53.260
これらの新しい技術を新たな自己組織化世界に

00:05:53.260 --> 00:05:55.260
向けて導入できればと考えます

00:05:55.260 --> 00:05:57.260
ありがとうございました

00:05:57.260 --> 00:05:59.260
（拍手）

