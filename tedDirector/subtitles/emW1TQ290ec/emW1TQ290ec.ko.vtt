WEBVTT
Kind: captions
Language: ko

00:00:00.000 --> 00:00:07.000
번역: Ann Yoon
검토: Bianca Lee

00:00:15.260 --> 00:00:17.260
저는 오늘 미래에

00:00:17.260 --> 00:00:19.260
우리가 물건을 만들 방법을 소개하고자 합니다.

00:00:19.260 --> 00:00:21.260
저는 건물들이나 기계들이 곧

00:00:21.260 --> 00:00:23.260
자기 스스로 만들어질 수 있을 것이라고 믿습니다.

00:00:23.260 --> 00:00:25.260
스스로 복제되고 수리되면서 말이지요.

00:00:25.260 --> 00:00:27.260
그래서 저는 오늘 당신에게

00:00:27.260 --> 00:00:29.260
오늘날 제조법의 현황을 보여드리고

00:00:29.260 --> 00:00:32.260
이것을 자연에서의 다양한 모습들과 비교하고자 합니다.

00:00:32.260 --> 00:00:35.260
그러니까 오늘날 제조법에서 우리에게는 고층 건물들이 있고--

00:00:35.260 --> 00:00:37.260
2년 반,

00:00:37.260 --> 00:00:39.260
500,000을 백만으로 나눈 부분들,

00:00:39.260 --> 00:00:41.260
꽤 복잡하고,

00:00:41.260 --> 00:00:44.260
새롭고 신비한 기술들이 철, 콘크리트, 유리 등에 사용되지요.

00:00:44.260 --> 00:00:46.260
우리를 우주로 데려다 줄 수 있는

00:00:46.260 --> 00:00:48.260
흥미로운 기계들도 있지요-

00:00:48.260 --> 00:00:51.260
5년, 250만개의 부분들.

00:00:51.260 --> 00:00:54.260
반면에, 우리가 자연 환경을 들여다 보면,

00:00:54.260 --> 00:00:56.260
우리는 200만개의 종류들을 가지고

00:00:56.260 --> 00:00:58.260
10,000 나노초에 접히는 단백질

00:00:58.260 --> 00:01:00.260
또는 30억개의

00:01:00.260 --> 00:01:02.260
염기쌍을 가진 DNA,

00:01:02.260 --> 00:01:05.260
1시간 정도면 복제할 수 있지요.

00:01:05.260 --> 00:01:07.260
그러니까 이러한 복잡함이

00:01:07.260 --> 00:01:09.260
우리의 생태계에 있지만

00:01:09.260 --> 00:01:11.260
그것들은 매우 효율적이고,

00:01:11.260 --> 00:01:13.260
우리가 지을 수 있는

00:01:13.260 --> 00:01:15.260
어떠한 것보다도 더 효율적이고,

00:01:15.260 --> 00:01:17.260
에너지적인 면에서도 훨씬 더 효율적입니다.

00:01:17.260 --> 00:01:20.260
그리고 실수를 하는 경우도 거의 없지요.

00:01:20.260 --> 00:01:22.260
또 오래 지속되도록 자신을 수리할 수도 있답니다.

00:01:22.260 --> 00:01:25.260
그리고 여기 자연에 대해 매우 흥미로운 점이 있습니다.

00:01:25.260 --> 00:01:27.260
그리고 우리가 그것을 우리가 지어놓은 환경에 맞게

00:01:27.260 --> 00:01:29.260
잘 번역시킬 수만 있다면

00:01:29.260 --> 00:01:31.260
우리의 제조법에 아주 흥미로운 잠재력을 가지게 되는 것입니다.

00:01:31.260 --> 00:01:34.260
그리고 그 답은 바로 스스로 지어진다는 점에 있습니다.

00:01:34.260 --> 00:01:37.260
그러니 우리가 스스로 지어지는 것을 우리의 물질적 환경에 활용하기 위해

00:01:37.260 --> 00:01:39.260
4가지 주요 요인이 있다고 생각합니다.

00:01:39.260 --> 00:01:41.260
첫번째로 우리가 짓고 싶은 것,

00:01:41.260 --> 00:01:43.260
즉, 건물과 기계들의

00:01:43.260 --> 00:01:45.260
복잡한 구조를 해독해 내는 것입니다.

00:01:45.260 --> 00:01:47.260
그리고 우리는 간단한 순서로 이것을 해독해야 하고--

00:01:47.260 --> 00:01:49.260
한마디로 건물들의 원리에 대한 DNA를 찾는 거죠.

00:01:49.260 --> 00:01:51.260
그 다음 우리는 그러한 순서로

00:01:51.260 --> 00:01:53.260
반듯하게 접거나 변경할,

00:01:53.260 --> 00:01:56.260
프로그래밍할 수 있는 부분들이 필요하죠.

00:01:56.260 --> 00:01:59.260
우리는 그것이 활성화되도록 하기 위해 에너지를 필요로 하고,

00:01:59.260 --> 00:02:02.260
프로그램에 따라 접히도록 해야지요.

00:02:02.260 --> 00:02:04.260
그리고 짓고 싶은 것을 성공적으로 짓는 것을

00:02:04.260 --> 00:02:07.260
보장하기 위해 실수를 허용할 만한 여분이 필요하겠지요.

00:02:07.260 --> 00:02:09.260
그래서 저는 우리의 '스스로 지어지는' 미래를 위해

00:02:09.260 --> 00:02:11.260
저와 제 동료들이 MIT에서 연구중인

00:02:11.260 --> 00:02:13.260
몇 개의 프로젝트들을 보여드리고자 합니다.

00:02:13.260 --> 00:02:16.260
우선 처음으로 보여드릴 로봇 두개는 MacroBot과 DeciBot입니다.

00:02:16.260 --> 00:02:20.260
그러니까 이 프로젝트들은 큰 규모의 변경 가능한 로봇들--

00:02:20.260 --> 00:02:23.260
8 피트, 12피트만큼 긴 단백질.

00:02:23.260 --> 00:02:26.260
그것들은 기계로 작동되며 전기를 사용하는 장치, 센서들이 박혀 있습니다.

00:02:26.260 --> 00:02:28.260
여러분은 접고 싶은 것을 해독해 내면 됩니다,

00:02:28.260 --> 00:02:30.260
연속적인 각들로 말이지요--

00:02:30.260 --> 00:02:32.260
그러니까 마이너스 120, 마이너스 120, 0, 0,

00:02:32.260 --> 00:02:35.260
120, 마이너스 120--이런 식으로요;

00:02:35.260 --> 00:02:37.260
그래서 각들의 행렬, 또는 순서들,

00:02:37.260 --> 00:02:40.260
그리고 이렇게 나열된 것들을 끈으로 보내면 됩니다.

00:02:40.260 --> 00:02:43.260
각 구성 단위가 각각의 신호를 받지요--그래서 마이너스 120.

00:02:43.260 --> 00:02:45.260
이렇게 돌아가고, 거기까지 잘 됬는지 확인하고

00:02:45.260 --> 00:02:48.260
옆쪽으로 넘겨줍니다.

00:02:48.260 --> 00:02:50.260
그러니까 이 프로젝트에 참여한 사람들은

00:02:50.260 --> 00:02:52.260
위대한 과학자들, 엔지니어들, 디자이너들입니다.

00:02:52.260 --> 00:02:54.260
그리고 정말 빛을 발하는 것은:

00:02:54.260 --> 00:02:56.260
확장이나 축소가 가능할까요?

00:02:56.260 --> 00:02:58.260
그러니까, 수천 달러, 사람들의 엄청난 노력이

00:02:58.260 --> 00:03:01.260
이 발 8개 달린 로봇을 만드는데 사용되었지요.

00:03:01.260 --> 00:03:04.260
이 규모를 더 늘릴 수 있을까요? 로봇 공학을 정말 모든 부분에 사용할 수 있을까요?

00:03:04.260 --> 00:03:06.260
그 다음으로는 그런 질문을 내놓고

00:03:06.260 --> 00:03:08.260
수동적인 자연을 보거나

00:03:08.260 --> 00:03:11.260
구조 변경이 프로그래밍 가능하게 하기 위해 수동적으로 시도합니다.

00:03:11.260 --> 00:03:13.260
하지만 이것은 한 단계 더 나아가서,

00:03:13.260 --> 00:03:15.260
실질적 계산을 하려 합니다.

00:03:15.260 --> 00:03:17.260
이것은 기본적으로 계산 등의 가장 기초적 단계가 박혀있고

00:03:17.260 --> 00:03:19.260
디지털 세계에서 논리적으로 작동할 수 있는 문이

00:03:19.260 --> 00:03:21.260
곧바로 조각들로 나누어집니다.

00:03:21.260 --> 00:03:23.260
그래서 이것이 NAND 문입니다.

00:03:23.260 --> 00:03:25.260
그 문이 되는 4면체를 당신이 가지고 있다면

00:03:25.260 --> 00:03:27.260
이것이 바로 계산을 하는 것입니다.

00:03:27.260 --> 00:03:29.260
그리고 당신은 2개의 4면체 입력장치를 가집니다.

00:03:29.260 --> 00:03:32.260
그 중 하나는 사용자가 벽돌들로 지으면서 입력하는 것입니다.

00:03:32.260 --> 00:03:35.260
또 다른 하나는 그 전에 자리잡은 벽돌입니다.

00:03:35.260 --> 00:03:38.260
그리고 이것은 3D 공간으로 당신에게 결과물을 보입니다.

00:03:38.260 --> 00:03:40.260
그러니까 이것이 뜻하는 바는

00:03:40.260 --> 00:03:43.260
사용자가 각각의 벽돌들이 했으면 하는 것을 입력할 수 있다는 겁니다.

00:03:43.260 --> 00:03:45.260
이것은 그 전에 자신이 한 일과

00:03:45.260 --> 00:03:47.260
당신이 요청한 일을 계산해냅니다.

00:03:47.260 --> 00:03:49.260
그리고 이제 3D 공간에서 움직입니다--

00:03:49.260 --> 00:03:51.260
이렇게 위로 아래로.

00:03:51.260 --> 00:03:54.260
그래서 왼쪽에 [1,1]을 입력하니 0이고, 그래서 내려갑니다.

00:03:54.260 --> 00:03:56.260
오른쪽에는 [0,0]을 입력해서

00:03:56.260 --> 00:03:59.260
1을 출력해내고, 그래서 위로 갑니다.

00:03:59.260 --> 00:04:01.260
그리고 이것이 의미하는 바는

00:04:01.260 --> 00:04:03.260
이제 우리의 구조는

00:04:03.260 --> 00:04:05.260
우리가 짓고 싶은 것의 청사진을 가진다는 것이지요.

00:04:05.260 --> 00:04:08.260
그래서 이것들은 그 전에 지어진 것에 대한 정보를 가집니다.

00:04:08.260 --> 00:04:11.260
그러니까 우리가 어떠한 종류의 자기 복제를 볼 수 있다는 것이죠.

00:04:11.260 --> 00:04:14.260
이런 경우에 나는 이것을 '스스로 안내 가능한' 자기 복제라고 하는데

00:04:14.260 --> 00:04:16.260
그 구조들이 정확히 같은 청사진을 가지기 때문이지요.

00:04:16.260 --> 00:04:18.260
만약 오류가 있다면, 그 부분을 바꾸면 됩니다.

00:04:18.260 --> 00:04:21.260
어떻게 고쳐야 하는지에 대한 정보도 다 있습니다.

00:04:21.260 --> 00:04:23.260
그래서 그것은 기어 올라서 그것을 읽어내고

00:04:23.260 --> 00:04:25.260
하나하나 실행합니다.

00:04:25.260 --> 00:04:27.260
그것은 전적으로 저장된 것입니다; 따로 알려줄 필요가 없습니다.

00:04:27.260 --> 00:04:30.260
그래서 마지막으로 제가 보여드릴 프로젝트는 '편향된 사슬'인데,

00:04:30.260 --> 00:04:33.260
이것은 수동적으로 '스스로 지어지는' 시스템 중

00:04:33.260 --> 00:04:35.260
우리가 가지고 있는 가장 흥미로운 예가 될 것입니다.

00:04:35.260 --> 00:04:37.260
그러니 이것은 변경 가능한 여부와

00:04:37.260 --> 00:04:39.260
프로그램을 짤 수 있는 능력 등이 있어야

00:04:39.260 --> 00:04:42.260
완벽히 수동적인 프로그램이 될 수 있을 것입니다.

00:04:43.260 --> 00:04:45.260
그러니까 기본적으로 다양한 요소들의 사슬이죠.

00:04:45.260 --> 00:04:47.260
각각의 요소들은 전부 같고,

00:04:47.260 --> 00:04:49.260
각자 다르게 편향됩니다.

00:04:49.260 --> 00:04:52.260
그러니 각각의 사슬, 또는 요소들이 오른쪽 또는 왼쪽으로 가고 싶어하죠.

00:04:52.260 --> 00:04:55.260
그래서 당신이 사슬을 조립하면서 결국은 프로그래밍도 하는 거죠.

00:04:55.260 --> 00:04:58.260
당신은 각 구성단위마다 오른쪽 아니면 왼쪽으로 돌라고 하는 것입니다.

00:04:58.260 --> 00:05:01.260
그래서 당신이 사슬을 흔들면

00:05:01.260 --> 00:05:03.260
그것은 접힙니다.

00:05:03.260 --> 00:05:06.260
당신이 프로그래밍을 한 어떠한 배열로 말이지요--

00:05:06.260 --> 00:05:08.260
예를 들어서 이 경우에서는 나선형,

00:05:08.260 --> 00:05:11.260
또는 이 경우에서는,

00:05:11.260 --> 00:05:14.260
서로 붙어있는 두 개의 정육면체로 말이지요.

00:05:14.260 --> 00:05:16.260
그러니 당신은 이것을 어떠한

00:05:16.260 --> 00:05:18.260
3차원적인 도형으로든 프로그래밍할 수 있고--

00:05:18.260 --> 00:05:21.260
또는 1차원, 2차원--다 수동적으로, 이 사슬만으로요.

00:05:21.260 --> 00:05:23.260
그러니까 이것은 미래에 대해 무엇을 보여주나요?

00:05:23.260 --> 00:05:25.260
제 생각에 이것은 우리에게

00:05:25.260 --> 00:05:28.260
스스로 지어지고, 응답하고, 수리되는 등의 가능성을

00:05:28.260 --> 00:05:31.260
우리의 물질적 구조들, 건물들, 그리고 기계들에 보여주는 것 같습니다.

00:05:31.260 --> 00:05:33.260
이러한 부분에서 새로운 프로그래밍의 가능성이 있지요.

00:05:33.260 --> 00:05:35.260
그리고 거기에서 계산 등에서의 새로운 가능성도 보입니다.

00:05:35.260 --> 00:05:37.260
우리는 공간적인 계산을 할 것입니다.

00:05:37.260 --> 00:05:39.260
건물들, 다리들, 기계들, 모든 벽돌들이

00:05:39.260 --> 00:05:41.260
실제로 계산될 수 있다고 상상해 보세요.

00:05:41.260 --> 00:05:43.260
그것은 평행하고, 광범위한, 엄청난 계산의 힘이며,

00:05:43.260 --> 00:05:45.260
새 디자인의 가능성입니다.

00:05:45.260 --> 00:05:47.260
그러니까 이것은 매우 흥미로운 잠재력을 보여주는 것이지요.

00:05:47.260 --> 00:05:49.260
그러니까 제 생각에 제가 보여드렸던 이 프로젝트들은

00:05:49.260 --> 00:05:51.260
미래를 향한 아주 작은 발걸음이지요.

00:05:51.260 --> 00:05:53.260
우리가 새로운 기술을 스스로

00:05:53.260 --> 00:05:55.260
만들어지는, 새로운 세계에 적용시킨다면 말입니다.

00:05:55.260 --> 00:05:57.260
감사합니다.

00:05:57.260 --> 00:05:59.260
(박수)

