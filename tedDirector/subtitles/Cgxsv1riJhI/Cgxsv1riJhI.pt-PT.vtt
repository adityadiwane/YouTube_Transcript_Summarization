WEBVTT
Kind: captions
Language: pt-PT

00:00:00.000 --> 00:00:07.000
Tradutor: Diana Almeida
Revisora: Margarida Ferreira

00:00:12.759 --> 00:00:15.234
Há dez anos, os investigadores
de visão computacional

00:00:15.234 --> 00:00:17.120
pensavam que fazer
com que um computador

00:00:17.120 --> 00:00:19.496
percebesse a diferença 
entre um gato e um cão

00:00:19.520 --> 00:00:21.496
seria praticamente impossível,

00:00:21.520 --> 00:00:25.216
mesmo com o avanço significativo
no campo da inteligência artificial.

00:00:25.420 --> 00:00:28.850
Agora, podemos fazê-lo
com uma precisão superior a 99%.

00:00:29.620 --> 00:00:31.430
Isto chama-se classificação de imagem:

00:00:31.430 --> 00:00:34.656
dar ao computador uma imagem,
atribuirmos-lhe um rótulo,

00:00:34.680 --> 00:00:38.230
e os computadores reconhecem
milhares de outras categorias também.

00:00:38.680 --> 00:00:41.576
Sou um aluno de pós-graduação
da Universidade de Washington,

00:00:41.576 --> 00:00:43.532
e trabalho num projeto chamado "Darknet",

00:00:43.532 --> 00:00:45.216
que é uma estrutura de rede neural

00:00:45.240 --> 00:00:48.056
para treinar e testar modelos 
de visão computacional.

00:00:48.080 --> 00:00:51.056
Então, vamos ver o que a "Darknet" pensa

00:00:51.530 --> 00:00:53.290
desta imagem que temos.

00:00:54.520 --> 00:00:58.036
Quando usamos
o nosso classificador nesta imagem,

00:00:58.120 --> 00:01:00.636
não ficamos somente a saber 
se é um cão ou um gato,

00:01:00.680 --> 00:01:02.936
mas obtemos a raça específica.

00:01:02.960 --> 00:01:05.136
Este é o nível de detalhe que temos agora.

00:01:05.160 --> 00:01:06.776
E está correto.

00:01:06.800 --> 00:01:08.640
O meu cão é, de facto, um malamute.

00:01:09.040 --> 00:01:13.376
Então, fizemos incríveis avanços
na classificação de imagem,

00:01:13.400 --> 00:01:17.430
mas o que acontece quando usamos 
o classificador numa imagem como esta?

00:01:19.080 --> 00:01:20.280
Bem...

00:01:24.640 --> 00:01:28.206
Vemos que o classificador retorna com
uma predição muito similar.

00:01:28.560 --> 00:01:31.806
E está correta, há um malamute na imagem,

00:01:31.850 --> 00:01:35.376
mas só através deste rótulo,
não conseguimos saber muito

00:01:35.400 --> 00:01:37.067
sobre o que se passa na imagem.

00:01:37.091 --> 00:01:38.981
Precisamos de algo mais eficaz.

00:01:39.240 --> 00:01:41.666
Eu trabalho numa questão
chamada deteção de objetos,

00:01:41.700 --> 00:01:44.656
em que analisamos uma imagem
e tentamos achar todos os objetos,

00:01:44.680 --> 00:01:46.760
colocamos caixas delimitadoras
à volta deles

00:01:46.760 --> 00:01:48.570
e dizemos que objetos são aqueles.

00:01:48.630 --> 00:01:52.100
Isto é o que acontece quando 
usamos um detetor nesta imagem.

00:01:53.240 --> 00:01:54.916
Com este tipo de resultado,

00:01:54.930 --> 00:01:58.406
podemos fazer muito mais com os nossos 
algoritmos de visão computacional.

00:01:58.466 --> 00:02:01.216
Vemos que o detetor sabe
que está ali um gato e um cão.

00:02:01.240 --> 00:02:04.446
Ele sabe quais as suas posições relativas,
o tamanho deles.

00:02:04.760 --> 00:02:06.630
Pode até saber alguma informação extra:

00:02:06.690 --> 00:02:08.680
está um livro ali ao fundo.

00:02:09.280 --> 00:02:12.726
E se quisermos construir um sistema
a partir da visão computacional,

00:02:12.790 --> 00:02:15.846
digamos, um veículo autónomo 
ou um sistema robótico,

00:02:16.040 --> 00:02:18.496
este é o tipo de informação que queremos.

00:02:18.690 --> 00:02:21.989
Precisamos de algo que possa
interagir com o mundo físico.

00:02:22.679 --> 00:02:24.960
Quando comecei a trabalhar
em deteção de objetos,

00:02:24.980 --> 00:02:27.926
levava 20 segundos para
processar uma única imagem.

00:02:28.360 --> 00:02:32.460
E para terem uma noção de como a
velocidade é tão importante neste campo,

00:02:33.120 --> 00:02:35.656
este é um exemplo
de um detetor de objetos

00:02:35.680 --> 00:02:38.096
que leva dois segundos
para processar uma imagem.

00:02:38.120 --> 00:02:40.736
Isto é, 10 vezes mais rápido

00:02:40.760 --> 00:02:44.296
que o detetor de 20-segundos-por-imagem.

00:02:44.320 --> 00:02:46.976
Podem ver que. no tempo
que demora a fazer predições,

00:02:47.000 --> 00:02:49.040
tudo mudou.

00:02:49.880 --> 00:02:53.486
Isso não seria muito útil
para uma aplicação.

00:02:53.760 --> 00:02:56.256
Se aumentarmos a velocidade 10 vezes mais,

00:02:56.280 --> 00:02:58.976
este é um detetor
a cinco quadros por segundo.

00:02:59.120 --> 00:03:00.596
Isto é muito melhor

00:03:00.680 --> 00:03:02.656
mas, por exemplo,

00:03:02.680 --> 00:03:04.976
se houver qualquer
movimento significativo,

00:03:05.000 --> 00:03:07.950
eu não quereria um sistema
como este a conduzir o meu carro.

00:03:09.120 --> 00:03:12.540
Este é o nosso sistema de deteção
em tempo-real no meu portátil.

00:03:13.000 --> 00:03:16.136
Ele acompanha-me suavemente
enquanto me movo à volta do quadro,

00:03:16.160 --> 00:03:20.260
e é potente para uma grande variedade
de mudanças de tamanho,

00:03:21.440 --> 00:03:22.760
de posição,

00:03:23.280 --> 00:03:25.876
para a frente, para trás,
isto é uma maravilha.

00:03:25.890 --> 00:03:28.136
É disto que realmente precisamos

00:03:28.160 --> 00:03:31.056
se formos construir sistemas
a partir de visão computacional.

00:03:31.720 --> 00:03:34.710
(Aplausos)

00:03:36.280 --> 00:03:38.456
Apenas nalguns anos,

00:03:38.480 --> 00:03:41.136
mudámos de 20 segundos por imagem

00:03:41.160 --> 00:03:44.696
para 20 milissegundos por imagem,
mil vezes mais rápido.

00:03:44.720 --> 00:03:46.136
Como chegámos lá?

00:03:46.160 --> 00:03:49.176
Bom, no passado,
os sistemas de deteção de objetos

00:03:49.200 --> 00:03:51.136
agarrariam numa imagem assim

00:03:51.160 --> 00:03:53.616
e dividi-la-iam num punhado de regiões

00:03:53.640 --> 00:03:56.896
e depois rodariam um classificador
em cada uma destas regiões.

00:03:56.920 --> 00:03:59.456
As pontuações altas
para aquele classificador

00:03:59.480 --> 00:04:02.616
seriam consideradas deteções na imagem.

00:04:02.710 --> 00:04:06.696
Mas isto envolvia rodar o classificador
milhares de vezes numa imagem,

00:04:06.770 --> 00:04:10.030
milhares de avaliações de redes neurais
para produzir deteção.

00:04:11.240 --> 00:04:15.536
Em vez disso, treinamos uma única rede
para fazer toda a deteção por nós.

00:04:15.800 --> 00:04:20.320
Ela produz todas as caixas limitadoras e
probabilidades de classe simultaneamente.

00:04:20.680 --> 00:04:24.176
Com o nosso sistema, em vez de
olhar para uma imagem milhares de vezes

00:04:24.200 --> 00:04:25.656
para produzir deteção,

00:04:25.680 --> 00:04:27.086
olhamos apenas para uma.

00:04:27.150 --> 00:04:30.150
É por isso que lhe chamamos
o método YOLO de deteção de objetos.

00:04:31.360 --> 00:04:35.336
Então com essa velocidade,
não estamos limitados apenas a imagens;

00:04:35.360 --> 00:04:37.776
podemos processar vídeos em tempo real.

00:04:37.800 --> 00:04:40.896
E agora, em vez de ver
um gato e um cão,

00:04:40.920 --> 00:04:43.880
podemos vê-los moverem-se
e interagirem um com o outro.

00:04:46.560 --> 00:04:48.616
Este é um detetor que treinámos

00:04:48.640 --> 00:04:53.016
em 80 classes diferentes

00:04:53.040 --> 00:04:56.296
no conjunto de dados COCO, da Microsoft.

00:04:56.320 --> 00:04:59.656
Ele tem todo o tipo de coisas,
como colher e garfo, tigela,

00:04:59.680 --> 00:05:01.660
objetos comuns como esses.

00:05:02.360 --> 00:05:05.456
Tem uma variedade
de coisas mais exóticas:

00:05:05.480 --> 00:05:08.286
animais, carros, zebras, girafas.

00:05:08.760 --> 00:05:10.430
E agora vamos fazer algo divertido.

00:05:10.500 --> 00:05:14.230
Vamos até à audiência e ver
que tipos de coisas podemos detetar.

00:05:14.270 --> 00:05:16.400
Alguém quer um animal de peluche?

00:05:18.000 --> 00:05:20.142
Há por aqui uns ursinhos.

00:05:22.040 --> 00:05:26.576
Podemos diminuir o nosso limiar
de deteção por um momento,

00:05:26.600 --> 00:05:30.000
para podemos detetar
mais pessoas na audiência.

00:05:31.560 --> 00:05:33.896
Vamos ver se conseguimos
detetar essas placas.

00:05:33.920 --> 00:05:35.800
Achámos umas mochilas.

00:05:37.880 --> 00:05:39.960
Vamos ampliar um pouco.

00:05:42.320 --> 00:05:43.576
E isso é ótimo.

00:05:43.600 --> 00:05:46.776
Todo o processamento
está a ocorrer em tempo real

00:05:46.800 --> 00:05:48.250
no portátil.

00:05:49.080 --> 00:05:50.460
E é importante lembrarem-se

00:05:50.520 --> 00:05:53.676
que este é um sistema
de deteção de propósito geral,

00:05:53.800 --> 00:05:58.850
e assim podemos treiná-lo para
qualquer domínio de imagens.

00:06:00.320 --> 00:06:02.856
O mesmo código que usamos

00:06:02.880 --> 00:06:05.336
para encontrar sinais de stop
ou pedestres,

00:06:05.360 --> 00:06:07.466
bicicletas num veículo automotor,

00:06:07.500 --> 00:06:10.216
pode ser usado para encontrar
células cancerígenas

00:06:10.240 --> 00:06:12.886
numa biópsia de tecido.

00:06:13.280 --> 00:06:17.550
Há investigadores por todo o mundo
que já usam esta tecnologia

00:06:18.240 --> 00:06:21.656
para progredirem em coisas
como a medicina, a robótica.

00:06:21.680 --> 00:06:23.196
Hoje de manhã, li um artigo

00:06:23.220 --> 00:06:25.970
que dizia que estavam a fazer
um recenseamento de animais

00:06:26.010 --> 00:06:27.750
no Parque Nacional Nairobi

00:06:27.820 --> 00:06:30.776
com YOLO como parte
deste sistema de deteção.

00:06:30.840 --> 00:06:33.936
Isto é possível porque a Darknet
é de código aberto

00:06:33.960 --> 00:06:36.690
e está sob domínio público,
livre para qualquer um usar.

00:06:38.220 --> 00:06:41.246
(Aplausos)

00:06:43.320 --> 00:06:47.996
Mas queríamos tornar a deteção
ainda mais acessível e utilizável,

00:06:48.280 --> 00:06:51.906
então através de uma combinação
de otimização de modelos,

00:06:52.360 --> 00:06:54.656
binarização de redes e aproximação,

00:06:54.680 --> 00:06:58.600
conseguimos fazer a deteção
de objetos rodar num telemóvel.

00:07:05.750 --> 00:07:08.780
(Aplausos)

00:07:10.960 --> 00:07:15.926
Estou realmente ansioso porque
agora temos uma solução muito poderosa

00:07:15.940 --> 00:07:18.636
para este problema de
visão computacional de baixo-nível,

00:07:18.690 --> 00:07:22.496
e todos podem tomá-lo
e fazer algo com ele.

00:07:22.720 --> 00:07:25.216
Agora o resto é com todos vocês

00:07:25.440 --> 00:07:28.376
e com as pessoas em todo o mundo
com acesso a este software.

00:07:28.400 --> 00:07:32.056
Não posso esperar para ver o que as
pessoas construirão com esta tecnologia.

00:07:32.160 --> 00:07:33.296
Obrigado.

00:07:33.320 --> 00:07:36.760
(Aplausos)

