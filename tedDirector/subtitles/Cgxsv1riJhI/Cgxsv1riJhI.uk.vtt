WEBVTT
Kind: captions
Language: uk

00:00:00.000 --> 00:00:07.000
Перекладач: Olena Gapak
Утверджено: Khrystyna Romashko

00:00:12.645 --> 00:00:13.796
Десять років тому

00:00:13.820 --> 00:00:16.596
дослідники комп'ютерного зору
вважали, що навчити комп'ютер

00:00:16.620 --> 00:00:19.316
визначити різницю
між котом і собакою —

00:00:19.340 --> 00:00:21.316
майже неможливо,

00:00:21.340 --> 00:00:25.036
навіть зі значним розвитком
в галузі штучного інтелекту.

00:00:25.060 --> 00:00:28.620
Зараз ми вміємо це робити
з точністю понад 99%.

00:00:29.500 --> 00:00:31.356
Це називається класифікація 
зображень —

00:00:31.380 --> 00:00:34.476
маючи зображення, 
назвати це зображення —

00:00:34.500 --> 00:00:37.540
і комп'ютери знають
тисячі таких категорій.

00:00:38.500 --> 00:00:41.396
Я аспірант
Університету Вашингтона,

00:00:41.420 --> 00:00:43.456
і я працюю над проектом
під назвою Даркнет,

00:00:43.456 --> 00:00:45.036
це фреймворк для нейронної сітки,

00:00:45.060 --> 00:00:47.876
який навчає і тестує
моделі комп'ютерного зору.

00:00:47.900 --> 00:00:50.876
Дізнаймося, що думає Даркнет

00:00:50.900 --> 00:00:52.660
про це наше зображення.

00:00:54.340 --> 00:00:56.676
Коли ми запускаємо класифікатор

00:00:56.700 --> 00:00:57.916
для цього зображення,

00:00:57.940 --> 00:01:00.476
ми отримуємо не просто прогноз 
щодо кішки чи собаки,

00:01:00.476 --> 00:01:02.756
насправді ми отримуємо
визначення породи.

00:01:02.780 --> 00:01:04.956
Ось такий рівень точності
ми маємо зараз.

00:01:04.980 --> 00:01:06.596
І це так.

00:01:06.620 --> 00:01:08.460
Мій собака насправді маламут.

00:01:08.860 --> 00:01:13.196
Тож ми досягли відчутного успіху
у класифікації зображень,

00:01:13.220 --> 00:01:15.370
але що станеться, якщо запустити
класифікатор

00:01:15.370 --> 00:01:17.204
на отакому зображенні?

00:01:18.900 --> 00:01:20.100
Ну...

00:01:24.460 --> 00:01:28.356
Ми бачимо, що він повертається
з дуже подібним передбаченням.

00:01:28.380 --> 00:01:31.476
І це правда, на зображенні
є маламут,

00:01:31.500 --> 00:01:35.196
але через саму цю назву
ми небагато дізналися про те,

00:01:35.220 --> 00:01:36.887
що саме відбувається на зображенні.

00:01:36.911 --> 00:01:38.471
Нам потрібно щось потужніше.

00:01:39.060 --> 00:01:41.676
І я працюю над проблемою
під назвою визначення об'єктів,

00:01:41.700 --> 00:01:44.636
ми дивимося на зображення
і намагаємося знайти усі об'єкти,

00:01:44.660 --> 00:01:46.116
визначивши їхні межі

00:01:46.140 --> 00:01:47.660
і підписавши, що це таке.

00:01:48.220 --> 00:01:51.500
Ось що трапиться, якщо запустити детектор
для цього зображення.

00:01:53.060 --> 00:01:55.316
З таким результатом ми можемо

00:01:55.340 --> 00:01:58.036
зробити більше з нашими алгоритмами 
комп'ютерного зору.

00:01:58.060 --> 00:02:01.036
Ми бачимо, що він знає, 
що це кіт і собака.

00:02:01.060 --> 00:02:03.316
Він знає їхні приблизні локації,

00:02:03.340 --> 00:02:04.556
їхній розмір.

00:02:04.580 --> 00:02:07.036
Він може навіть знати деяку 
додаткову інформацію.

00:02:07.036 --> 00:02:08.500
Ось там на фоні книжка.

00:02:09.100 --> 00:02:12.356
І якщо ви хочете побудувати систему
на основі комп'ютерного зору,

00:02:12.380 --> 00:02:15.836
наприклад, машину на автопілоті
чи роботизовану систему,

00:02:15.860 --> 00:02:18.316
ви потребуватимете
саме такої інформації.

00:02:18.340 --> 00:02:21.579
Ви хочете чогось, що дозволить
взаємодіяти з матеріальним світом.

00:02:22.399 --> 00:02:24.836
Коли я почав працювати над
визначенням об'єктітв,

00:02:24.860 --> 00:02:28.156
обробка зображення займала
20 секунд.

00:02:28.180 --> 00:02:32.060
І щоб зрозуміти, чому швидкість 
настільки важлива в цій галузі,

00:02:32.940 --> 00:02:35.476
ось приклад детектора об'єктів,

00:02:35.500 --> 00:02:37.916
що потребує 2 секунди
на обробку зображення.

00:02:37.940 --> 00:02:40.556
Тож він у десять разів швидший

00:02:40.580 --> 00:02:44.116
за той 20-секундний детектор,

00:02:44.140 --> 00:02:46.796
але видно, що коли він робить
свій прогноз,

00:02:46.820 --> 00:02:48.860
стан навколишнього світу
вже змінився.

00:02:49.700 --> 00:02:52.116
Тож це не дуже корисно

00:02:52.140 --> 00:02:53.556
для додатку.

00:02:53.580 --> 00:02:56.076
Якщо ми прискоримо це
ще вдесятеро,

00:02:56.100 --> 00:02:58.916
ось детектор, що працює
на швидкості 5 кадрів на секунду.

00:02:58.940 --> 00:03:00.476
Це набагато краще,

00:03:00.500 --> 00:03:02.476
але наприклад,

00:03:02.500 --> 00:03:04.796
якщо відбувається помітний рух,

00:03:04.820 --> 00:03:07.380
я б не хотів, щоб така система
керувала моєю автівкою.

00:03:08.940 --> 00:03:12.180
Це наша система визначення, 
що працює наживо на моєму лептопі.

00:03:12.820 --> 00:03:15.956
Вона послідовно визначає моє місце, 
поки я рухаюсь коло меж,

00:03:15.980 --> 00:03:19.700
і вона стійка до різноманітних
змін розміру,

00:03:21.260 --> 00:03:22.460
пози,

00:03:23.100 --> 00:03:24.956
руху вперед і назад.

00:03:24.980 --> 00:03:26.196
Це чудово.

00:03:26.220 --> 00:03:27.956
Саме це нам і потрібно,

00:03:27.980 --> 00:03:30.876
якщо ми хочемо будувати системи
на основі комп'ютерного зору.

00:03:30.900 --> 00:03:34.900
(Оплески)

00:03:36.100 --> 00:03:38.276
Тож лише за кілька років

00:03:38.300 --> 00:03:40.956
ми пройшли від 20 секунд 
на зображення

00:03:40.980 --> 00:03:44.516
до 20 мілісекунд на зображення, 
у тисячу разів швидше.

00:03:44.540 --> 00:03:45.956
Як ми цього досягли?

00:03:45.980 --> 00:03:48.996
У минулому система визначення об'єктів

00:03:49.020 --> 00:03:50.956
взяла б подібне зображення

00:03:50.980 --> 00:03:53.436
і поділила на безліч регіонів,

00:03:53.460 --> 00:03:56.716
а потім запустила б класифікатор
для кожного регіону,

00:03:56.740 --> 00:03:59.276
і високі бали для такого класифікатора

00:03:59.300 --> 00:04:02.436
вважалися б
за визначення зображення.

00:04:02.460 --> 00:04:06.516
Але це потребувало б запуску
класифікатора тисячі разів,

00:04:06.540 --> 00:04:09.460
тисячі перевірок нейронної мережі, 
щоб зробити визначення.

00:04:11.060 --> 00:04:15.596
Натомість ми натренували єдину мережу
робити усі визначення для нас.

00:04:15.620 --> 00:04:19.900
Вона створює усі рамки
й сортує ймовірності одночасно.

00:04:20.240 --> 00:04:23.800
З нашою системою, замість того 
щоб тисячі разів дивитися на зображення

00:04:23.800 --> 00:04:25.626
для визначення, 
ми дивимося один раз:

00:04:25.626 --> 00:04:26.756
"you only look once".

00:04:26.780 --> 00:04:29.720
і ми назвали наш метод 
визначення об'єктів YOLO.

00:04:31.180 --> 00:04:35.156
Тож з такою швидкістю
ми не обмежені зображеннями,

00:04:35.180 --> 00:04:37.596
ми можемо обробляти відео наживо.

00:04:37.620 --> 00:04:40.716
І тепер, замість того щоб бачити
тих кота і собаку,

00:04:40.740 --> 00:04:43.700
ми можемо бачити, як вони
рухаються і взаємодіють.

00:04:46.380 --> 00:04:48.436
Цей детектор ми тренували

00:04:48.460 --> 00:04:52.836
на 80 різних класах

00:04:52.860 --> 00:04:56.116
з набору даних Microsoft СОСО.

00:04:56.140 --> 00:04:59.476
Там були усі типи речей: 
ложка і виделка, миска,

00:04:59.500 --> 00:05:01.300
подібні звичні речі.

00:05:02.180 --> 00:05:05.276
Там була й безліч незвичніших речей:

00:05:05.300 --> 00:05:08.556
тварини, авто, зебри, жирафи.

00:05:08.580 --> 00:05:10.516
І зараз ми зробимо дещо цікаве.

00:05:10.540 --> 00:05:12.636
Ми просто підемо у залу

00:05:12.660 --> 00:05:14.676
і побачимо, які речі зможемо
визначити.

00:05:14.700 --> 00:05:16.320
Хтось хоче м'яку іграшку?

00:05:17.820 --> 00:05:19.582
Тут є іграшкові ведмеді.

00:05:21.860 --> 00:05:26.396
І ми можемо трошки знизити 
поріг розпізнавання,

00:05:26.420 --> 00:05:29.820
щоб знайти більше вас 
в аудиторії.

00:05:31.380 --> 00:05:33.716
Побачимо, чи ми визначаємо знаки "стоп".

00:05:33.740 --> 00:05:35.620
Ми знайшли наплечники.

00:05:37.700 --> 00:05:39.540
Тепер наблизьмо трошки.

00:05:42.140 --> 00:05:43.396
І це чудово.

00:05:43.420 --> 00:05:46.596
І уся обробка відбувається
в реальному часі

00:05:46.620 --> 00:05:47.820
на лептопі.

00:05:48.900 --> 00:05:50.356
І важливо пам'ятати,

00:05:50.380 --> 00:05:53.596
що це система визначення
загального призначення,

00:05:53.620 --> 00:05:58.620
тож ми можемо натренувати її
для будь-якого типу зображень.

00:06:00.140 --> 00:06:02.676
Той самий код, що використовується,

00:06:02.700 --> 00:06:05.156
щоб знаходити знаки "стоп", пішоходів,

00:06:05.180 --> 00:06:07.156
велосипеди для машини на автопілоті,

00:06:07.180 --> 00:06:10.036
можна використати, щоб знаходити
ракові клітини

00:06:10.060 --> 00:06:13.076
у біопсії тканини.

00:06:13.100 --> 00:06:17.140
І дослідники по всьому світу
вже використовують цю технологію,

00:06:18.060 --> 00:06:21.310
щоб розвивати медицину
чи робототехніку.

00:06:21.310 --> 00:06:22.876
Цього ранку я прочитав статтю

00:06:22.900 --> 00:06:27.476
про те, як підраховували тварин
в Національному парку Найробі,

00:06:27.500 --> 00:06:30.636
використовуючи YOLO 
як частину системи розпізнавання.

00:06:30.660 --> 00:06:33.756
А це тому, що Даркнет — проект з вікритим
кодом

00:06:33.780 --> 00:06:36.300
у публічному доступі, 
безкоштовний для використання.

00:06:37.420 --> 00:06:43.116
(Оплески)

00:06:43.140 --> 00:06:48.076
Але ми хочемо зробити визначення
навіть доступнішим і зручнішим,

00:06:48.100 --> 00:06:52.156
тож завдяки оптимізації,

00:06:52.180 --> 00:06:54.476
апроксимації та бінаризації мережі

00:06:54.500 --> 00:06:58.420
наше визначення зображень
працює на телефоні.

00:07:04.620 --> 00:07:09.940
(Оплески)

00:07:10.780 --> 00:07:15.836
І я дуже схвильований, бо
зараз у нас є досить потужне розв'язання

00:07:15.860 --> 00:07:18.156
для низькорівневого комп'ютерного зору,

00:07:18.180 --> 00:07:22.036
і кожен може взяти його
і щоб з цим побудувати.

00:07:22.060 --> 00:07:25.236
Тож решта залежить від вас усіх,

00:07:25.260 --> 00:07:28.196
від людей по всьому світу, 
які мають доступ до цієї програми,

00:07:28.220 --> 00:07:31.876
і я із нетерпінням чекаю на речі, 
які люди створять із цією технологією.

00:07:31.900 --> 00:07:33.116
Дякую.

00:07:33.140 --> 00:07:36.580
(Оплески)

