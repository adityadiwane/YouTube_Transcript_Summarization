WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:07.000
翻訳: Yasushi Aoki
校正: Claire Ghyselen

00:00:12.645 --> 00:00:13.630
10年前

00:00:13.630 --> 00:00:15.400
コンピュータービジョンの研究者は

00:00:15.400 --> 00:00:18.530
コンピューターで
犬と猫を見分けるのは

00:00:18.530 --> 00:00:21.316
ほとんど無理だと
考えていました

00:00:21.340 --> 00:00:25.036
人工知能の大きな
発展にもかかわらずです

00:00:25.060 --> 00:00:28.750
現在では99%以上の精度で
見分けられるようになっています

00:00:29.500 --> 00:00:31.356
これは「画像分類」と
呼ばれる問題で

00:00:31.380 --> 00:00:34.476
コンピューターに画像の
ラベル付けをさせるものです

00:00:34.500 --> 00:00:38.130
コンピューターは何千種もの物を
識別できるようになっています

00:00:38.500 --> 00:00:41.170
私はワシントン大学の大学院生で

00:00:41.170 --> 00:00:43.356
Darknetというプロジェクトに
取り組んでいます

00:00:43.356 --> 00:00:46.216
コンピュータービジョンのモデルを
トレーニングしテストするための

00:00:46.216 --> 00:00:47.960
ニューラルネット・フレームワークです

00:00:47.960 --> 00:00:49.940
Darknetが
あの犬の画像を

00:00:49.940 --> 00:00:52.750
何だと思うか
見てみましょう

00:00:54.250 --> 00:00:55.380
あの画像を

00:00:55.380 --> 00:00:57.916
私たちの画像分類
プログラムにかけると

00:00:57.940 --> 00:01:00.396
犬か猫かだけでなく

00:01:00.420 --> 00:01:02.756
具体的な犬種まで
言い当てます

00:01:02.780 --> 00:01:04.900
そこまで細かいことが
分かるようになっています

00:01:04.900 --> 00:01:06.636
そして正しい答えを出しています
[マラミュート犬 37% ハスキー犬 15% エスキモー犬 12%]

00:01:06.636 --> 00:01:08.850
私の犬は確かにマラミュート犬です
[マラミュート犬 37% ハスキー犬 15% エスキモー犬 12%]

00:01:08.860 --> 00:01:13.010
画像分類は驚くほど
進歩しましたが

00:01:13.010 --> 00:01:15.820
こういう複数の物が写った写真を
画像分類にかけたら

00:01:15.820 --> 00:01:17.364
どうなるのでしょう？

00:01:18.900 --> 00:01:20.100
結果は—

00:01:24.460 --> 00:01:28.276
前とほぼ同じになっています
[マラミュート犬 7% エスキモー犬 6% ハスキー犬 6%]

00:01:28.276 --> 00:01:31.476
それは正しくて 画像の中には
確かにマラミュート犬がいますが

00:01:31.500 --> 00:01:33.120
そのラベルだけでは

00:01:33.120 --> 00:01:36.917
この画像の中で どんなことが
起きているのか あまりわかりません

00:01:36.917 --> 00:01:38.900
もっと強力なものが
ほしいところです

00:01:38.900 --> 00:01:41.816
私は「物体検出」と呼ばれる
問題に取り組んでいて

00:01:41.816 --> 00:01:44.490
それは画像を見て
その中にある物体をすべて検出し

00:01:44.490 --> 00:01:46.226
それぞれの物を箱で囲って

00:01:46.226 --> 00:01:48.120
それが何か識別する
という問題です

00:01:48.120 --> 00:01:52.120
この画像を物体検出プログラムにかけると
どうなるか見てみましょう

00:01:53.060 --> 00:01:55.436
得られる結果は
こういうもので

00:01:55.436 --> 00:01:58.036
色んなことができます

00:01:58.060 --> 00:02:01.036
猫と犬がいることがわかり

00:02:01.060 --> 00:02:03.270
相対的な位置や

00:02:03.270 --> 00:02:04.556
大きさもわかります

00:02:04.580 --> 00:02:06.420
おまけの情報もあります

00:02:06.420 --> 00:02:08.500
向こうに本があるとか

00:02:09.100 --> 00:02:12.356
コンピュータービジョンを
使ったシステム

00:02:12.380 --> 00:02:15.836
自動運転車や ロボットを
作ろうとするなら

00:02:15.860 --> 00:02:18.316
これはまさに
欲しい情報でしょう

00:02:18.340 --> 00:02:22.258
周りの世界と作用し合えるように
してくれるものが欲しいのです

00:02:22.578 --> 00:02:24.836
私が物体検出に
取り組み始めた頃は

00:02:24.860 --> 00:02:28.156
１つの画像の処理に
20秒かかっていました

00:02:28.180 --> 00:02:32.310
この領域で なぜスピードが重要なのか
分かってもらうため

00:02:32.940 --> 00:02:36.326
物体検出で画像の処理に
２秒かかると どんな具合か

00:02:36.326 --> 00:02:37.916
見ていただきましょう

00:02:37.940 --> 00:02:41.506
これは画像１つにつき20秒かかる
画像検出プログラムより

00:02:41.506 --> 00:02:44.116
10倍速いわけですが

00:02:44.140 --> 00:02:46.796
プログラムが答えを
出したときには

00:02:46.820 --> 00:02:49.390
状況は既に変わっているため

00:02:49.700 --> 00:02:52.116
あまりアプリケーションの役には

00:02:52.140 --> 00:02:53.556
立ちません

00:02:53.580 --> 00:02:56.076
さらに10倍
高速化してみましょう

00:02:56.100 --> 00:02:58.880
毎秒 5フレーム
処理しています

00:02:58.880 --> 00:03:00.656
だいぶマシにはなりましたが

00:03:00.656 --> 00:03:03.086
何か大きな動きがあると

00:03:03.086 --> 00:03:04.796
ズレが出ます

00:03:04.820 --> 00:03:08.120
このようなシステムに
自分の車を運転して欲しくはありません

00:03:08.940 --> 00:03:12.790
これは私たちの物体検出システムで 
ノートPC上でリアルタイムで動いています

00:03:12.820 --> 00:03:15.956
私が動き回っても
スムーズに追尾します

00:03:15.980 --> 00:03:19.940
様々な種類の変化にも対応できます
大きさとか

00:03:21.260 --> 00:03:22.460
ポーズとか

00:03:23.100 --> 00:03:24.956
前向き 後ろ向き

00:03:24.980 --> 00:03:26.080
とてもいいです

00:03:26.080 --> 00:03:29.366
これこそコンピュータービジョンを
使ったシステムを作ろうというときに

00:03:29.366 --> 00:03:30.876
欲しいものです

00:03:30.900 --> 00:03:34.900
(拍手)

00:03:36.100 --> 00:03:38.010
ほんの数年で

00:03:38.010 --> 00:03:42.216
１画像あたり20秒から
20ミリ秒へと

00:03:42.216 --> 00:03:44.516
1000倍 高速化しました

00:03:44.540 --> 00:03:45.956
どうやって実現したのか？

00:03:45.980 --> 00:03:48.996
以前の物体検出システムは

00:03:49.020 --> 00:03:50.956
このような画像を受け取ると

00:03:50.980 --> 00:03:53.436
沢山の領域に分割し

00:03:53.460 --> 00:03:56.716
それぞれの領域を
分類プログラムにかけ

00:03:56.740 --> 00:03:59.276
高いスコアが出たところに

00:03:59.300 --> 00:04:02.436
物体が検出されたと
見なしていました

00:04:02.460 --> 00:04:06.516
この方法だと１つの画像に対し
分類プログラムを何千回も走らせ

00:04:06.540 --> 00:04:10.140
ニューラルネットによる評価が
何千回も必要になります

00:04:11.060 --> 00:04:15.596
そうする代わりに １つのニューラルネットで
すべての検出を行うようトレーニングしました

00:04:15.620 --> 00:04:20.470
境界の箱や 分類の確からしさの確率を
すべて同時に生成するのです

00:04:20.470 --> 00:04:23.080
我々のシステムでは 
物体検出を行うために

00:04:23.080 --> 00:04:25.230
画像を何千回も見る代わりに

00:04:25.230 --> 00:04:26.756
たった一度しか見ないのです

00:04:26.780 --> 00:04:29.700
それがYOLO (You Only Look Once)の
名の所以です

00:04:31.180 --> 00:04:35.156
これだけ速いと 画像だけでなく

00:04:35.180 --> 00:04:37.596
映像もリアルタイムで処理できます

00:04:37.620 --> 00:04:40.716
猫と犬を検出するだけでなく

00:04:40.740 --> 00:04:44.260
それぞれが動き回り 
相手に反応しているのが分かります

00:04:46.380 --> 00:04:48.110
この検出プログラムは

00:04:48.110 --> 00:04:53.106
MicrosoftのCOCOデータセットにある
80種の物に対して

00:04:53.106 --> 00:04:56.116
トレーニングしてあります

00:04:56.140 --> 00:04:59.250
スプーンやフォークといった

00:04:59.250 --> 00:05:01.500
日常的な物もあれば

00:05:02.180 --> 00:05:05.276
もっと変わった物もあります

00:05:05.300 --> 00:05:08.470
動物 車 シマウマ キリン

00:05:08.470 --> 00:05:10.516
ちょっと面白いことをやりましょう

00:05:10.540 --> 00:05:13.216
客席からどんなものが
検出できるか

00:05:13.216 --> 00:05:14.440
試してみます

00:05:14.440 --> 00:05:16.460
ぬいぐるみの動物が欲しい人？

00:05:17.820 --> 00:05:20.002
そこかしこに
テディベアがあります

00:05:21.860 --> 00:05:26.396
検出器の閾値を少し下げて

00:05:26.420 --> 00:05:30.090
客席の皆さんを
検出できるようにしましょう

00:05:31.380 --> 00:05:33.866
「一時停止」の標識を
検出できるでしょうか

00:05:33.866 --> 00:05:35.980
バックパックが
いくつかありますね

00:05:37.700 --> 00:05:39.540
もう少しズームしましょう

00:05:42.140 --> 00:05:43.310
素晴らしいです

00:05:43.310 --> 00:05:45.270
すべての処理が
ノートPC上で

00:05:45.270 --> 00:05:47.960
リアルタイムで
実行されています

00:05:48.900 --> 00:05:50.310
重要なのはこれが

00:05:50.310 --> 00:05:53.596
汎用物体検出システム
だということで

00:05:53.620 --> 00:05:58.770
どのような領域の画像に対しても
トレーニングできます

00:06:00.140 --> 00:06:01.510
自動運転車が

00:06:01.510 --> 00:06:05.606
一時停止の標識や歩行者や
自転車を検知するのに使うのと

00:06:05.606 --> 00:06:07.156
同じプログラムを

00:06:07.180 --> 00:06:11.026
組織生検でガンを
見つけるためにも

00:06:11.026 --> 00:06:12.960
使えるのです

00:06:12.960 --> 00:06:17.140
すでに世界中の研究者達が
この技術を使って

00:06:18.060 --> 00:06:21.476
医学やロボット工学を
前進させています

00:06:21.500 --> 00:06:23.226
今朝 新聞で読んだんですが

00:06:23.226 --> 00:06:27.476
ナイロビ国立公園では
YOLOを検出システムとして使って

00:06:27.500 --> 00:06:30.636
動物の個体数調査を
しているそうです

00:06:30.660 --> 00:06:34.716
それというのもDarknetはオープンソースで
パブリックドメインなため

00:06:34.716 --> 00:06:37.050
誰でも無料で使えるからです

00:06:37.420 --> 00:06:43.116
(拍手)

00:06:43.140 --> 00:06:48.076
私たちは物体検出技術をさらに近づきやすく
使いやすいものにしたいと思い

00:06:48.100 --> 00:06:52.156
モデルの最適化や
ネットワーク・バイナリぜーション

00:06:52.180 --> 00:06:54.476
近似を組み合わせることで

00:06:54.500 --> 00:06:58.420
スマートフォン上で
動かせるようにしました

00:07:04.620 --> 00:07:09.940
(拍手)

00:07:10.780 --> 00:07:12.980
私はすごくワクワクしています

00:07:12.980 --> 00:07:18.156
いまやこの基本的なコンピュータービジョンの
問題に対して とても強力な解があり

00:07:18.180 --> 00:07:22.036
誰でもそれを使って
何か作り出すことができるんです

00:07:22.060 --> 00:07:23.660
あとは皆さんや

00:07:23.660 --> 00:07:28.196
このソフトウェアを使える
世界中の人々にかかっています

00:07:28.220 --> 00:07:31.876
この技術を使ってみんなが
どんなものを作ってくれるか楽しみです

00:07:31.900 --> 00:07:33.116
ありがとうございました

00:07:33.140 --> 00:07:36.580
(拍手)

