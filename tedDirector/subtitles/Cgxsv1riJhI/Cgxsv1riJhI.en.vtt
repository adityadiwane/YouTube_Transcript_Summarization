WEBVTT
Kind: captions
Language: en

00:00:12.645 --> 00:00:13.796
Ten years ago,

00:00:13.820 --> 00:00:16.596
computer vision researchers
thought that getting a computer

00:00:16.620 --> 00:00:19.316
to tell the difference
between a cat and a dog

00:00:19.340 --> 00:00:21.316
would be almost impossible,

00:00:21.340 --> 00:00:25.036
even with the significant advance
in the state of artificial intelligence.

00:00:25.060 --> 00:00:28.620
Now we can do it at a level
greater than 99 percent accuracy.

00:00:29.500 --> 00:00:31.356
This is called image classification --

00:00:31.380 --> 00:00:34.476
give it an image,
put a label to that image --

00:00:34.500 --> 00:00:37.540
and computers know
thousands of other categories as well.

00:00:38.500 --> 00:00:41.396
I'm a graduate student
at the University of Washington,

00:00:41.420 --> 00:00:43.316
and I work on a project called Darknet,

00:00:43.340 --> 00:00:45.036
which is a neural network framework

00:00:45.060 --> 00:00:47.876
for training and testing
computer vision models.

00:00:47.900 --> 00:00:50.876
So let's just see what Darknet thinks

00:00:50.900 --> 00:00:52.660
of this image that we have.

00:00:54.340 --> 00:00:56.676
When we run our classifier

00:00:56.700 --> 00:00:57.916
on this image,

00:00:57.940 --> 00:01:00.396
we see we don't just get
a prediction of dog or cat,

00:01:00.420 --> 00:01:02.756
we actually get
specific breed predictions.

00:01:02.780 --> 00:01:04.956
That's the level
of granularity we have now.

00:01:04.980 --> 00:01:06.596
And it's correct.

00:01:06.620 --> 00:01:08.460
My dog is in fact a malamute.

00:01:08.860 --> 00:01:13.196
So we've made amazing strides
in image classification,

00:01:13.220 --> 00:01:15.220
but what happens
when we run our classifier

00:01:15.244 --> 00:01:17.204
on an image that looks like this?

00:01:18.900 --> 00:01:20.100
Well ...

00:01:24.460 --> 00:01:28.356
We see that the classifier comes back
with a pretty similar prediction.

00:01:28.380 --> 00:01:31.476
And it's correct,
there is a malamute in the image,

00:01:31.500 --> 00:01:35.196
but just given this label,
we don't actually know that much

00:01:35.220 --> 00:01:36.887
about what's going on in the image.

00:01:36.911 --> 00:01:38.471
We need something more powerful.

00:01:39.060 --> 00:01:41.676
I work on a problem
called object detection,

00:01:41.700 --> 00:01:44.636
where we look at an image
and try to find all of the objects,

00:01:44.660 --> 00:01:46.116
put bounding boxes around them

00:01:46.140 --> 00:01:47.660
and say what those objects are.

00:01:48.220 --> 00:01:51.500
So here's what happens
when we run a detector on this image.

00:01:53.060 --> 00:01:55.316
Now, with this kind of result,

00:01:55.340 --> 00:01:58.036
we can do a lot more
with our computer vision algorithms.

00:01:58.060 --> 00:02:01.036
We see that it knows
that there's a cat and a dog.

00:02:01.060 --> 00:02:03.316
It knows their relative locations,

00:02:03.340 --> 00:02:04.556
their size.

00:02:04.580 --> 00:02:06.516
It may even know some extra information.

00:02:06.540 --> 00:02:08.500
There's a book sitting in the background.

00:02:09.100 --> 00:02:12.356
And if you want to build a system
on top of computer vision,

00:02:12.380 --> 00:02:15.836
say a self-driving vehicle
or a robotic system,

00:02:15.860 --> 00:02:18.316
this is the kind
of information that you want.

00:02:18.340 --> 00:02:21.579
You want something so that
you can interact with the physical world.

00:02:22.579 --> 00:02:24.836
Now, when I started working
on object detection,

00:02:24.860 --> 00:02:28.156
it took 20 seconds
to process a single image.

00:02:28.180 --> 00:02:32.060
And to get a feel for why
speed is so important in this domain,

00:02:32.940 --> 00:02:35.476
here's an example of an object detector

00:02:35.500 --> 00:02:37.916
that takes two seconds
to process an image.

00:02:37.940 --> 00:02:40.556
So this is 10 times faster

00:02:40.580 --> 00:02:44.116
than the 20-seconds-per-image detector,

00:02:44.140 --> 00:02:46.796
and you can see that by the time
it makes predictions,

00:02:46.820 --> 00:02:48.860
the entire state of the world has changed,

00:02:49.700 --> 00:02:52.116
and this wouldn't be very useful

00:02:52.140 --> 00:02:53.556
for an application.

00:02:53.580 --> 00:02:56.076
If we speed this up
by another factor of 10,

00:02:56.100 --> 00:02:58.916
this is a detector running
at five frames per second.

00:02:58.940 --> 00:03:00.476
This is a lot better,

00:03:00.500 --> 00:03:02.476
but for example,

00:03:02.500 --> 00:03:04.796
if there's any significant movement,

00:03:04.820 --> 00:03:07.380
I wouldn't want a system
like this driving my car.

00:03:08.940 --> 00:03:12.180
This is our detection system
running in real time on my laptop.

00:03:12.820 --> 00:03:15.956
So it smoothly tracks me
as I move around the frame,

00:03:15.980 --> 00:03:19.700
and it's robust to a wide variety
of changes in size,

00:03:21.260 --> 00:03:22.460
pose,

00:03:23.100 --> 00:03:24.956
forward, backward.

00:03:24.980 --> 00:03:26.196
This is great.

00:03:26.220 --> 00:03:27.956
This is what we really need

00:03:27.980 --> 00:03:30.876
if we're going to build systems
on top of computer vision.

00:03:30.900 --> 00:03:34.900
(Applause)

00:03:36.100 --> 00:03:38.276
So in just a few years,

00:03:38.300 --> 00:03:40.956
we've gone from 20 seconds per image

00:03:40.980 --> 00:03:44.516
to 20 milliseconds per image,
a thousand times faster.

00:03:44.540 --> 00:03:45.956
How did we get there?

00:03:45.980 --> 00:03:48.996
Well, in the past,
object detection systems

00:03:49.020 --> 00:03:50.956
would take an image like this

00:03:50.980 --> 00:03:53.436
and split it into a bunch of regions

00:03:53.460 --> 00:03:56.716
and then run a classifier
on each of these regions,

00:03:56.740 --> 00:03:59.276
and high scores for that classifier

00:03:59.300 --> 00:04:02.436
would be considered
detections in the image.

00:04:02.460 --> 00:04:06.516
But this involved running a classifier
thousands of times over an image,

00:04:06.540 --> 00:04:09.460
thousands of neural network evaluations
to produce detection.

00:04:11.060 --> 00:04:15.596
Instead, we trained a single network
to do all of detection for us.

00:04:15.620 --> 00:04:19.900
It produces all of the bounding boxes
and class probabilities simultaneously.

00:04:20.500 --> 00:04:23.996
With our system, instead of looking
at an image thousands of times

00:04:24.020 --> 00:04:25.476
to produce detection,

00:04:25.500 --> 00:04:26.756
you only look once,

00:04:26.780 --> 00:04:29.700
and that's why we call it
the YOLO method of object detection.

00:04:31.180 --> 00:04:35.156
So with this speed,
we're not just limited to images;

00:04:35.180 --> 00:04:37.596
we can process video in real time.

00:04:37.620 --> 00:04:40.716
And now, instead of just seeing
that cat and dog,

00:04:40.740 --> 00:04:43.700
we can see them move around
and interact with each other.

00:04:46.380 --> 00:04:48.436
This is a detector that we trained

00:04:48.460 --> 00:04:52.836
on 80 different classes

00:04:52.860 --> 00:04:56.116
in Microsoft's COCO dataset.

00:04:56.140 --> 00:04:59.476
It has all sorts of things
like spoon and fork, bowl,

00:04:59.500 --> 00:05:01.300
common objects like that.

00:05:02.180 --> 00:05:05.276
It has a variety of more exotic things:

00:05:05.300 --> 00:05:08.556
animals, cars, zebras, giraffes.

00:05:08.580 --> 00:05:10.516
And now we're going to do something fun.

00:05:10.540 --> 00:05:12.636
We're just going to go
out into the audience

00:05:12.660 --> 00:05:14.676
and see what kind of things we can detect.

00:05:14.700 --> 00:05:16.320
Does anyone want a stuffed animal?

00:05:17.820 --> 00:05:19.582
There are some teddy bears out there.

00:05:21.860 --> 00:05:26.396
And we can turn down
our threshold for detection a little bit,

00:05:26.420 --> 00:05:29.820
so we can find more of you guys
out in the audience.

00:05:31.380 --> 00:05:33.716
Let's see if we can get these stop signs.

00:05:33.740 --> 00:05:35.620
We find some backpacks.

00:05:37.700 --> 00:05:39.540
Let's just zoom in a little bit.

00:05:42.140 --> 00:05:43.396
And this is great.

00:05:43.420 --> 00:05:46.596
And all of the processing
is happening in real time

00:05:46.620 --> 00:05:47.820
on the laptop.

00:05:48.900 --> 00:05:50.356
And it's important to remember

00:05:50.380 --> 00:05:53.596
that this is a general purpose
object detection system,

00:05:53.620 --> 00:05:58.620
so we can train this for any image domain.

00:06:00.140 --> 00:06:02.676
The same code that we use

00:06:02.700 --> 00:06:05.156
to find stop signs or pedestrians,

00:06:05.180 --> 00:06:07.156
bicycles in a self-driving vehicle,

00:06:07.180 --> 00:06:10.036
can be used to find cancer cells

00:06:10.060 --> 00:06:13.076
in a tissue biopsy.

00:06:13.100 --> 00:06:17.140
And there are researchers around the globe
already using this technology

00:06:18.060 --> 00:06:21.476
for advances in things
like medicine, robotics.

00:06:21.500 --> 00:06:22.876
This morning, I read a paper

00:06:22.900 --> 00:06:27.476
where they were taking a census
of animals in Nairobi National Park

00:06:27.500 --> 00:06:30.636
with YOLO as part
of this detection system.

00:06:30.660 --> 00:06:33.756
And that's because Darknet is open source

00:06:33.780 --> 00:06:36.300
and in the public domain,
free for anyone to use.

00:06:37.420 --> 00:06:43.116
(Applause)

00:06:43.140 --> 00:06:48.076
But we wanted to make detection
even more accessible and usable,

00:06:48.100 --> 00:06:52.156
so through a combination
of model optimization,

00:06:52.180 --> 00:06:54.476
network binarization and approximation,

00:06:54.500 --> 00:06:58.420
we actually have object detection
running on a phone.

00:07:04.620 --> 00:07:09.940
(Applause)

00:07:10.780 --> 00:07:15.836
And I'm really excited because
now we have a pretty powerful solution

00:07:15.860 --> 00:07:18.156
to this low-level computer vision problem,

00:07:18.180 --> 00:07:22.036
and anyone can take it
and build something with it.

00:07:22.060 --> 00:07:25.236
So now the rest is up to all of you

00:07:25.260 --> 00:07:28.196
and people around the world
with access to this software,

00:07:28.220 --> 00:07:31.876
and I can't wait to see what people
will build with this technology.

00:07:31.900 --> 00:07:33.116
Thank you.

00:07:33.140 --> 00:07:36.580
(Applause)

