WEBVTT
Kind: captions
Language: hu

00:00:00.000 --> 00:00:07.000
Fordító: Andi Vida
Lektor: Tímea Hegyessy

00:00:12.825 --> 00:00:13.976
Tíz évvel ezelőtt még

00:00:14.000 --> 00:00:16.040
a számítógépes látás kutatói
nem hitték,

00:00:16.040 --> 00:00:18.120
hogy lehetséges
rábírni egy számítógépet,

00:00:18.120 --> 00:00:21.496
hogy megkülönböztessen
egy kutyát egy macskától,

00:00:21.520 --> 00:00:25.216
még a mesterséges intelligencia
jelentős előrehaladásával sem.

00:00:25.240 --> 00:00:28.800
Ma csaknem 100%-os pontossággal
képesek vagyunk erre.

00:00:29.680 --> 00:00:31.536
Ezt hívják képosztályozásnak.

00:00:31.560 --> 00:00:34.656
Vegyünk egy képet, címkézzük fel,

00:00:34.680 --> 00:00:37.720
és a számítógép több ezer
más kategóriát is felismer.

00:00:38.680 --> 00:00:41.576
A washingtoni egyetem
végzős hallgatója vagyok,

00:00:41.600 --> 00:00:43.496
és az ún. Darknet programon dolgozom,

00:00:43.520 --> 00:00:45.216
neurális hálózatok keretrendszerén.

00:00:45.240 --> 00:00:48.056
Számítógépes látómodellek
fejlesztése és tesztelése a célom.

00:00:48.080 --> 00:00:51.056
Nézzük hát, mit gondol a Darknet

00:00:51.080 --> 00:00:52.840
a kutyás képről.

00:00:54.520 --> 00:00:56.856
Amikor lefuttatjuk osztályozónkat

00:00:56.880 --> 00:00:58.096
erre a képre,

00:00:58.120 --> 00:01:00.576
látjuk, nemcsak kutya vagy macska
előképét kapjuk,

00:01:00.600 --> 00:01:02.936
hanem a fajtát is előre meghatározza.

00:01:02.960 --> 00:01:05.136
Ez a granularitás [szemcsézettség] foka.

00:01:05.160 --> 00:01:06.776
És helyes!

00:01:06.800 --> 00:01:08.640
A kutyám alaszkai malamut.

00:01:09.040 --> 00:01:13.376
Tehát izgalmas lépéseket tettünk meg
a képosztályozás terén,

00:01:13.400 --> 00:01:15.400
de mi van, ha egy ilyen képre

00:01:15.424 --> 00:01:17.384
futtatjuk le osztályozónkat?

00:01:19.080 --> 00:01:20.280
Nos...

00:01:24.640 --> 00:01:28.536
Eléggé hasonló meghatározást
ad meg az osztályozónk.

00:01:28.560 --> 00:01:31.656
Ez is helyes:
malamut van a képen,

00:01:31.680 --> 00:01:35.376
de csak a címkét véve alapul
nem sokat tudunk meg arról,

00:01:35.400 --> 00:01:37.067
hogy mi zajlik a képen.

00:01:37.091 --> 00:01:38.651
Valami hatékonyabb kell nekünk.

00:01:39.240 --> 00:01:41.856
Én az úgynevezett tárgyfelismerés
problémáján dolgozom,

00:01:41.880 --> 00:01:44.816
ránézünk egy képre, igyekszünk
minden tárgyat beazonosítani,

00:01:44.840 --> 00:01:46.296
határolókeretet vonva köréjük,

00:01:46.320 --> 00:01:47.840
és pontosan megnevezni őket.

00:01:48.400 --> 00:01:51.680
Nézzük, mi történik,
ha lefuttatunk egy felismerő programot.

00:01:53.100 --> 00:01:55.340
Ha ilyesmi eredmény születik,

00:01:55.410 --> 00:01:58.216
sokkal többre megyünk számítógépes
látó algoritmusainkkal.

00:01:58.240 --> 00:02:01.216
Látjuk, hogy felismeri, hogy ott
egy macska és egy kutya.

00:02:01.240 --> 00:02:03.496
Felismeri egymáshoz
viszonyított helyzetüket,

00:02:03.520 --> 00:02:04.736
méretüket.

00:02:04.760 --> 00:02:06.696
Esetleg még egyéb információt is nyújt.

00:02:06.720 --> 00:02:08.680
A háttérben hever egy könyv.

00:02:09.280 --> 00:02:12.536
És ha számítógépes látáson alapuló
rendszert akarunk építeni,

00:02:12.560 --> 00:02:16.016
mondjuk, legyen egy önjáró jármű,
vagy robotrendszer,

00:02:16.040 --> 00:02:18.496
ilyen információra van szükségünk.

00:02:18.520 --> 00:02:21.759
Valami olyan kéne, ami kölcsönhatásban áll
fizikai valóságunkkal.

00:02:22.759 --> 00:02:25.016
Amikor elkezdtem ezzel foglalkozni,

00:02:25.040 --> 00:02:28.336
húsz másodpercbe telt
egyetlen kép feldolgozása.

00:02:28.360 --> 00:02:32.240
Hogy érezzék, miért olyan fontos
a sebesség ezen a területen,

00:02:33.120 --> 00:02:35.656
itt egy példa egy tárgyfelismerőre,

00:02:35.680 --> 00:02:38.096
ami két másodperc alatt
dolgoz fel egy képet.

00:02:38.120 --> 00:02:40.736
Tízszer gyorsabb tehát,

00:02:40.760 --> 00:02:44.296
mint a 20 mp/kép sebességű érzékelő,

00:02:44.320 --> 00:02:46.976
és láthatják, ennyi idő alatt
előrejelzéseket végez.

00:02:47.000 --> 00:02:49.040
A világ teljesen megváltozott,

00:02:49.880 --> 00:02:52.296
és ez nem lenne túl hasznos

00:02:52.320 --> 00:02:53.736
egy alkalmazáshoz.

00:02:53.760 --> 00:02:56.256
Ha ezt még tízszeresére gyorsítjuk -

00:02:56.280 --> 00:02:59.096
ez a képfelismerő öt képkockát
tud másodpercenként.

00:02:59.120 --> 00:03:00.656
Ez sokkal jobb,

00:03:00.680 --> 00:03:02.656
de ha például

00:03:02.680 --> 00:03:04.976
bármilyen jelentős esemény történik,

00:03:05.000 --> 00:03:07.560
nem szeretném, ha efféle
rendszer vezetné az autómat.

00:03:09.120 --> 00:03:12.360
Ez a felismerő rendszerünk
valós időben fut a laptopomon.

00:03:13.000 --> 00:03:16.136
Simán követ engem a kerettel,
ahogy itt sétálgatok,

00:03:16.160 --> 00:03:19.880
és pontosan meghatározza
a méretváltozásomat,

00:03:21.440 --> 00:03:22.640
testtartásomat,

00:03:23.280 --> 00:03:25.136
előre- és hátramozgásomat.

00:03:25.160 --> 00:03:26.376
Ez óriási.

00:03:26.400 --> 00:03:28.136
Pontosan erre van szükségünk,

00:03:28.160 --> 00:03:31.056
ha rendszereket akarunk építeni
a számítógépes látásra.

00:03:31.080 --> 00:03:35.080
(Taps)

00:03:36.280 --> 00:03:38.456
Alig néhány éven belül tehát

00:03:38.480 --> 00:03:41.136
eljutottunk a 20 mp/kép sebességtől

00:03:41.160 --> 00:03:44.696
a 20 milliszekundum/képig,
ezerszeres sebességig.

00:03:44.720 --> 00:03:46.136
Hogy jutottunk el idáig?

00:03:46.160 --> 00:03:49.176
Nos, régen a tárgyfelismerő rendszerek

00:03:49.200 --> 00:03:51.136
fogtak egy efféle képet,

00:03:51.160 --> 00:03:53.616
régiócsoportokra osztották,

00:03:53.640 --> 00:03:56.896
aztán minden egyes régióra
lefuttattak egy osztályozót,

00:03:56.920 --> 00:03:59.456
és ezek magas értékei

00:03:59.480 --> 00:04:02.616
határozták meg a kép felismerését.

00:04:02.640 --> 00:04:06.696
De ehhez több ezerszer le kellett futtatni
az osztályozót egy képen,

00:04:06.720 --> 00:04:09.880
neurális hálózati kiértékelések ezrei
vezettek a felismeréshez.

00:04:10.840 --> 00:04:15.776
Ehelyett mi egyetlen hálózatra
bíztuk az egész felismerő tevékenységet.

00:04:15.800 --> 00:04:20.320
Egyszerre kezeli a terület-meghatározást
és az osztályozást.

00:04:20.680 --> 00:04:24.176
A mi rendszerünkben nem kell
több ezerszer végignézni egy képet

00:04:24.200 --> 00:04:25.656
a felismerés lefuttatásához,

00:04:25.680 --> 00:04:27.836
"Elég Egyszer Megnézni"
[You Only Look Once],

00:04:27.836 --> 00:04:30.080
ezért hívjuk a tárgyfelismerés
YOLO-módszerének.

00:04:31.360 --> 00:04:35.336
Ezzel a sebességgel
nemcsak képeket vizsgálhatunk,

00:04:35.360 --> 00:04:37.776
hanem valós időben videót is.

00:04:37.800 --> 00:04:40.896
Most pedig ne csak a kutyát
és a macskát nézzük,

00:04:40.920 --> 00:04:43.880
hanem ahogy forognak egymás körül,
és kapcsolatot teremtenek.

00:04:46.560 --> 00:04:48.616
Ez olyan detektor,

00:04:48.640 --> 00:04:53.016
amit 80 különféle osztályra képeztünk ki

00:04:53.040 --> 00:04:56.296
a Microsoft COCO adatbázisában.

00:04:56.320 --> 00:04:59.656
Mindenféle dolgokat tartalmaz:
kanalat, villát, tálat,

00:04:59.680 --> 00:05:01.480
efféle egyszerű tárgyakat.

00:05:02.360 --> 00:05:05.456
Különlegesebbeket is:

00:05:05.480 --> 00:05:08.736
állatokat, autót, zebrát, zsiráfot.

00:05:08.760 --> 00:05:10.696
Most pedig valami érdekeset teszünk.

00:05:10.720 --> 00:05:12.816
Kimegyünk a közönség soraiba,
és szétnézünk,

00:05:12.840 --> 00:05:14.856
miket találunk.

00:05:14.880 --> 00:05:16.500
Kér valaki kitömött állatot?

00:05:18.000 --> 00:05:19.762
Van néhány plüssmackó itt-ott.

00:05:22.040 --> 00:05:26.576
Kicsit lejjebb vesszük
a felismerési küszöb értékét,

00:05:26.600 --> 00:05:30.000
így könnyebben megtaláljuk
a megfelelő fickókat.

00:05:31.560 --> 00:05:33.896
Nézzük csak a stoptáblákat.

00:05:33.920 --> 00:05:35.800
Rábukkanunk néhány hátizsákra.

00:05:37.880 --> 00:05:39.720
Nagyítsunk csak rá egy kicsit.

00:05:42.320 --> 00:05:43.576
Ez bizony óriási.

00:05:43.600 --> 00:05:46.776
És az egész folyamat valós időben zajlik

00:05:46.800 --> 00:05:48.000
a laptopomon.

00:05:49.080 --> 00:05:50.536
Fontos újra hangsúlyozni,

00:05:50.560 --> 00:05:53.776
hogy ez egy általános célú
tárgyfelismerő rendszer,

00:05:53.800 --> 00:05:58.800
így bármilyen képfajtára alkalmazható.

00:06:00.320 --> 00:06:02.856
Ugyanaz a kód,

00:06:02.880 --> 00:06:05.336
amivel stoptáblát, gyalogost, kerékpárost

00:06:05.360 --> 00:06:07.336
ismerünk fel az önjáró autóban,

00:06:07.360 --> 00:06:10.216
ráksejt feltárására is alkalmazható

00:06:10.240 --> 00:06:13.256
szövettani vizsgálatnál.

00:06:13.280 --> 00:06:17.320
És ezt a technológiát már világszerte
alkalmazzák kutatók

00:06:18.240 --> 00:06:21.656
orvostudományi, robotikai
fejlesztésekhez.

00:06:21.680 --> 00:06:23.056
Ma reggel olvastam,

00:06:23.080 --> 00:06:27.656
hogy a Nairobi Nemzeti Parkban
YOLO-alapú felismerő rendszerrel

00:06:27.680 --> 00:06:30.816
veszik nyilvántartásba az állatokat.

00:06:30.840 --> 00:06:33.936
Ez azért lehetséges,
mert a Darknet nyílt forráskódú,

00:06:33.960 --> 00:06:36.880
nyilvánosan hozzáférhető,
bárki szabadon használhatja.

00:06:37.600 --> 00:06:43.296
(Taps)

00:06:43.320 --> 00:06:48.256
De még könnyebben elérhető és hasznosabb
felismerő rendszert akarunk fejleszteni,

00:06:48.280 --> 00:06:52.336
így modell-optimalizálással,

00:06:52.360 --> 00:06:54.656
hálózati binarizációval
és approximációval

00:06:54.680 --> 00:06:58.600
mobilon is futtatható
felismerő programot fejlesztünk.

00:07:04.800 --> 00:07:10.120
(Taps)

00:07:10.960 --> 00:07:15.696
És tényleg izgatott vagyok, mert máris
van egy igazán ütős megoldásunk

00:07:15.730 --> 00:07:18.336
erre az alacsony szintű
számítógépes látási problémára,

00:07:18.360 --> 00:07:22.216
és bárki hozzájuthat, és alkalmazhatja.

00:07:22.240 --> 00:07:25.416
A többi már önökön múlik,

00:07:25.440 --> 00:07:28.376
és mindenkin, aki hozzáfér
ehhez a szoftverhez,

00:07:28.400 --> 00:07:32.056
és alig várom, hogy lássam,
miket hoznak létre ezzel a technológiával.

00:07:32.080 --> 00:07:33.296
Köszönöm.

00:07:33.320 --> 00:07:36.760
(Taps)

