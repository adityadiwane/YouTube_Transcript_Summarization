WEBVTT
Kind: captions
Language: ko

00:00:00.000 --> 00:00:07.000
번역: 혜련 장
검토: Taz B K

00:00:12.825 --> 00:00:13.976
십년 전 만해도

00:00:14.000 --> 00:00:16.776
컴퓨터 시각 연구자들은

00:00:16.800 --> 00:00:19.496
개와 고양이를 컴퓨터가 
구별해 내는 것은

00:00:19.520 --> 00:00:21.496
거의 불가능하다 생각했습니다.

00:00:21.520 --> 00:00:25.216
아무리 인공지능이
발전해도 말이지요.

00:00:25.240 --> 00:00:28.800
지금은 99% 이상 정확하게
그 일이 가능한데,

00:00:29.680 --> 00:00:31.536
이것을 '이미지 분류' 라고 합니다.

00:00:31.560 --> 00:00:34.656
이미지 마다 이름표를 붙여주면

00:00:34.680 --> 00:00:37.720
컴퓨터는 수천 개의 다른 
유형까지 알아냅니다.

00:00:38.680 --> 00:00:41.576
저는 워싱턴 대학교에서
석사과정을 밟고 있고

00:00:41.600 --> 00:00:43.496
'다크넷' 이라 불리는 
프로젝트를 연구하고 있습니다.

00:00:43.520 --> 00:00:45.032
일종의 신경망 체제의 프로그램인데

00:00:46.544 --> 00:00:48.056
컴퓨터 시각 견본을 
교육하고 실험하는데 쓰입니다.

00:00:48.080 --> 00:00:51.056
자 이제, 
'다크넷'이 어떤 식으로 

00:00:51.080 --> 00:00:52.840
이 이미지를 인식하는지 보겠습니다.

00:00:54.520 --> 00:00:56.856
지금 이 이미지에

00:00:56.880 --> 00:00:58.096
저희가 개발한 선별법을 적용하면

00:00:58.120 --> 00:01:00.576
단지 개 또는 고양이의 
예측 뿐만 아니라

00:01:00.600 --> 00:01:02.936
자세한 종까지도 알아 낼 수 있습니다.

00:01:02.960 --> 00:01:05.136
이미 이 정도로 
세밀한 수준에 올라와 있습니다.

00:01:05.160 --> 00:01:06.776
아주 정확하기까지 합니다.

00:01:06.800 --> 00:01:08.640
제 반려견은 말라뮤트 입니다.

00:01:09.040 --> 00:01:13.376
'이미지 선별법'이 엄청나게 
발전을 해왔는데

00:01:13.400 --> 00:01:15.400
이런 종류의 이미지에 
저희 선별법을 적용시키면

00:01:15.424 --> 00:01:17.384
과연 어떤 결과가 나올까요?

00:01:19.080 --> 00:01:20.280
자...

00:01:24.640 --> 00:01:28.536
대략 비슷한 예측을 
하는 것을 볼 수 있습니다.

00:01:28.560 --> 00:01:31.656
맞습니다, 사진에 말라뮤트가 있죠.

00:01:31.680 --> 00:01:35.376
하지만 이 정도로는 어떤 장면인지

00:01:35.400 --> 00:01:37.067
많은 것을 알 수 없습니다.

00:01:37.091 --> 00:01:38.651
좀 더 효과적인 것이 필요하겠지요.

00:01:39.240 --> 00:01:41.856
저는 지금 '사물감지'라 불리는 
문제에 대해 연구하고 있습니다.

00:01:41.880 --> 00:01:44.816
한 이미지 안에 있는 
모든 사물들을 찾아내서

00:01:44.840 --> 00:01:46.296
테두리 상자를 치고

00:01:46.320 --> 00:01:47.840
그것이 무엇인지 맞추는 것입니다.

00:01:48.400 --> 00:01:51.680
여기에 감지법을 적용하면
어떻게 되는지 보겠습니다.

00:01:53.240 --> 00:01:55.496
자, 이런 식의 결과라면

00:01:55.520 --> 00:01:58.216
컴퓨터 시각 알고리듬으로
더 많은 것을 해낼 수 있겠군요.

00:01:58.240 --> 00:02:01.216
이제 이미지 안에 고양이와 개가 있고

00:02:01.240 --> 00:02:03.496
대략 그들의 위치

00:02:03.520 --> 00:02:04.736
그리고 크기까지 파악하고 있습니다.

00:02:04.760 --> 00:02:06.696
그외 다른 정보들까지 
알고 있을지도 모르겠네요.

00:02:06.720 --> 00:02:08.680
저 뒤 쪽에 책 한 권이 있네요.

00:02:09.280 --> 00:02:12.536
이 컴퓨터 시각을 이용해서 
어떤 시스템을 개발한다면,

00:02:12.560 --> 00:02:16.016
자율주행 자동차나 로봇 시스템일텐데

00:02:16.040 --> 00:02:18.496
바로 이런 것들이 
여러분들이 원하는 정보일 겁니다.

00:02:18.520 --> 00:02:21.759
물리적 세계와 교감을 
가능하게 하는 것들 말이지요.

00:02:22.759 --> 00:02:25.016
자, 제가 처음으로 
'사물감지' 연구에 들어갔을 때

00:02:25.040 --> 00:02:28.336
이미지 하나를 처리하는데 
20초가 걸렸습니다.

00:02:28.360 --> 00:02:32.240
이 분야에서 왜 속도가 
중요한지 알고 싶다면

00:02:33.120 --> 00:02:35.656
여기 사물감지기능의 한 예가 있습니다.

00:02:35.680 --> 00:02:38.096
이미지 하나를 처리하는데
2초 밖에 걸리지 않습니다.

00:02:38.120 --> 00:02:40.736
20초 짜리 감지기능보다는

00:02:40.760 --> 00:02:44.296
10배나 빠른 속도이지요.

00:02:44.320 --> 00:02:46.976
보시는 것 처럼, 이 기능이 
예측을 하기 시작할 때면

00:02:47.000 --> 00:02:49.040
이미 벌어지고 상황은 
바뀌어 있을 테니까

00:02:49.880 --> 00:02:52.296
응용 프로그램으로는

00:02:52.320 --> 00:02:53.736
별 효용이 없을 겁니다.

00:02:53.760 --> 00:02:56.256
만일 10배를 더 빠르게 한다면

00:02:56.280 --> 00:02:59.096
초당 다섯 장면을 처리하는
감지기능이 됩니다.

00:02:59.120 --> 00:03:00.656
훨씬 낫죠.

00:03:00.680 --> 00:03:02.656
하지만 만일,

00:03:02.680 --> 00:03:04.976
여기서 더 큰 발전이 없다면

00:03:05.000 --> 00:03:07.560
이 정도의 시스템이 제 차를 
운전하기를 원친 않겠지요.

00:03:09.120 --> 00:03:12.360
이것이 제 노트북에서 실시간으로 
작동되고 있는 감지 시스템입니다.

00:03:13.000 --> 00:03:16.136
아주 부드럽게 제가 틀안에서 
움직이는 대로 따라오죠.

00:03:16.160 --> 00:03:19.880
아무 문제가 없습니다.
다양한 크기

00:03:21.440 --> 00:03:22.640
자세

00:03:23.280 --> 00:03:25.136
앞뒤 움직임에도

00:03:25.160 --> 00:03:26.376
훌륭하죠.

00:03:26.400 --> 00:03:28.136
이런 것이 바로 
우리에게 필요한 것입니다.

00:03:28.160 --> 00:03:31.056
컴퓨터 시각을 이용한 
시스템을 개발할 때 말이지요.

00:03:31.080 --> 00:03:35.080
(박수)

00:03:36.280 --> 00:03:38.456
불과 몇년 만에

00:03:38.480 --> 00:03:41.136
한 이미지를 처리하는 시간이 20초에서

00:03:41.160 --> 00:03:44.696
500분의 1초로, 
천배나 빨라졌습니다.

00:03:44.720 --> 00:03:46.136
어떻게 가능했을까요?

00:03:46.160 --> 00:03:49.176
과거에는, 사물감지 시스템들은

00:03:49.200 --> 00:03:51.136
이런 이미지를 가지고

00:03:51.160 --> 00:03:53.616
여러 영역으로 잘라내서

00:03:53.640 --> 00:03:56.896
각 영역 마다 선별작업을 실행하고

00:03:56.920 --> 00:03:59.456
그 선별작업에서 산출된 
가장 높은 점수들이

00:03:59.480 --> 00:04:02.616
이미지의 감지로 
간주되는 방식이었습니다.

00:04:02.640 --> 00:04:06.696
하지만, 감지를 하기까지 한 이미지에 
수천 번의 분류작업이

00:04:06.720 --> 00:04:09.640
또 수천 번의 신경망 감정을
거쳐야 했습니다.

00:04:11.240 --> 00:04:15.776
대신에, 우리는 단일 네트워크로
모든 탐지가 가능케 했습니다.

00:04:15.800 --> 00:04:20.080
모든 테두리 상자와 분류 개연성을 
동시에 처리해 내는 것이지요.

00:04:20.680 --> 00:04:24.176
저희 시스템에서는 감지를 해내기 위해

00:04:24.200 --> 00:04:25.656
한 이미지를 수천 번이 아니라

00:04:25.680 --> 00:04:26.936
단 한 번 보는 것으로 가능하고

00:04:26.960 --> 00:04:29.880
저희가 이것을 사물감지의 '욜로'법 으로 
부르는 이유입니다.

00:04:31.360 --> 00:04:35.336
이 속도로는, 이미지 뿐만 아니라

00:04:35.360 --> 00:04:37.776
동영상도 실시간으로 
처리할 수 있습니다.

00:04:37.800 --> 00:04:40.896
이제는 단순히 개와 고양이를 
인지하는 것을 넘어서

00:04:40.920 --> 00:04:43.880
그들이 돌아다니는 것도, 
서로 어울리는 것도 볼 수 있습니다.

00:04:46.560 --> 00:04:48.616
이것이 저희가 개발해낸 
감지기능입니다.

00:04:48.640 --> 00:04:53.016
마이크로소프트의 
코코 데이터 세트 안에서

00:04:53.040 --> 00:04:56.296
80개의 등급에 적용시켜 
얻어낸 것이지요.

00:04:56.320 --> 00:04:59.656
숟가락, 포크, 그릇 같이 
평범한 물건들이

00:04:59.680 --> 00:05:01.480
다양하게 있네요.

00:05:02.360 --> 00:05:05.456
좀 특이한 것들도 보이지요.

00:05:05.480 --> 00:05:08.736
동물, 자동차, 얼룩말, 기린.

00:05:08.760 --> 00:05:10.696
재미난 걸 한번 해볼까요.

00:05:10.720 --> 00:05:12.816
방청석으로 들어가서

00:05:12.840 --> 00:05:14.856
어떤 물건들이 감지되는지 보겠습니다.

00:05:14.880 --> 00:05:16.500
동물인형 갖고 싶으신 분?

00:05:18.000 --> 00:05:19.762
저기 곰인형도 몇개 있네요.

00:05:22.040 --> 00:05:26.576
감지한계치를 조금 낮추면,

00:05:26.600 --> 00:05:30.000
더 많은 분들이 화면에 잡히겠지요.

00:05:31.560 --> 00:05:33.896
이 정지표지판들도 
잡아낼 수 있는지 보겠습니다.

00:05:33.920 --> 00:05:35.800
배낭도 몇개 보이네요.

00:05:37.880 --> 00:05:39.720
조금 가까이 당겨 보지요.

00:05:42.320 --> 00:05:43.576
좋습니다.

00:05:43.600 --> 00:05:46.776
이 모든 것이 컴퓨터에서 실시간으로

00:05:46.800 --> 00:05:48.000
처리되고 있습니다.

00:05:49.080 --> 00:05:50.536
꼭 알아둘 것은

00:05:50.560 --> 00:05:53.776
이것이 총괄적인 
사물감지 시스템이란 것입니다.

00:05:53.800 --> 00:05:58.800
그래야 어떠한 이미지 종류에도 
적용시킬 수 있겠지요.

00:06:00.320 --> 00:06:02.856
동일한 코드가

00:06:02.880 --> 00:06:05.336
정지표지판 또는 보행자

00:06:05.360 --> 00:06:07.336
자율주행 자동차 안의 자전거들을
찾아내기도 하고

00:06:07.360 --> 00:06:10.216
조직검사를 통해 암세포를

00:06:10.240 --> 00:06:13.256
찾아낼 때도 사용될 수 있습니다.

00:06:13.280 --> 00:06:17.320
이미 세계 곳곳의 연구원들이 이 기술을

00:06:18.240 --> 00:06:21.656
의학과 로봇공학의 발전 등에
쓰고 있습니다.

00:06:21.680 --> 00:06:23.056
오늘 아침 신문에

00:06:23.080 --> 00:06:27.656
나이로비 국립공원의 동물 수 조사에

00:06:27.680 --> 00:06:30.816
욜로가 감지 시스템의 일부로 
사용된다고 나왔더군요.

00:06:30.840 --> 00:06:33.936
다크넷이 오픈소스이기도 하고

00:06:33.960 --> 00:06:36.480
모두가 무료로 사용할 수 
있도록 열려있기 때문입니다.

00:06:37.600 --> 00:06:43.296
(박수)

00:06:43.320 --> 00:06:48.256
그런데, 저희는 감지기능의 
접근성과 사용성을 더 높이고 싶었고

00:06:48.280 --> 00:06:52.336
견본 최적화

00:06:52.360 --> 00:06:54.656
네트워크 이진화와 근사치의 
적절한 조화를 통해서

00:06:54.680 --> 00:06:58.600
이제 휴대전화에서도
사물감지가 가능하게 했습니다.

00:07:04.800 --> 00:07:10.120
(박수)

00:07:10.960 --> 00:07:16.016
아주 흥분되는데요. 왜냐면 
급이 낮은 컴퓨터 시각 문제점들을

00:07:16.040 --> 00:07:18.336
해결할 아주 효과적인 
방법이 있으니까요.

00:07:18.360 --> 00:07:22.216
누구나 이 기술을 가지고 
원하는 것들을 만들어 낼 수 있습니다.

00:07:22.240 --> 00:07:25.416
이제 나머지는 
여러분들의 몫이고요.

00:07:25.440 --> 00:07:28.376
또 이 소프트웨어를 사용하는 
세상의 모든 분들의 몫입니다.

00:07:28.400 --> 00:07:32.056
이 기술로 사람들이 어떤 것들을 
만들어 낼지 너무 기대됩니다.

00:07:32.080 --> 00:07:33.058
감사합니다.

00:07:33.058 --> 00:07:35.648
(박수)

