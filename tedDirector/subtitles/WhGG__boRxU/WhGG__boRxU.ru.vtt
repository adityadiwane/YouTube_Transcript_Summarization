WEBVTT
Kind: captions
Language: ru

00:00:00.000 --> 00:00:07.000
Переводчик: Namik Kasumov
Редактор: Anton Charushin

00:00:12.160 --> 00:00:15.160
Как вы знаете, люди очень живо обсуждают, как дать определение жизни.

00:00:15.160 --> 00:00:20.160
Обсуждают, следует ли включать туда воспроизводство, метаболизм, эволюцию.

00:00:20.160 --> 00:00:22.160
Ответ на это я не знаю, и говорить об этом не собираюсь.

00:00:22.160 --> 00:00:25.160
Но я хочу сказать, что жизнь включает в себя вычисления.

00:00:25.160 --> 00:00:27.160
То есть это – компьютерная программа.

00:00:27.160 --> 00:00:30.160
Будучи загруженной в клетку, программа выполнится,

00:00:30.160 --> 00:00:33.160
и в результате получится этот человек,

00:00:33.160 --> 00:00:36.160
или, при небольшом изменении, может получиться этот человек –

00:00:36.160 --> 00:00:38.160
или, ещё одно изменение, и – этот,

00:00:38.160 --> 00:00:41.160
или, при более серьезном изменении – эта собака,

00:00:41.160 --> 00:00:43.160
или это дерево, или этот кит.

00:00:43.160 --> 00:00:45.160
Так вот, если серьёзно принять

00:00:45.160 --> 00:00:47.160
такую метафору генома как программы,

00:00:47.160 --> 00:00:49.160
то придется считать, что Крис Андерсон –

00:00:49.160 --> 00:00:52.160
это продукт работы компьютера, равно как и Джим Уотсон,

00:00:52.160 --> 00:00:55.160
Крейг Вентер, а также любой из нас.

00:00:55.160 --> 00:00:57.160
Что касается убедительности этой метафоры,

00:00:57.160 --> 00:00:59.160
то достаточно найти много схожего между генетическими

00:00:59.160 --> 00:01:02.160
и компьютерными программами, чтобы иметь возможность убедиться.

00:01:02.160 --> 00:01:04.160
Лично для меня самый убедительный аргумент – это

00:01:04.160 --> 00:01:07.160
удивительная чувствительность к малым изменениям,

00:01:07.160 --> 00:01:10.160
которая, как результат, приводит к большим вариациям биологического развития.

00:01:10.160 --> 00:01:12.160
Малая мутация способна превратить двукрылую муху

00:01:12.160 --> 00:01:13.160
в 4-х-крылую.

00:01:13.160 --> 00:01:17.160
Или способна у мухи посадить ножки там, где у неё должны быть усики.

00:01:17.160 --> 00:01:19.160
Или, для тех, кому знаком [роман и фильм] «Принцесса-невеста»,

00:01:19.160 --> 00:01:21.160
малая мутация способна создать человека с 6-ю пальцами.

00:01:21.160 --> 00:01:23.160
Так вот, характерной чертой компьютерных программ является

00:01:23.160 --> 00:01:26.160
как раз такого рода чувствительность к малым изменениям.

00:01:26.160 --> 00:01:28.160
Если на вашем банковском счету 1 доллар, и вы поменяете всего один бит,

00:01:28.160 --> 00:01:30.160
там может оказаться 1000 долларов.

00:01:30.160 --> 00:01:33.160
Эти малые изменения, по моему мнению,

00:01:33.160 --> 00:01:35.160
и указывают на то, что в основе усиления амплитуды изменений

00:01:35.160 --> 00:01:39.160
лежит сложный вычислительный процесс.

00:01:39.160 --> 00:01:45.160
При этом всё указывает на наличие молекулярных программ в основе

00:01:45.160 --> 00:01:49.160
биологических процессов, и мощь молекулярных программ доказывается биологией.

00:01:49.160 --> 00:01:51.160
Моя цель – писать молекулярные программы

00:01:51.160 --> 00:01:53.160
с потенциалом создания технологии.

00:01:53.160 --> 00:01:54.160
Занимается этим масса специалистов

00:01:54.160 --> 00:01:57.160
по синтетической биологии, таких как Крейг Вентер;

00:01:57.160 --> 00:01:59.160
они концентрируются на использовании клеток.

00:01:59.160 --> 00:02:01.160
Их работы – ориентированы на клетки.

00:02:01.160 --> 00:02:03.160
Мы с моими друзьями, молекулярными программистами,

00:02:03.160 --> 00:02:05.160
сконцентрировались на, как бы, био-молекулярном подходе.

00:02:05.160 --> 00:02:08.160
Мы начинаем с ДНК, РНК и белка,

00:02:08.160 --> 00:02:11.160
и строим новые языки для построения снизу вверх,

00:02:11.160 --> 00:02:12.160
с использованием биомолекул,

00:02:12.160 --> 00:02:15.160
что в принципе может не иметь ничего общего с биологией.

00:02:15.160 --> 00:02:19.160
Итак, внутри клетки имеются вот эти машины.

00:02:19.160 --> 00:02:21.160
Вот – камера.

00:02:21.160 --> 00:02:22.160
Вот – солнечные батареи клетки,

00:02:22.160 --> 00:02:24.160
переключатели для включения и выключения генов,

00:02:24.160 --> 00:02:27.160
опорные балки для клетки, моторчики для движения мускулов.

00:02:27.160 --> 00:02:29.160
Мы в нашей небольшой группе молекулярных программистов

00:02:29.160 --> 00:02:33.160
пытаемся переделать все эти элементы из ДНК.

00:02:33.160 --> 00:02:35.160
Мы не энтузиасты ДНК, но ДНК – это наиболее дешёвый,

00:02:35.160 --> 00:02:38.160
наиболее понятный и наиболее легко программируемый для этого материал.

00:02:38.160 --> 00:02:40.160
По мере того, как станет легче использовать прочие вещи –

00:02:40.160 --> 00:02:43.160
возможно, белок, – мы будем работать и с ними.

00:02:43.160 --> 00:02:45.160
Как будет выглядеть молекулярное программирование если мы добьемся успеха?

00:02:45.160 --> 00:02:47.160
Вы садитесь за свой компьютер,

00:02:47.160 --> 00:02:49.160
и собираетесь проектировать, скажем, сотовый телефон.

00:02:49.160 --> 00:02:51.160
Вы описываете желаемый телефон на высокоуровневом языке,

00:02:51.160 --> 00:02:53.160
а затем запускаете компилятор,

00:02:53.160 --> 00:02:54.160
который, исходя из вашего описания,

00:02:54.160 --> 00:02:56.160
преобразует его в описание реальных молекул.

00:02:56.160 --> 00:02:58.160
Это описание отправляется в синтезатор,

00:02:58.160 --> 00:03:01.160
а синтезатор упаковывает эти молекулы и получается одно семя.

00:03:01.160 --> 00:03:04.160
Если это семя соответствующим образом поливать и питать,

00:03:04.160 --> 00:03:06.160
то оно проделает все необходимые для его развития вычисления,

00:03:06.160 --> 00:03:09.160
молекулярные вычисления, и построит электронный компьютер.

00:03:09.160 --> 00:03:11.160
А раз уж я ещё не раскрывал свои убеждения, скажу, что,

00:03:12.160 --> 00:03:14.160
по моему мнению, жизнь идёт путём того, что молекулярные компьютеры

00:03:14.160 --> 00:03:16.160
строят электрохимические компьютеры, которые

00:03:16.160 --> 00:03:18.160
строят электронные компьютеры, которые,

00:03:18.160 --> 00:03:20.160
вместе с электрохимическими компьютерами,

00:03:20.160 --> 00:03:22.160
построят новые молекулярные компьютеры,

00:03:22.160 --> 00:03:25.160
которые построят новые электронные компьютеры, и т.д.

00:03:25.160 --> 00:03:26.160
Если вы готовы всё это принять,

00:03:26.160 --> 00:03:28.160
и считаете, также как и я, что жизнь всецело состоит из вычислений,

00:03:28.160 --> 00:03:31.160
тогда вы будете смотреть на мир глазами специалиста по компьютерным технологиям.

00:03:31.160 --> 00:03:35.160
Тут возникает один большой вопрос. Откуда ребёнок знает, что пора прекращать рост?

00:03:35.160 --> 00:03:37.160
Для молекулярного программиста

00:03:37.160 --> 00:03:39.160
вопрос состоит в том, откуда сотовому телефону знать, что пора прекращать рост?

00:03:39.160 --> 00:03:40.160
(Смех)

00:03:40.160 --> 00:03:43.160
Или, откуда компьютерной программе знать, что пора остановиться?

00:03:43.160 --> 00:03:46.160
А ещё точнее, откуда мы знаем, что программа вообще остановится?

00:03:46.160 --> 00:03:48.160
Есть и другие вопросы, подобные этому.

00:03:48.160 --> 00:03:50.160
Один из них – вопрос, поставленный Крейг Вентером.

00:03:50.160 --> 00:03:52.160
Оказывается, Крейг – настоящий, как я считаю, специалист по компьютерным наукам.

00:03:52.160 --> 00:03:55.160
Он спросил, каков минимальный размер генома, который необходим

00:03:55.160 --> 00:03:57.160
для создания функционирующего микроорганизма?

00:03:57.160 --> 00:03:59.160
Насколько малым числом ген можно обойтись?

00:03:59.160 --> 00:04:01.160
Это в точности аналогично вопросу о том,

00:04:01.160 --> 00:04:02.160
программу какого минимального размера можно написать,

00:04:02.160 --> 00:04:04.160
чтобы она работала в точности, как Microsoft Word?

00:04:04.160 --> 00:04:05.160
(Смех)

00:04:05.160 --> 00:04:09.160
Аналогично тому, как он пишет малые бактерии –

00:04:09.160 --> 00:04:10.160
он пишет геномы, которые сделают дело –

00:04:10.160 --> 00:04:12.160
так же и мы могли бы написать малые программы,

00:04:12.160 --> 00:04:14.160
которые бы делали всё, что делает Microsoft Word.

00:04:14.160 --> 00:04:16.160
Но в молекулярном программировании вопрос стоит так:

00:04:16.160 --> 00:04:20.160
сколько молекул необходимо поместить в семя, чтобы получить телефон?

00:04:20.160 --> 00:04:22.160
Каким их минимальным числом можно обойтись?

00:04:22.160 --> 00:04:24.160
Так вот, для компьютерных технологий – это большие проблемы.

00:04:24.160 --> 00:04:26.160
Это вопросы уровня сложности,

00:04:26.160 --> 00:04:28.160
и в компьютерных технологиях они считаются очень трудными вопросами.

00:04:28.160 --> 00:04:30.160
Многие из них неразрешимы.

00:04:30.160 --> 00:04:33.160
Но в отношении некоторых задач, всё же, можно попытаться ответить на них.

00:04:33.160 --> 00:04:34.160
Потому, я поставлю эти вопросы

00:04:34.160 --> 00:04:37.160
для структур ДНК, о которых сейчас расскажу.

00:04:37.160 --> 00:04:40.160
Вот – нормальная ДНК. Та, которую принято считать нормальной.

00:04:40.160 --> 00:04:42.160
Она имеет две нити и двойную спираль.

00:04:42.160 --> 00:04:45.160
Имеет парные A, T, C, G, которые удерживают нити вместе.

00:04:45.160 --> 00:04:47.160
Иногда я это буду показывать вот так,

00:04:47.160 --> 00:04:49.160
просто чтобы не напугать вас.

00:04:49.160 --> 00:04:52.160
Мы будем рассматривать отдельные нити и не думать о двойной спирали.

00:04:52.160 --> 00:04:55.160
При синтезировании мы получаем однонитевые структуры,

00:04:55.160 --> 00:04:58.160
поэтому мы можем взять синюю нить в одной пробирке,

00:04:58.160 --> 00:05:00.160
и сделать оранжевую нить – в другой;

00:05:00.160 --> 00:05:02.160
они гибкие, пока находятся по отдельности.

00:05:02.160 --> 00:05:05.160
Но если их перемешать, они составят негнущуюся двойную спираль.

00:05:05.160 --> 00:05:07.160
За последние 25 лет

00:05:07.160 --> 00:05:09.160
Нед Симан и целый ряд его последователей

00:05:09.160 --> 00:05:12.160
очень интенсивно потрудились и создали трёхмерные структуры,

00:05:12.160 --> 00:05:15.160
используя эту реакцию ДНК на перемешивание.

00:05:15.160 --> 00:05:18.160
Однако многие из их, в общем-то, элегантных подходов требуют много времени.

00:05:18.160 --> 00:05:21.160
Может понадобиться несколько лет, или их может быть тяжело проектировать.

00:05:21.160 --> 00:05:24.160
И вот пару лет назад, я предложил новый метод,

00:05:24.160 --> 00:05:25.160
который я назвал ДНК-оригами.

00:05:25.160 --> 00:05:27.160
Он настолько прост, что вы можете этим заниматься дома на кухне,

00:05:27.160 --> 00:05:29.160
и спроектировать всё на портативном компьютере.

00:05:29.160 --> 00:05:32.160
Однако, для этого нужна очень длинная нить ДНК,

00:05:32.160 --> 00:05:34.160
а её технически очень трудно получить.

00:05:34.160 --> 00:05:36.160
Можно обратиться к естественному источнику.

00:05:36.160 --> 00:05:38.160
Можно заглянуть внутрь этого продукта работы компьютера,

00:05:38.160 --> 00:05:40.160
но его 2-х-нитевой геном ничего не даст.

00:05:40.160 --> 00:05:43.160
Можно заглянуть внутрь его кишечного тракта, где есть

00:05:43.160 --> 00:05:45.160
миллиарды бактерий – тоже без толку.

00:05:45.160 --> 00:05:47.160
Опять двойные нити, но внутри они заражены вирусом,

00:05:47.160 --> 00:05:50.160
который имеет прекрасный, длинный, однонитевой геном.

00:05:50.160 --> 00:05:52.160
Мы можем сложить его как лист бумаги,

00:05:52.160 --> 00:05:53.160
и вот как мы это делаем.

00:05:53.160 --> 00:05:54.160
Это – часть того генома.

00:05:54.160 --> 00:05:57.160
Мы добавляем серию коротких синтетических ДНК, которые я назвал «скрепками».

00:05:57.160 --> 00:06:01.160
Каждая из них имеет левую половинку, которая стыкуется с длинной нитью в одном пункте,

00:06:01.160 --> 00:06:04.160
и правую половинку, которая стыкуется с ней в другом пункте,

00:06:04.160 --> 00:06:06.160
и завязывает длинную нить примерно так.

00:06:07.160 --> 00:06:09.160
Результатом воздействия многих скрепок на длинную нить

00:06:09.160 --> 00:06:11.160
является укладка её в нечто типа прямоугольника.

00:06:11.160 --> 00:06:13.160
Киносъёмку этого процесса сделать невозможно,

00:06:13.160 --> 00:06:15.160
но Шон Дуглас в Гарварде

00:06:15.160 --> 00:06:17.160
создал для нас хорошую визуализацию,

00:06:17.160 --> 00:06:21.160
которая начинается с длинной нити и нескольких коротких нитей.

00:06:21.160 --> 00:06:25.160
Наши действия состоят в перемешивании этих нитей.

00:06:25.160 --> 00:06:27.160
Нагреваем, добавляем немного соли,

00:06:27.160 --> 00:06:29.160
нагреваем почти до кипения, охлаждаем,

00:06:29.160 --> 00:06:30.160
и по мере охлаждения

00:06:30.160 --> 00:06:32.160
короткие нити стыкуются с длинными

00:06:32.160 --> 00:06:34.160
и начинают формировать структуру.

00:06:34.160 --> 00:06:37.160
Здесь видно начало формирования двойной спирали.

00:06:38.160 --> 00:06:40.160
Если посмотреть на ДНК-оригами,

00:06:40.160 --> 00:06:43.160
то можно увидеть, что на самом деле,

00:06:43.160 --> 00:06:44.160
даже если это покажется сложным,

00:06:44.160 --> 00:06:47.160
здесь – серия параллельных друг другу двойных спиралей,

00:06:47.160 --> 00:06:49.160
удерживаемых вместе через те пункты,

00:06:49.160 --> 00:06:51.160
где короткие нити идут вдоль одной спирали,

00:06:51.160 --> 00:06:53.160
но затем перепрыгивают на другую.

00:06:53.160 --> 00:06:56.160
Так что, вот нить, которая идёт вот так, идёт вдоль одной спирали и стыкуется,

00:06:56.160 --> 00:06:58.160
перепрыгивает на другую спираль и возвращается,

00:06:58.160 --> 00:07:00.160
и это удерживает длинную нить вот таким образом.

00:07:00.160 --> 00:07:03.160
Чтобы доказать, что мы можем создать какую угодно форму и фигуру,

00:07:03.160 --> 00:07:05.160
я попробовал вот эту форму.

00:07:06.160 --> 00:07:08.160
Я хотел, чтобы ДНК уложилась вот так: вверх к глазу,

00:07:08.160 --> 00:07:11.160
вниз по носу, вверх по носу, вокруг лба,

00:07:11.160 --> 00:07:14.160
обратно вниз и кончик в виде такой вот петельки.

00:07:14.160 --> 00:07:17.160
Идея была в том, что если удастся это, то удастся и всё, что угодно.

00:07:17.160 --> 00:07:20.160
А потому я заставил компьютерную программу спроектировать для этой цели короткие «скрепки».

00:07:20.160 --> 00:07:22.160
Я заказал их, получил по [срочной почте] FedEx

00:07:22.160 --> 00:07:24.160
перемешал, подогрел, охладил,

00:07:24.160 --> 00:07:28.160
и получил 50 миллиардов смайликов,

00:07:28.160 --> 00:07:30.160
свободно плавающих в одной капле воды.

00:07:30.160 --> 00:07:32.160
Каждая из них имеет размер,

00:07:32.160 --> 00:07:36.160
представьте себе, в одну тысячную толщины человеческого волоса.

00:07:36.160 --> 00:07:39.160
Вот все они плавают в растворе, но, чтобы их увидеть,

00:07:39.160 --> 00:07:41.160
надо сделать так, чтобы они прилипли к какой-нибудь поверхности.

00:07:41.160 --> 00:07:43.160
А потому мы выливаем их на поверхность,

00:07:43.160 --> 00:07:45.160
и они начинают к ней прилипать,

00:07:45.160 --> 00:07:47.160
а мы делаем съёмку с помощью атомно-силового микроскопа.

00:07:47.160 --> 00:07:49.160
Он оснащён иглой, подобно проигрывателю,

00:07:49.160 --> 00:07:51.160
которая ходит взад-вперёд по поверхности,

00:07:51.160 --> 00:07:54.160
и, сталкиваясь с неровностями, чувствует высоту первой поверхности.

00:07:54.160 --> 00:07:56.160
Он чувствует ДНК-оригами.

00:07:56.160 --> 00:07:58.160
Вот атомно-силовой микроскоп в действии,

00:07:59.160 --> 00:08:00.160
вам видно, что результат грубоват.

00:08:00.160 --> 00:08:02.160
Если увеличить, то видно, как

00:08:02.160 --> 00:08:03.160
слабые челюсти взлетели выше головы,

00:08:03.160 --> 00:08:06.160
некоторые носы разбиты, но всё же неплохо.

00:08:06.160 --> 00:08:08.160
Приблизившись ещё, можно даже увидеть маленькую петлю,

00:08:08.160 --> 00:08:10.160
в виде нано-бородки.

00:08:10.160 --> 00:08:13.160
Самое лучшее в этом – то, что это способен создать каждый.

00:08:13.160 --> 00:08:17.160
Примерно через год после того, как мне удалось это сделать, я получаю вот что

00:08:17.160 --> 00:08:20.160
от неизвестного мне отправителя. Кто знает, что это?

00:08:20.160 --> 00:08:22.160
Это – Китай.

00:08:22.160 --> 00:08:24.160
Одна китайская студентка магистратуры, по имени Лулу Цзянь,

00:08:24.160 --> 00:08:26.160
сделала прекрасную вещь.

00:08:26.160 --> 00:08:28.160
Она сама написала программу

00:08:28.160 --> 00:08:30.160
для проектирования и создала это ДНК-оригами,

00:08:30.160 --> 00:08:33.160
красивое изображение Китая, на котором даже есть Тайвань.

00:08:33.160 --> 00:08:36.160
Видно, что его держат на самом, по-видимому, коротком в мире поводке.

00:08:36.160 --> 00:08:38.160
(Смех) [ревностность реакции КНР на Тайвань]

00:08:39.160 --> 00:08:40.160
Итак, это прекрасно функционирует

00:08:41.160 --> 00:08:43.160
и мы можем создавать фигуры и формы.

00:08:44.160 --> 00:08:47.160
Можно создать карту двух Америк, надпись ДНК с помощью ДНК.

00:08:47.160 --> 00:08:50.160
Самая прекрасная сторона в этом…

00:08:50.160 --> 00:08:52.160
вообще-то всё это похоже на произведения искусства нано-размеров,

00:08:52.160 --> 00:08:53.160
но дело в том, что нано-искусство –

00:08:53.160 --> 00:08:55.160
это и есть всё, что надо для создания нано-схем.

00:08:55.160 --> 00:08:57.160
Значит, можно поставить компоненты схем на скрепки,

00:08:57.160 --> 00:08:59.160
подобно лампочке и переключателю,

00:08:59.160 --> 00:09:02.160
запустить процесс сборки и получить некую схему.

00:09:02.160 --> 00:09:05.160
А потом, может быть, удастся смыть ДНК и получить в осадке схему.

00:09:05.160 --> 00:09:07.160
Это и сделали мои коллеги в Калтехе.

00:09:07.160 --> 00:09:10.160
Они взяли ДНК-оригами, организовали углеродные нано-пробирки,

00:09:10.160 --> 00:09:12.160
сделали вот тут маленький переключатель, соединили его,

00:09:12.160 --> 00:09:15.160
протестировали и убедились, что это действительно переключатель.

00:09:15.160 --> 00:09:17.160
Так вот, это – всего лишь один переключатель,

00:09:17.160 --> 00:09:21.160
а для компьютера нужно полмиллиарда, так что ещё есть, над чем поработать.

00:09:21.160 --> 00:09:23.160
Но это многообещающе,

00:09:23.160 --> 00:09:28.160
потому что оригами может создать элементы размера 1/10 того,

00:09:28.160 --> 00:09:29.160
что имеется в обычном компьютере.

00:09:29.160 --> 00:09:32.160
Значит, это очень перспективно для создания малых компьютеров.

00:09:32.160 --> 00:09:35.160
Теперь я вернусь к компилятору.

00:09:35.160 --> 00:09:38.160
ДНК-оригами является доказательством того, что компилятор на самом деле работает.

00:09:39.160 --> 00:09:41.160
Итак, запускаем что-то в компьютере.

00:09:41.160 --> 00:09:44.160
Получаем высокоуровневое описание программы,

00:09:44.160 --> 00:09:46.160
высокоуровневое описание оригами.

00:09:46.160 --> 00:09:49.160
Можно скомпилировать его в молекулы, послать всё на синтезатор,

00:09:49.160 --> 00:09:50.160
и это всё на самом деле функционирует.

00:09:50.160 --> 00:09:54.160
Как оказалось, одна фирма создала прекрасную программу

00:09:54.160 --> 00:09:56.160
намного лучше моей, совершенно некрасивой на вид.

00:09:56.160 --> 00:09:57.160
Их программа позволяет работать с помощью

00:09:57.160 --> 00:09:59.160
красивого, визуального интерфейса.

00:10:00.160 --> 00:10:01.160
Теперь возникает вопрос: если всё так прекрасно,

00:10:01.160 --> 00:10:03.160
почему же дело не кончается на ДНК-оригами?

00:10:03.160 --> 00:10:05.160
У вас есть молекулярный компьютер, теперь вы можете делать всё, что угодно.

00:10:05.160 --> 00:10:08.160
Проблема в том, что результаты не масштабируются.

00:10:08.160 --> 00:10:11.160
Например, для создания человека из ДНК-оригами, потребуется

00:10:11.160 --> 00:10:13.160
очень длинная нить,

00:10:13.160 --> 00:10:16.160
в 10 триллионов триллионов основ.

00:10:16.160 --> 00:10:18.160
Это – ДНК длиной в 3 световых года,

00:10:18.160 --> 00:10:20.160
то есть просто нереально.

00:10:20.160 --> 00:10:22.160
И мы обращаемся к другой технологии, которая называется

00:10:22.160 --> 00:10:24.160
алгоритмическая самосборка плиток.

00:10:24.160 --> 00:10:26.160
Начало ей дал Эрик Уинфри,

00:10:26.160 --> 00:10:27.160
и вот что она делает.

00:10:27.160 --> 00:10:31.160
Имеются плитки размером 1/100 от ДНК-оригами,

00:10:31.160 --> 00:10:33.160
увеличив, мы видим лишь 4 нити ДНК,

00:10:34.160 --> 00:10:36.160
на которых есть маленькие однонитевые кусочки.

00:10:36.160 --> 00:10:38.160
Они могут, если найдут себе пару, состыковать одну плитку с другой.

00:10:38.160 --> 00:10:41.160
Эти плитки мы будем рисовать как квадратики.

00:10:42.160 --> 00:10:44.160
Если приглянуться к их липким краям, к этим кусочкам ДНК,

00:10:44.160 --> 00:10:47.160
то можно видеть, что они располагаются в шахматном порядке.

00:10:47.160 --> 00:10:50.160
Значит, эти плитки образуют сложную само-собирающуюся шахматную доску.

00:10:50.160 --> 00:10:52.160
Если вы ещё не догадались, смысл этого в том, что

00:10:52.160 --> 00:10:55.160
плитки – это нечто типа молекулярной программы,

00:10:55.160 --> 00:10:58.160
и они производят фигуры.

00:10:58.160 --> 00:11:00.160
А самое потрясающее – это то,

00:11:00.160 --> 00:11:02.160
что любая компьютерная программа может быть преобразована

00:11:02.160 --> 00:11:05.160
в одну их этих плиточных программ, – в частности, такова программа подсчёта.

00:11:05.160 --> 00:11:08.160
Значит, можно получить набор плиток,

00:11:08.160 --> 00:11:11.160
которые будучи собранными вместе образуют маленький бинарный счётчик,

00:11:11.160 --> 00:11:13.160
а не просто шахматную доску.

00:11:13.160 --> 00:11:16.160
То есть, можно с неё считывать бинарные числа: пять, шесть и семь.

00:11:16.160 --> 00:11:19.160
И чтобы правильно начать этот тип вычислений,

00:11:19.160 --> 00:11:21.160
нужны исходные данные, нужно нечто типа семени.

00:11:21.160 --> 00:11:23.160
Для этого можно использовать ДНК-оригами.

00:11:23.160 --> 00:11:25.160
Можно закодировать число 32

00:11:25.160 --> 00:11:27.160
в правой части ДНК-оригами,

00:11:27.160 --> 00:11:29.160
и, когда подсчитывающие плитки будут складываться,

00:11:29.160 --> 00:11:32.160
они начнут подсчёт, прочитают число 32

00:11:32.160 --> 00:11:34.160
и на 32 остановятся.

00:11:34.160 --> 00:11:37.160
Значит, мы нашли способ

00:11:37.160 --> 00:11:40.160
заставить молекулярную программу понять, когда остановить рост.

00:11:40.160 --> 00:11:42.160
Она понимает, когда надо остановить рост, потому что она умеет считать.

00:11:42.160 --> 00:11:44.160
Она знает, насколько она велика.

00:11:44.160 --> 00:11:47.160
Это – ответ на первый вопрос, о котором я говорил.

00:11:47.160 --> 00:11:50.160
Однако это ничего не говорит нам о том, как же дети делают это.

00:11:50.160 --> 00:11:54.160
Теперь мы можем использовать эту программу подсчёта и попытаться получить более крупные вещи,

00:11:54.160 --> 00:11:55.160
чем с помощью только ДНК-оригами.

00:11:55.160 --> 00:11:58.160
Вот – ДНК-оригами. Мы можем

00:11:58.160 --> 00:12:01.160
вписать число 32 с обоих концов ДНК-оригами,

00:12:01.160 --> 00:12:03.160
использовать нашу лейку,

00:12:03.160 --> 00:12:07.160
начать взращивать плитки

00:12:07.160 --> 00:12:09.160
и создать квадрат.

00:12:09.160 --> 00:12:12.160
Счётчик служит шаблоном

00:12:12.160 --> 00:12:14.160
для заполнения пространства посередине этой штуки.

00:12:14.160 --> 00:12:15.160
Значит, теперь нам удалось сделать нечто

00:12:15.160 --> 00:12:18.160
намного большее, чем ДНК-оригами

00:12:18.160 --> 00:12:21.160
путём комбинирования ДНК-оригами с плитками.

00:12:21.160 --> 00:12:24.160
И тут есть еще одно хорошее свойство – всё это поддаётся перепрограммированию.

00:12:24.160 --> 00:12:28.160
Можно просто изменить пару нитей ДНК в этом бинарном представлении,

00:12:28.160 --> 00:12:31.160
и вместо 32 получить 96.

00:12:31.160 --> 00:12:34.160
Если так сделать, то оригами останется того же размера,

00:12:34.160 --> 00:12:38.160
но полученный квадрат будет в три раза больше.

00:12:39.160 --> 00:12:40.160
Итак, это сводит вместе всё то, что

00:12:40.160 --> 00:12:42.160
я говорил о развитии.

00:12:42.160 --> 00:12:45.160
Имеется очень чувствительная компьютерная программа,

00:12:45.160 --> 00:12:48.160
где малые изменения – единичные, малейшие мутации –

00:12:48.160 --> 00:12:50.160
превращают то, что производило квадрат одного размера

00:12:50.160 --> 00:12:53.160
в нечто, выдающее квадрат намного больший.

00:12:54.160 --> 00:12:57.160
Так вот, использование программы подсчёта для вычисления

00:12:57.160 --> 00:12:59.160
и построения такого рода вещей

00:12:59.160 --> 00:13:01.160
путём подобного процесса развития

00:13:01.160 --> 00:13:05.160
имеет отношение вопросу, поставленному Крейг Вентером.

00:13:05.160 --> 00:13:07.160
Можно спросить, а сколько нитей ДНК потребуется

00:13:07.160 --> 00:13:09.160
для построения квадрата заданной длины?

00:13:09.160 --> 00:13:14.160
Если нужно построить квадраты размеров 10, 100 или 1000

00:13:14.160 --> 00:13:16.160
и разрешается использовать только ДНК-оригами,

00:13:16.160 --> 00:13:19.160
то число нитей ДНК, которые потребуются для создания квадрата

00:13:19.160 --> 00:13:21.160
равно квадрату его размера,

00:13:21.160 --> 00:13:23.160
то есть 100, 10 тысяч или 1 миллион нитей ДНК.

00:13:23.160 --> 00:13:25.160
Ясно, что это – вне пределов досягаемости.

00:13:25.160 --> 00:13:27.160
Но если воспользоваться небольшими вычислениями –

00:13:27.160 --> 00:13:31.160
если использовать ДНК-оригами плюс несколько плиток со счётчиком –

00:13:31.160 --> 00:13:34.160
то тогда можно обойтись числом в 100, 200 или 300 нитей ДНК.

00:13:34.160 --> 00:13:39.160
Таким образом, число нитей ДНК можно экспоненциально сократить при помощи

00:13:39.160 --> 00:13:42.160
программы подсчёта, при помощи небольших вычислений.

00:13:42.160 --> 00:13:45.160
То есть, вычисление представляет собой очень мощный способ

00:13:45.160 --> 00:13:48.160
сокращения числа необходимых для построения молекул,

00:13:48.160 --> 00:13:51.160
сокращения размера создаваемого генома.

00:13:51.160 --> 00:13:54.160
И наконец, я возвращаюсь к этой сумасбродной идее о том,

00:13:54.160 --> 00:13:56.160
что компьютеры строят компьютеры.

00:13:56.160 --> 00:13:59.160
Если взглянуть на созданный из оригами квадрат

00:13:59.160 --> 00:14:01.160
и на взращенные на нём программы подсчёта,

00:14:01.160 --> 00:14:04.160
то можно увидеть, что его структура – это в точности структура,

00:14:04.160 --> 00:14:05.160
нужная для создания памяти компьютера.

00:14:05.160 --> 00:14:08.160
Значит, если присовокупить к плиткам провода и переключатели,

00:14:08.160 --> 00:14:11.160
то есть, использовать скрепки не для нитей, а для плиток,

00:14:11.160 --> 00:14:14.160
то они будут само-собираться в довольно сложные схемы:

00:14:14.160 --> 00:14:17.160
демультиплексные схемы, необходимые для адресации этой памяти.

00:14:17.160 --> 00:14:19.160
Значит, при помощи небольших вычислений

00:14:19.160 --> 00:14:21.160
можно создать сложные схемы.

00:14:21.160 --> 00:14:24.160
Вот как молекулярный компьютер строит электронный компьютер.

00:14:24.160 --> 00:14:27.160
Теперь вы меня спросите, а насколько далеко мы продвинулись в этом деле?

00:14:27.160 --> 00:14:30.160
Вот – экспериментальный результат прошлого года.

00:14:30.160 --> 00:14:32.160
Это – прямоугольник ДНК оригами,

00:14:33.160 --> 00:14:35.160
а это – взращенные на нём плитки.

00:14:35.160 --> 00:14:37.160
Можете посмотреть, как они считают.

00:14:37.160 --> 00:14:49.160
Один, два, три, четыре, пять, шесть, девять, 10, 11, 12, 17.

00:14:49.160 --> 00:14:53.160
Ошибки налицо, но, по крайней мере, правильное направление счёта.

00:14:53.160 --> 00:14:54.160
(Смех)

00:14:54.160 --> 00:14:57.160
Дело в том, что эти идеи у нас были ещё девять лет назад.

00:14:57.160 --> 00:15:00.160
Это даёт вам представление о константе времени, о том, сколь долго нужно

00:15:00.160 --> 00:15:02.160
для такого рода вещей, и я считаю, что мы продвинулись далеко.

00:15:02.160 --> 00:15:04.160
Мы представляем себе, как можно будет исправить эти ошибки.

00:15:04.160 --> 00:15:06.160
И в следующие 5-10 лет, как я думаю,

00:15:06.160 --> 00:15:08.160
мы создадим описанные мною плитки

00:15:08.160 --> 00:15:11.160
и, может быть даже, доберёмся до самосборочных схем.

00:15:11.160 --> 00:15:15.160
Итак, что же я хотел донести до вас в этом выступлении?

00:15:15.160 --> 00:15:17.160
Я хотел бы, чтобы вы помнили, что

00:15:17.160 --> 00:15:21.160
при создании разнообразия и сложности своих форм,

00:15:21.160 --> 00:15:23.160
жизнь использует вычисления.

00:15:23.160 --> 00:15:27.160
Используемые вычисления – это молекулярные вычисления,

00:15:27.160 --> 00:15:29.160
а для их понимания, для более полного управления,

00:15:29.160 --> 00:15:31.160
нужно, как говорил Фейнман, строить:

00:15:31.160 --> 00:15:33.160
«Что не могу воспроизвести, того не понимаю».

00:15:33.160 --> 00:15:37.160
Вот мы и собираемся использовать молекулы и преобразовать эту штуку,

00:15:37.160 --> 00:15:39.160
перестроить всё снизу вверх,

00:15:39.160 --> 00:15:42.160
применяя ДНК так, как природа никогда и не предполагала,

00:15:42.160 --> 00:15:44.160
применяя ДНК-оригами

00:15:44.160 --> 00:15:47.160
и ДНК-оригами для выращивания алгоритмической самосборки.

00:15:47.160 --> 00:15:49.160
Всё это очень круто, конечно,

00:15:50.160 --> 00:15:51.160
но я хотел бы, чтобы вы вынесли из этого выступления,

00:15:51.160 --> 00:15:53.160
из этих больших, как я надеюсь, вопросов,

00:15:53.160 --> 00:15:56.160
понимание того, что молекулярное программирование не сводится к созданию очередных технических ухищрений.

00:15:56.160 --> 00:15:58.160
Эта область не просто создаёт

00:15:58.160 --> 00:16:00.160
самосборочные телефоны и схемы.

00:16:00.160 --> 00:16:02.160
На самом деле молекулярное программирование начинает с того,

00:16:02.160 --> 00:16:05.160
что представляет крупные проблемы науки вычислений в новом свете,

00:16:05.160 --> 00:16:07.160
ставит вопросы по-новому, в попытке понять,

00:16:07.160 --> 00:16:09.160
как биология может создавать

00:16:09.160 --> 00:16:11.160
такие изумительные создания. Благодарю вас.

00:16:12.160 --> 00:16:19.160
(Аплодисменты)

