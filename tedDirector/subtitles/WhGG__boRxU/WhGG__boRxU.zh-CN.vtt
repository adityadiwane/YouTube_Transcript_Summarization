WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:07.000
翻译人员: Juyao Dong
校对人员: Yi Wang

00:00:12.160 --> 00:00:15.160
人们总在激烈的争执生命的定义

00:00:15.160 --> 00:00:20.160
它是否应该具有生殖,新陈代谢或者进化这些特征

00:00:20.160 --> 00:00:22.160
我也不知道这个问题的答案,所以我不会和你们说这些

00:00:22.160 --> 00:00:25.160
我要说的是生命中有计算的过程

00:00:25.160 --> 00:00:27.160
这是一个计算机程序

00:00:27.160 --> 00:00:30.160
包含在细胞里,这个程序将来会执行

00:00:30.160 --> 00:00:33.160
执行的结果就是诞生了这样一个人

00:00:33.160 --> 00:00:36.160
或者有些小的变动,它就会造出这样的一个人

00:00:36.160 --> 00:00:38.160
又或者有一些其它的变动,就会是这个人

00:00:38.160 --> 00:00:41.160
或者是个大一点的变化,也许会变成这只狗

00:00:41.160 --> 00:00:43.160
或者是这棵树,或是这条鲸鱼

00:00:43.160 --> 00:00:45.160
如果你来认真看待

00:00:45.160 --> 00:00:47.160
把基因组比成一个程序这样的比喻

00:00:47.160 --> 00:00:49.160
你得把Chris Anderson (TED的创始人)

00:00:49.160 --> 00:00:52.160
想成是一样电脑合成的制品,就像Jim Watson(DNA结构的发现者之一)

00:00:52.160 --> 00:00:55.160
Craig Venter(最早开始研究人类基因组序列的科学家之一) 以及我们每一个人一样.

00:00:55.160 --> 00:00:57.160
为了说服你自己这个比喻是真的

00:00:57.160 --> 00:00:59.160
如果注意到基因组程序和电脑程序

00:00:59.160 --> 00:01:02.160
的许多共同点, 那这可以帮助你相信这个比喻

00:01:02.160 --> 00:01:04.160
但最吸引我的一点

00:01:04.160 --> 00:01:07.160
是对微小变化的特殊敏感性

00:01:07.160 --> 00:01:10.160
造就了生物进化中的大的改变

00:01:10.160 --> 00:01:12.160
一个很小的变异可以把一个双翅的苍蝇

00:01:12.160 --> 00:01:13.160
变成一个四支翅膀的苍蝇

00:01:13.160 --> 00:01:17.160
或者也可以把这个苍蝇的腿长在它本该长触角的地方

00:01:17.160 --> 00:01:19.160
或者,如果你对"公主新娘"这个电影很熟悉的话

00:01:19.160 --> 00:01:21.160
小的变异也可能造就一个有六个指头的人

00:01:21.160 --> 00:01:23.160
现在, 电脑程序的一个重要特点

00:01:23.160 --> 00:01:26.160
就是可以有像(生物世界里)这样的对微小变化的敏感性

00:01:26.160 --> 00:01:28.160
如果你的银行帐户里有一美元, 你只需要把这一位上的数换一下

00:01:28.160 --> 00:01:30.160
你就能有一千美元

00:01:30.160 --> 00:01:33.160
所以就是这些小的变化让我想到

00:01:33.160 --> 00:01:35.160
它们暗示着一个复杂计算过程

00:01:35.160 --> 00:01:39.160
总是暗藏在这些被放大的变化背后

00:01:39.160 --> 00:01:45.160
所以,所有这些都在暗示着在生物中隐含着分子程序

00:01:45.160 --> 00:01:49.160
而且生物本身也体现了这些分子程序的强大力量

00:01:49.160 --> 00:01:51.160
我想做的是写一些有潜力

00:01:51.160 --> 00:01:53.160
发展为技术的分子程序

00:01:53.160 --> 00:01:54.160
而且有很多人也致力于这一方向

00:01:54.160 --> 00:01:57.160
有很多合成生物学家在做这些,比如 Craig Venter

00:01:57.160 --> 00:01:59.160
他们集中精力在利用细胞上

00:01:59.160 --> 00:02:01.160
是细胞指向的

00:02:01.160 --> 00:02:03.160
我的朋友,分子程序师们以及我自己

00:02:03.160 --> 00:02:05.160
有一套以生物-分子为中心的研究方法

00:02:05.160 --> 00:02:08.160
我们想要利用DNA, RNA 以及蛋白质

00:02:08.160 --> 00:02:11.160
为从头开始构建全新的事物创造一种语言

00:02:11.160 --> 00:02:12.160
利用生物分子

00:02:12.160 --> 00:02:15.160
我们希望将来能把这些用在生物学以外的其它领域中.

00:02:15.160 --> 00:02:19.160
细胞中有所有这些"机器"

00:02:19.160 --> 00:02:21.160
这是一部照相机

00:02:21.160 --> 00:02:22.160
这是细胞中的太阳能电池板

00:02:22.160 --> 00:02:24.160
这是些调控基因的开关

00:02:24.160 --> 00:02:27.160
这是细胞的大梁, 和驱动肌肉的马达.

00:02:27.160 --> 00:02:29.160
我的分子程序研究小组

00:02:29.160 --> 00:02:33.160
正在试图从DNA开始重新设计所有这些部件

00:02:33.160 --> 00:02:35.160
我们并不是DNA的狂热爱好者,但DNA是最便宜的

00:02:35.160 --> 00:02:38.160
最容易理解的, 而且也适合于对其编程从而实现目的的.

00:02:38.160 --> 00:02:40.160
如果其它的分子变得成容易去利用

00:02:40.160 --> 00:02:43.160
例如蛋白质,我们也将会利用的.

00:02:43.160 --> 00:02:45.160
如果我们成功了,分子编程会是什么样子的呢?

00:02:45.160 --> 00:02:47.160
你将坐在你的电脑面前

00:02:47.160 --> 00:02:49.160
你将能设计一些东西,比如手机

00:02:49.160 --> 00:02:51.160
而且如果你用一种高级语言,你将能描绘这部手机

00:02:51.160 --> 00:02:53.160
之后你得有一部编译器

00:02:53.160 --> 00:02:54.160
这部编译器将会接收这些指令

00:02:54.160 --> 00:02:56.160
然后把它变成真正的分子

00:02:56.160 --> 00:02:58.160
这些分子能被送到合成器

00:02:58.160 --> 00:03:01.160
合成器又能把这些分子组装在一起变成一个种子

00:03:01.160 --> 00:03:04.160
如果你接着给它浇水而且好好栽培它呢?

00:03:04.160 --> 00:03:06.160
它会进化成一个计算过程吗?

00:03:06.160 --> 00:03:09.160
一个分子计算过程,而且建立起一个电子计算机.

00:03:09.160 --> 00:03:11.160
如果我还没透露我的观点的话

00:03:12.160 --> 00:03:14.160
我认为生命的过程是从分子计算机开始

00:03:14.160 --> 00:03:16.160
建造电子化学的计算机

00:03:16.160 --> 00:03:18.160
再接着建电子计算机

00:03:18.160 --> 00:03:20.160
而这些电子计算机和电子化学的计算机

00:03:20.160 --> 00:03:22.160
将会创造出新的分子计算机

00:03:22.160 --> 00:03:25.160
这些新计算机又将会建造新的电子计算机,如此继续下去

00:03:25.160 --> 00:03:26.160
如果你相信所有这些的话

00:03:26.160 --> 00:03:28.160
而且如果你像我一样相信生命全是关于计算的话

00:03:28.160 --> 00:03:31.160
那你就是在用一个计算机科学家的眼光来看一个重要问题

00:03:31.160 --> 00:03:35.160
一个重要的问题是,婴儿是怎么知道什么时候停止生长的呢?

00:03:35.160 --> 00:03:37.160
作为一个分子程序员

00:03:37.160 --> 00:03:39.160
这个问题就相当于,你的手机如果知道什么时候停止生长

00:03:39.160 --> 00:03:40.160
(笑声)

00:03:40.160 --> 00:03:43.160
或者说一个电脑程序如何知道什么时候停止运行

00:03:43.160 --> 00:03:46.160
或者更具体点, 你怎么知道一个程序将有可能会停下来

00:03:46.160 --> 00:03:48.160
当然还有其它类似的问题

00:03:48.160 --> 00:03:50.160
其中一个就是Cragi Venter的问题

00:03:50.160 --> 00:03:52.160
其实我认为他实际上是一个计算机科学家

00:03:52.160 --> 00:03:55.160
他问,能发展成一个微型生物体

00:03:55.160 --> 00:03:57.160
的最小基因组需要有多大

00:03:57.160 --> 00:03:59.160
我能少用几个基因?

00:03:59.160 --> 00:04:01.160
这个问题其实和,我能写的

00:04:01.160 --> 00:04:02.160
能实现像微软的Word一样功能的最小的程序有多小

00:04:02.160 --> 00:04:04.160
是很类似的

00:04:04.160 --> 00:04:05.160
(笑声)

00:04:05.160 --> 00:04:09.160
而且在他研究基因组的时候,你知道,细菌将会变小

00:04:09.160 --> 00:04:10.160
他在研究的基因组能发挥功能

00:04:10.160 --> 00:04:12.160
我们也能写更小的程序

00:04:12.160 --> 00:04:14.160
而且让它完成像微软的"Word"的一样的功能

00:04:14.160 --> 00:04:16.160
但对于分子程序来说,我们的问题是

00:04:16.160 --> 00:04:20.160
我们需要放多少分子到种子里而能让它"长"成一部手机

00:04:20.160 --> 00:04:22.160
我们需要的最小数量是多少

00:04:22.160 --> 00:04:24.160
现在,计算科学领域有一个重大的问题

00:04:24.160 --> 00:04:26.160
这些都是复杂的问题

00:04:26.160 --> 00:04:28.160
而且计算科学家告诉我们这些都是相当困难的问题

00:04:28.160 --> 00:04:30.160
几乎,或者说大部分都是不可能回答的

00:04:30.160 --> 00:04:33.160
但对于其中的一些,我们可以开始尝试回答

00:04:33.160 --> 00:04:34.160
所以, 我现在要开始问这些

00:04:34.160 --> 00:04:37.160
关于DNA结构的问题了,这也是我下面要讨论的

00:04:37.160 --> 00:04:40.160
在一个正常的DNA里,那种你认为是正常的DNA

00:04:40.160 --> 00:04:42.160
它有两股,是双螺旋

00:04:42.160 --> 00:04:45.160
因为有A,T,C,G这些碱基才能把两股维系在一起

00:04:45.160 --> 00:04:47.160
我下面会用这种方式代表DNA结构

00:04:47.160 --> 00:04:49.160
希望不会吓到你们

00:04:49.160 --> 00:04:52.160
我们只看这两股中的一股,不把它想成是双螺旋

00:04:52.160 --> 00:04:55.160
当我们合成的时候,我们先合成单股的

00:04:55.160 --> 00:04:58.160
这样我们可以在一个试管里合成这股蓝色的

00:04:58.160 --> 00:05:00.160
而在另一个试管里合成这条橙色的

00:05:00.160 --> 00:05:02.160
它们在单股的时候是松软的

00:05:02.160 --> 00:05:05.160
但当你把它们混合在一起的时候,他们就形成了稳固的双螺旋

00:05:05.160 --> 00:05:07.160
在过去的二十五年里

00:05:07.160 --> 00:05:09.160
Ned Seeman(纽约大学化学系的一名教授,致力于DNA结构相关的纳米技术的研究)和几个他的学生

00:05:09.160 --> 00:05:12.160
一直在辛苦研究,并利用这类DNA单股合在一起的反应

00:05:12.160 --> 00:05:15.160
做出了漂亮的三维结构

00:05:15.160 --> 00:05:18.160
他们多数的方法虽然很精致,但需要很长的时间

00:05:18.160 --> 00:05:21.160
也许会需要两三年的时间,或者会特别难以设计

00:05:21.160 --> 00:05:24.160
所以我几年前想出了这样一个新方法

00:05:24.160 --> 00:05:25.160
我叫它DNA"折纸"

00:05:25.160 --> 00:05:27.160
这是项很简单的技术,你甚至可以在自家的厨房里完成

00:05:27.160 --> 00:05:29.160
并用笔记本电脑设计这些东西

00:05:29.160 --> 00:05:32.160
不过,为了做这些,你需要一个长的单股DNA

00:05:32.160 --> 00:05:34.160
而从技术角度讲,这种DNA又很难得到

00:05:34.160 --> 00:05:36.160
所以,你可以找一个自然的来源

00:05:36.160 --> 00:05:38.160
现在来看这个电脑合成的加工品

00:05:38.160 --> 00:05:40.160
他有一个并不太好的双股的基因组

00:05:40.160 --> 00:05:43.160
来看他的肠子, 有几十亿的细菌

00:05:43.160 --> 00:05:45.160
这也不太妙

00:05:45.160 --> 00:05:47.160
这确实也是双股的,但在内部,它被病毒感染了

00:05:47.160 --> 00:05:50.160
其内部有一个很好的长长的单股基因组

00:05:50.160 --> 00:05:52.160
我们可以折叠这个基因组,就像折叠一张纸

00:05:52.160 --> 00:05:53.160
以下是我们如何做的

00:05:53.160 --> 00:05:54.160
这是基因组的一部分

00:05:54.160 --> 00:05:57.160
我们加入一些短小的合成的DNA结构, 我把这些短链叫作 "订书针"

00:05:57.160 --> 00:06:01.160
每一个都有一小段可以和长链在某一个地方结全起来

00:06:01.160 --> 00:06:04.160
而另一小段可以结合在长链的另一个地方

00:06:04.160 --> 00:06:06.160
这样就可以把整个长链改变成这样的结构

00:06:07.160 --> 00:06:09.160
许多这些小DNA和长链结合的总结果就是

00:06:09.160 --> 00:06:11.160
把长链折叠成一个类似于长方形的形状

00:06:11.160 --> 00:06:13.160
目前为止,我们还不能把这一过程拍成电影

00:06:13.160 --> 00:06:15.160
但是哈佛大学的Shawn Douglas

00:06:15.160 --> 00:06:17.160
为我们做了一个很棒的视觉展示

00:06:17.160 --> 00:06:21.160
起初的时候有一条长长的链和一些短小的链

00:06:21.160 --> 00:06:25.160
然后我们把它们混合在一起

00:06:25.160 --> 00:06:27.160
之后加热,并加一点盐

00:06:27.160 --> 00:06:29.160
把它们加热到几乎到沸腾了,再冷却下来

00:06:29.160 --> 00:06:30.160
在冷却的过程中

00:06:30.160 --> 00:06:32.160
那些短小的链会和长链

00:06:32.160 --> 00:06:34.160
开始形成结构

00:06:34.160 --> 00:06:37.160
你能在这看到有一点双螺旋形成了

00:06:38.160 --> 00:06:40.160
当你看DNA"折纸"的时候

00:06:40.160 --> 00:06:43.160
你能看到它实际上到底是什么

00:06:43.160 --> 00:06:44.160
即使你认为它是个很复杂的东西

00:06:44.160 --> 00:06:47.160
其实只是一些双螺旋平行排列在一起

00:06:47.160 --> 00:06:49.160
它们之所以能组合在一起

00:06:49.160 --> 00:06:51.160
是因为有那些短小链一端和一个螺旋结合

00:06:51.160 --> 00:06:53.160
同时另一端再和另一处结合

00:06:53.160 --> 00:06:56.160
所以会有这样的一些链,和一个螺旋并行结合

00:06:56.160 --> 00:06:58.160
同时又跳到另一条螺旋上再回来

00:06:58.160 --> 00:07:00.160
这样能把长链组装成这个样子

00:07:00.160 --> 00:07:03.160
为了展示我们能做成各种我们想要的形状和样式

00:07:03.160 --> 00:07:05.160
我想做这样一个形状

00:07:06.160 --> 00:07:08.160
我想让DNA这样向上越过眼睛

00:07:08.160 --> 00:07:11.160
到鼻子下面,再回到鼻子上面,绕过额头

00:07:11.160 --> 00:07:14.160
再回到下面,像这样完全一个圈

00:07:14.160 --> 00:07:17.160
然后我想如果能做成这个形状,那任何其它形状都可以

00:07:17.160 --> 00:07:20.160
之后我用电脑程序来设计小的"订书针"来实现这个目标

00:07:20.160 --> 00:07:22.160
我订购了这些,联邦快运送来的

00:07:22.160 --> 00:07:24.160
把它们混合起来,加热再冷却下来

00:07:24.160 --> 00:07:28.160
得到了每滴水中有五百亿个微小

00:07:28.160 --> 00:07:30.160
的"笑脸"瓢游着.

00:07:30.160 --> 00:07:32.160
而且每一个都只有

00:07:32.160 --> 00:07:36.160
人类头发的一千之分一那么细.

00:07:36.160 --> 00:07:39.160
它们在水里飘浮着,为了能看清楚

00:07:39.160 --> 00:07:41.160
你需要能找到一个表面能让这些"笑脸"粘在上面

00:07:41.160 --> 00:07:43.160
所以,你把它们倒入一个表面上

00:07:43.160 --> 00:07:45.160
它们开始粘在这个表面上

00:07:45.160 --> 00:07:47.160
我们再用原子显微镜来照张相

00:07:47.160 --> 00:07:49.160
原子显微镜有一个针,像是个记录针

00:07:49.160 --> 00:07:51.160
在表面上往返运动

00:07:51.160 --> 00:07:54.160
一会上一会下来感觉表面的高低

00:07:54.160 --> 00:07:56.160
它能感觉到DNA"折纸"

00:07:56.160 --> 00:07:58.160
这里有一个原子显微镜在工作

00:07:59.160 --> 00:08:00.160
你能看到表面有一点起伏不平

00:08:00.160 --> 00:08:02.160
当你放大来看,这些"笑脸"

00:08:02.160 --> 00:08:03.160
有些下巴与额头重叠在一起

00:08:03.160 --> 00:08:06.160
有些"笑脸"的鼻子被打了,但总体来说是不错的

00:08:06.160 --> 00:08:08.160
你能继续放大,看到更小的多出来的小圈

00:08:08.160 --> 00:08:10.160
这些小小的纳米级的山羊胡子

00:08:10.160 --> 00:08:13.160
现在,这项技术的好处在于任何人都能做到

00:08:13.160 --> 00:08:17.160
我一年前在邮件里收到了别人自发寄来的这样东西

00:08:17.160 --> 00:08:20.160
有人知道这是什么吗?

00:08:20.160 --> 00:08:22.160
是中国的版图

00:08:22.160 --> 00:08:24.160
事情是这样的,一个中国的研究生

00:08:24.160 --> 00:08:26.160
钱露露(音译),做了一个很棒的工作

00:08:26.160 --> 00:08:28.160
她自己写了程序

00:08:28.160 --> 00:08:30.160
来设计并构建这些DNA 折纸

00:08:30.160 --> 00:08:33.160
一份十分漂亮的中国版图,还包括台湾

00:08:33.160 --> 00:08:36.160
而且你能看到可能是世界上最短的一条绳子了,是吧?

00:08:36.160 --> 00:08:38.160
(笑声)

00:08:39.160 --> 00:08:40.160
所以这个方法确实很好用

00:08:41.160 --> 00:08:43.160
而且除了形状外你还能设计不同的样式

00:08:44.160 --> 00:08:47.160
你可以做一张美国的地图,并用DNA来拼写"DNA"这个单词

00:08:47.160 --> 00:08:50.160
最精彩的是

00:08:50.160 --> 00:08:52.160
这些看上去都像是纳米级的艺术品

00:08:52.160 --> 00:08:53.160
但实际上纳米级的艺术品

00:08:53.160 --> 00:08:55.160
其实就是建造纳米级的电路板所需要的东西

00:08:55.160 --> 00:08:57.160
所以,你可以把电路板的组件安在这些"订书针"上

00:08:57.160 --> 00:08:59.160
就像一个电灯泡和一个灯的开关

00:08:59.160 --> 00:09:02.160
让这些东西组装起来,你就能得到一个电路板

00:09:02.160 --> 00:09:05.160
之后可以把DNA洗掉,而就只剩下电路板

00:09:05.160 --> 00:09:07.160
这是我在加州理工大学的一些同事们做的工作

00:09:07.160 --> 00:09:10.160
他们把DNA"折纸",和用有机分子修饰过的碳纳米管

00:09:10.160 --> 00:09:12.160
来组装成小的开关,看这里,把它绕起来

00:09:12.160 --> 00:09:15.160
测试后发现它真的是一个开关

00:09:15.160 --> 00:09:17.160
现在它只是单个开关

00:09:17.160 --> 00:09:21.160
你需要五亿个这样的单元来组装电脑,所以我们还有很长的路要走

00:09:21.160 --> 00:09:23.160
但这却是很有前景的

00:09:23.160 --> 00:09:28.160
因为这些"折纸"能组装只有普通电脑组件十分之一

00:09:28.160 --> 00:09:29.160
那么大的组件

00:09:29.160 --> 00:09:32.160
所以这项技术是很有前景能组装出小计算机的

00:09:32.160 --> 00:09:35.160
现在,我想再回去编译器的话题上

00:09:35.160 --> 00:09:38.160
DNA"折纸"能证明编译器是真的能工作的

00:09:39.160 --> 00:09:41.160
所以,你在电脑里开始了某一项工作

00:09:41.160 --> 00:09:44.160
你有一个高级的关于电脑程序的说明

00:09:44.160 --> 00:09:46.160
一个高级的关于"折纸"的说明

00:09:46.160 --> 00:09:49.160
你能把这些编译成分子,把它发给组装的人

00:09:49.160 --> 00:09:50.160
而且它还确实可以工作

00:09:50.160 --> 00:09:54.160
事实上有个公司发明了一个很好的程序

00:09:54.160 --> 00:09:56.160
一个比我的丑陋程序要好得多的程序

00:09:56.160 --> 00:09:57.160
这个程序能让我们更好的实现设计过程

00:09:57.160 --> 00:09:59.160
用一种电脑辅助的视觉设计方法

00:10:00.160 --> 00:10:01.160
现在,你就能明白

00:10:01.160 --> 00:10:03.160
为什么DNA "折纸"不是一个终结

00:10:03.160 --> 00:10:05.160
你有分子的编译器,你能用它实现任何你想做的事

00:10:05.160 --> 00:10:08.160
问题是它不能大规模生产

00:10:08.160 --> 00:10:11.160
所以如果你想从DNA"折纸"起发展成一个人

00:10:11.160 --> 00:10:13.160
问题是,你需要很长的一股DNA

00:10:13.160 --> 00:10:16.160
大概需要有十万亿万亿碱基的DNA链

00:10:16.160 --> 00:10:18.160
相当于三光年长的DNA

00:10:18.160 --> 00:10:20.160
所以我们不能这么做

00:10:20.160 --> 00:10:22.160
我们得用别的技术

00:10:22.160 --> 00:10:24.160
一种叫作模块的算术自行组装的方法

00:10:24.160 --> 00:10:26.160
这项技术是由Erik Winfree 发明的

00:10:26.160 --> 00:10:27.160
这项技术是

00:10:27.160 --> 00:10:31.160
它有一些大约是DNA"折纸"百分之一长度的模块

00:10:31.160 --> 00:10:33.160
如果你放大来看,那有四股DNA

00:10:34.160 --> 00:10:36.160
这上面有很小的单股的小片段

00:10:36.160 --> 00:10:38.160
如果相互匹配，这些小片段可以和别的模块连接在一起

00:10:38.160 --> 00:10:41.160
我们用小的正方形来代表这些模块

00:10:42.160 --> 00:10:44.160
如果你注意到它们的粘性末端,这些小的DNA片段

00:10:44.160 --> 00:10:47.160
你能看到它们能形成一个格子图案

00:10:47.160 --> 00:10:50.160
所以这些小的模块将会自动组装成一个复杂的格子图案

00:10:50.160 --> 00:10:52.160
关键是你可能没有注意到

00:10:52.160 --> 00:10:55.160
这些小模块其实类似于分子程序

00:10:55.160 --> 00:10:58.160
而且他们能呈现出某种样式

00:10:58.160 --> 00:11:00.160
最神奇的地方是

00:11:00.160 --> 00:11:02.160
任何电脑程序都能被

00:11:02.160 --> 00:11:05.160
转录成这样一些模块程序,更确切地说,计数.

00:11:05.160 --> 00:11:08.160
你可以准备好一些模块

00:11:08.160 --> 00:11:11.160
当这些模块被放在一起的时候, 能形成一个二进制的计数器

00:11:11.160 --> 00:11:13.160
而不只是一个格子图案

00:11:13.160 --> 00:11:16.160
你能直接读出二进制的五,六和七

00:11:16.160 --> 00:11:19.160
为了能让这类的计算正确开始

00:11:19.160 --> 00:11:21.160
你需要输入一些东西,类似于一个种子

00:11:21.160 --> 00:11:23.160
你可以用DNA"折纸"来当种子

00:11:23.160 --> 00:11:25.160
你可以把32编码到

00:11:25.160 --> 00:11:27.160
DNA"折纸"的右手边

00:11:27.160 --> 00:11:29.160
然后当你加入那些能计数的模块后

00:11:29.160 --> 00:11:32.160
它们将开始计数,当它们读到32时

00:11:32.160 --> 00:11:34.160
他们就能停下来

00:11:34.160 --> 00:11:37.160
所以,我们所做的就是找到了一种方法

00:11:37.160 --> 00:11:40.160
能让一个分子程序知道什么时候停止生长

00:11:40.160 --> 00:11:42.160
它知道什么时候停下来,因为它能计算

00:11:42.160 --> 00:11:44.160
它知道已经长了有多大

00:11:44.160 --> 00:11:47.160
所以,这就能回答我提出的第一个问题

00:11:47.160 --> 00:11:50.160
但它还是不能告诉我们婴儿是如何做到这一点的.

00:11:50.160 --> 00:11:54.160
现在,我们能用这种计数方法来试着做出

00:11:54.160 --> 00:11:55.160
比DNA"折纸"能做到的更大的东西来

00:11:55.160 --> 00:11:58.160
这是一个DNA"折纸",我们能做的是

00:11:58.160 --> 00:12:01.160
在DNA"折纸"的两条边都写上32

00:12:01.160 --> 00:12:03.160
我们现在能用"洒水壶"来给

00:12:03.160 --> 00:12:07.160
这些模块"浇水",从这些模块再长出新的模块

00:12:07.160 --> 00:12:09.160
来组成一个正方形

00:12:09.160 --> 00:12:12.160
计数器就好像是个一模板

00:12:12.160 --> 00:12:14.160
填充在正方形的中央

00:12:14.160 --> 00:12:15.160
这样,我们就能成功地

00:12:15.160 --> 00:12:18.160
利用DNA"折纸"和模块的组合

00:12:18.160 --> 00:12:21.160
来合成比DNA"折纸"更大许多的东西

00:12:21.160 --> 00:12:24.160
巧妙的是,它能够重复编写

00:12:24.160 --> 00:12:28.160
通过改变二进制代表里的几股DNA

00:12:28.160 --> 00:12:31.160
你就能得到一个96而不是32

00:12:31.160 --> 00:12:34.160
在这前提下,如果你保持DNA"折纸"的大小不变

00:12:34.160 --> 00:12:38.160
你就能得到一个比原来大三倍的正方形

00:12:39.160 --> 00:12:40.160
简单来概括一下

00:12:40.160 --> 00:12:42.160
我所讲的生长

00:12:42.160 --> 00:12:45.160
你有一个很敏感的电脑程序

00:12:45.160 --> 00:12:48.160
其中很小的变化, 单个的,很微小的变异

00:12:48.160 --> 00:12:50.160
能把一个本来能生产出一个某个尺寸的正方形

00:12:50.160 --> 00:12:53.160
变成生产出一些特别大的东西来

00:12:54.160 --> 00:12:57.160
这种利用计数来计算

00:12:57.160 --> 00:12:59.160
并利用这种发展过程来

00:12:59.160 --> 00:13:01.160
构建这种东西的过程

00:13:01.160 --> 00:13:05.160
也是Craig Venter关心的问题

00:13:05.160 --> 00:13:07.160
所以,如果你问,到底需要多少股DNA

00:13:07.160 --> 00:13:09.160
来建造一个特定大小的正方形?

00:13:09.160 --> 00:13:14.160
如果我们想建一个10或者100或者1000那么大的正方形

00:13:14.160 --> 00:13:16.160
如果我们只用DNA"折纸"

00:13:16.160 --> 00:13:19.160
我们得需要一个有正方形边长

00:13:19.160 --> 00:13:21.160
平方那么多股的DNA"折纸"

00:13:21.160 --> 00:13:23.160
我们就得需要100或者10000甚至1百万股DNA

00:13:23.160 --> 00:13:25.160
这个数字实在是太大了

00:13:25.160 --> 00:13:27.160
但如果我们用一点计算的方法

00:13:27.160 --> 00:13:31.160
我们用DNA"折纸", 外加一些能计数的模块

00:13:31.160 --> 00:13:34.160
那我们只需要100或者200或者300股DNA

00:13:34.160 --> 00:13:39.160
这样我们就能指数级的减少需要用的DNA

00:13:39.160 --> 00:13:42.160
如果我们用一点计算的方法的话.

00:13:42.160 --> 00:13:45.160
计算是一种很有效的方法

00:13:45.160 --> 00:13:48.160
能用来减少为了建造这些东西而需要的分子数量

00:13:48.160 --> 00:13:51.160
也可以减少你建造的基因组的大小

00:13:51.160 --> 00:13:54.160
最后,我还是回到那个

00:13:54.160 --> 00:13:56.160
有关计算机再建造计算机的疯狂想法

00:13:56.160 --> 00:13:59.160
看着这个用DNA"折纸"建造的正方形

00:13:59.160 --> 00:14:01.160
和从它长出来的计数器

00:14:01.160 --> 00:14:04.160
它的样式就和你要建一个内存所需要的样式

00:14:04.160 --> 00:14:05.160
是一模一样的

00:14:05.160 --> 00:14:08.160
所以如果你在模块上附上一些电线和开关

00:14:08.160 --> 00:14:11.160
或者说把它们附在模块上,而不是DNA短链上

00:14:11.160 --> 00:14:14.160
之后他们就能自己组装成有一点复杂的电路

00:14:14.160 --> 00:14:17.160
那种你在内存里会需要的解复用器

00:14:17.160 --> 00:14:19.160
所以你能用一点计算来建一个

00:14:19.160 --> 00:14:21.160
复杂的电路.

00:14:21.160 --> 00:14:24.160
这是一个分子计算机建电子计算机的过程

00:14:24.160 --> 00:14:27.160
你也许会问,在这条路上我们已经走了多远?

00:14:27.160 --> 00:14:30.160
从实验角度来说,这是我们去年完成的.

00:14:30.160 --> 00:14:32.160
这里有一个DNA"折纸"的长方形

00:14:33.160 --> 00:14:35.160
和一些从它长出来的模块.

00:14:35.160 --> 00:14:37.160
你能看出来它们是怎么计数的.

00:14:37.160 --> 00:14:49.160
一,二,三,四,五,六,九,十,十一,十二,十七

00:14:49.160 --> 00:14:53.160
它有错误,但至少能越数越大

00:14:53.160 --> 00:14:54.160
(笑声)

00:14:54.160 --> 00:14:57.160
实际上,我们九年前就开始有了这一想法

00:14:57.160 --> 00:15:00.160
这大约就是做这件事必须得投入的时间

00:15:00.160 --> 00:15:02.160
我觉得我们有很大进步.

00:15:02.160 --> 00:15:04.160
我们现在也有想法去校正这些错误.

00:15:04.160 --> 00:15:06.160
我认为在未来的五或十年里

00:15:06.160 --> 00:15:08.160
我们将能做出我刚才形容的那种正方形

00:15:08.160 --> 00:15:11.160
或者还能做一些那种自我组装的电路.

00:15:11.160 --> 00:15:15.160
我希望你们今天能从我的讲解里学到什么呢?

00:15:15.160 --> 00:15:17.160
我希望你们能记住

00:15:17.160 --> 00:15:21.160
为了创造出生物体非常多样和复杂的形式

00:15:21.160 --> 00:15:23.160
生物要用计算来实现这一目标.

00:15:23.160 --> 00:15:27.160
而且它所用的计算是分子计算形式,

00:15:27.160 --> 00:15:29.160
为了能理解并更好的利用这一点

00:15:29.160 --> 00:15:31.160
就像费曼说的,

00:15:31.160 --> 00:15:33.160
为了理解某样东西,我们得建造一个出来

00:15:33.160 --> 00:15:37.160
我们将用分子,重新设计这些东西

00:15:37.160 --> 00:15:39.160
并从头开始从新建造每一样东西

00:15:39.160 --> 00:15:42.160
用一种自然从未用过的方式

00:15:42.160 --> 00:15:44.160
用DNA"折纸"

00:15:44.160 --> 00:15:47.160
和DNA"折纸"引导的算法的自我组装.

00:15:47.160 --> 00:15:49.160
你知道的,所有这些都很棒

00:15:50.160 --> 00:15:51.160
但我希望你们能从这个演讲

00:15:51.160 --> 00:15:53.160
提及的问题当中有所收获

00:15:53.160 --> 00:15:56.160
这类的分子程序不仅仅是建一些小工具

00:15:56.160 --> 00:15:58.160
它不仅仅是能造.....

00:15:58.160 --> 00:16:00.160
能用来建自我组装的手机和电路

00:16:00.160 --> 00:16:02.160
真正关键的是,利用计算科学

00:16:02.160 --> 00:16:05.160
并且用一种新的眼光看待大问题

00:16:05.160 --> 00:16:07.160
从新的角度来问这些问题

00:16:07.160 --> 00:16:09.160
并且试图理解生物

00:16:09.160 --> 00:16:11.160
是如何创造这些另人惊奇的事物的. 谢谢.

00:16:12.160 --> 00:16:19.160
(掌声)

